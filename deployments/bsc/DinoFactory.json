{
  "address": "0x35E9455c410EacD6B4Dc1D0ca3144031f6251Dc2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46fd30f65fa98594e5b716e17ede539f152d72c5cc25ef97550bada51f84abe4",
  "receipt": {
    "to": null,
    "from": "0x33bC7BB7Ed7E2d0AA4A25DC47D7c14b5Ba5dc928",
    "contractAddress": "0x35E9455c410EacD6B4Dc1D0ca3144031f6251Dc2",
    "transactionIndex": 24,
    "gasUsed": "2560569",
    "logsBloom": "0x
    "blockHash": "0x73b98331e8aae35d4c6fa92ac21bdd32087d047981e449bb89b76839cc8ef162",
    "transactionHash": "0x46fd30f65fa98594e5b716e17ede539f152d72c5cc25ef97550bada51f84abe4",
    "logs": [],
    "blockNumber": 7916684,
    "cumulativeGasUsed": "3831494",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x33bC7BB7Ed7E2d0AA4A25DC47D7c14b5Ba5dc928"
  ],
  "solcInputHash": "824f9859f0c4ac9073c7a2503d889f09",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DinoFactory.sol\":\"DinoFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DinoBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.12;\\n\\nimport './interfaces/IDinoBEP20.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract DinoBEP20 {\\n    using SafeMath for uint256;\\n\\n    string public constant name = 'Dino LPs';\\n    string public constant symbol = 'Dino-LP';\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, 'Dino: EXPIRED');\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    '\\\\x19\\\\x01',\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Dino: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xa1ef5bffb86a1315d5c165f04d6339967a85c37387fd56c9fef78c6f87d584c4\",\"license\":\"MIT\"},\"contracts/DinoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.12;\\n\\nimport './interfaces/IDinoFactory.sol';\\nimport './DinoPair.sol';\\n\\ncontract DinoFactory is IDinoFactory {\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(DinoPair).creationCode));\\n\\n    address public override feeTo;\\n    address public override feeToSetter;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view override returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, 'Dino: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'Dino: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'Dino: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(DinoPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IDinoPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, 'Dino: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, 'Dino: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0xd9d1d29d4a3642317c1e072a82c0dc1474018e3293b1b0dd23592993c1477174\",\"license\":\"MIT\"},\"contracts/DinoPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport './libraries/SafeMath.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IBEP20.sol';\\nimport './interfaces/IDinoPair.sol';\\nimport './interfaces/IDinoFactory.sol';\\nimport './interfaces/IDinoCallee.sol';\\nimport './DinoBEP20.sol';\\n\\ncontract DinoPair is DinoBEP20 {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    uint256 public constant MAX_PRICE_HISTORY = 10000;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    struct PriceLog {\\n        uint256 price0Cumulative;\\n        uint256 price1Cumulative;\\n        uint32 timestamp;\\n    }\\n\\n    PriceLog[] public priceLog;\\n    uint256 public priceLogNextIndex;\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'Dino: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Dino: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'Dino: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Dino: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n            _appendPriceLog(price0CumulativeLast, price1CumulativeLast, blockTimestamp);\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IDinoFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = SafeMath.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = SafeMath.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint256 denominator = rootK.mul(2).add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IBEP20(token0).balanceOf(address(this));\\n        uint256 balance1 = IBEP20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = SafeMath.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = SafeMath.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'Dino: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IBEP20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IBEP20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'Dino: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IBEP20(_token0).balanceOf(address(this));\\n        balance1 = IBEP20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'Dino: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Dino: INSUFFICIENT_LIQUIDITY');\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'Dino: INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) IDinoCallee(to).dinoCall(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IBEP20(_token0).balanceOf(address(this));\\n            balance1 = IBEP20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'Dino: INSUFFICIENT_INPUT_AMOUNT');\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(\\n                balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2),\\n                'Dino: K'\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IBEP20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IBEP20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IBEP20(token0).balanceOf(address(this)), IBEP20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    function _appendPriceLog(uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) private {\\n        if (priceLog.length < MAX_PRICE_HISTORY) {\\n            priceLog.push(PriceLog(price0Cumulative, price1Cumulative, blockTimestamp));\\n        } else {\\n            priceLog[priceLogNextIndex] = PriceLog(price0Cumulative, price1Cumulative, blockTimestamp);\\n        }\\n\\n        if (++priceLogNextIndex >= MAX_PRICE_HISTORY) {\\n            priceLogNextIndex = 0;\\n        }\\n    }\\n\\n    function priceLogLength() external view returns (uint256 length) {\\n        return priceLog.length;\\n    }\\n}\\n\",\"keccak256\":\"0x661480164762099d90dac6638e8252189a1722233e6dd8b7e8998aee02449785\",\"license\":\"MIT\"},\"contracts/interfaces/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc34a0fc0edc354e31790feb123bc93302e8b21765768e546b633fb168469cb8\",\"license\":\"MIT\"},\"contracts/interfaces/IDinoBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IDinoBEP20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x804c0e6f68813dff46c04db03c4c8ed225e2fadae4d05ad24ac3b2a17f7cc53b\",\"license\":\"MIT\"},\"contracts/interfaces/IDinoCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IDinoCallee {\\n    function dinoCall(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa076002710c1cc991f5821d73a09fbe5fe72947e4786ecb1b9130cf4fb616cae\",\"license\":\"MIT\"},\"contracts/interfaces/IDinoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IDinoFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xfb07b951a8d985958be88068ae5e2e52416fccd9d4540f8b6b5fbb5e665acb07\",\"license\":\"MIT\"},\"contracts/interfaces/IDinoPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IDinoPair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x6f52d95c3570077e582d473a90f559a5e65db54e1a365480a86ea6dc6c9d4e5e\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1de2a24b6da5a4b2164df9a9fe8d0c16362fcb7e2aa3ddd283133da0d8d39c1a\",\"license\":\"MIT\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1e8bbc704c20dae7ede197908b89de755b79bef4008cc38e2c7e43fa4abfede6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612d55380380612d558339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055612cf2806100636000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80635855a25a116100665780635855a25a146100fb578063a2e74af614610103578063c9c653961461012b578063e6a4390514610159578063f46901ed1461018757610093565b8063017e7e5814610098578063094b7415146100bc5780631e3dd18b146100c4578063574f2ba3146100e1575b600080fd5b6100a06101ad565b604080516001600160a01b039092168252519081900360200190f35b6100a06101bc565b6100a0600480360360208110156100da57600080fd5b50356101cb565b6100e96101f2565b60408051918252519081900360200190f35b6100e96101f8565b6101296004803603602081101561011957600080fd5b50356001600160a01b031661028b565b005b6100a06004803603604081101561014157600080fd5b506001600160a01b03813581169160200135166102fe565b6100a06004803603604081101561016f57600080fd5b506001600160a01b0381358116916020013516610619565b6101296004803603602081101561019d57600080fd5b50356001600160a01b031661063f565b6000546001600160a01b031681565b6001546001600160a01b031681565b600381815481106101d857fe5b6000918252602090912001546001600160a01b0316905081565b60035490565b604051610207602082016106b2565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b6020831061024d5780518252601f19909201916020918201910161022e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b6001546001600160a01b031633146102dc576040805162461bcd60e51b815260206004820152600f60248201526e2234b7379d102327a92124a22222a760891b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b03161415610367576040805162461bcd60e51b815260206004820152601960248201527f44696e6f3a204944454e544943414c5f41444452455353455300000000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061038a57838561038d565b84845b90925090506001600160a01b0382166103e2576040805162461bcd60e51b815260206004820152601260248201527144696e6f3a205a45524f5f4144445245535360701b604482015290519081900360640190fd5b6001600160a01b03828116600090815260026020908152604080832085851684529091529020541615610450576040805162461bcd60e51b815260206004820152601160248201527044696e6f3a20504149525f45584953545360781b604482015290519081900360640190fd5b606060405180602001610462906106b2565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610690576040805162461bcd60e51b815260206004820152600f60248201526e2234b7379d102327a92124a22222a760891b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612626806106c08339019056fe60806040526001600e5534801561001557600080fd5b50604080518082018252600881526744696e6f204c507360c01b6020918201528151808301835260018152603160f81b90820152905146916100c1917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f917ff97596e14ccae3179b39ad8c817c7d97a49b32d9582d983551fd34d70b90cab5917fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69186913091016100f4565b60408051601f19818403018152919052805160209091012060035550600580546001600160a01b03191633179055610120565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6124f78061012f6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636a6278421161010f578063ba9a7a56116100a2578063d21220a711610071578063d21220a7146103b3578063d505accf146103bb578063dd62ed3e146103ce578063fff6cae9146103e1576101e5565b8063ba9a7a5614610388578063bb39a04314610390578063bc25cf7714610398578063c45a0155146103ab576101e5565b80637ecebe00116100de5780637ecebe001461033957806389afcb441461034c57806395d89b411461036d578063a9059cbb14610375576101e5565b80636a6278421461030357806370a08231146103165780637464fc3d1461032957806379fbf9d214610331576101e5565b8063219cbe31116101875780633644e515116101565780633644e515146102d8578063485cc955146102e05780635909c0d5146102f35780635a3d5493146102fb576101e5565b8063219cbe311461028657806323b872dd146102a857806330adf81f146102bb578063313ce567146102c3576101e5565b8063095ea7b3116101c3578063095ea7b3146102345780630dfe16811461025457806313fe39231461026957806318160ddd1461027e576101e5565b8063022c0d9f146101ea57806306fdde03146101ff5780630902f1ac1461021d575b600080fd5b6101fd6101f8366004611f42565b6103e9565b005b6102076107ec565b60405161021491906120e9565b60405180910390f35b610225610810565b60405161021493929190612426565b610247610242366004611ec7565b61083a565b6040516102149190612083565b61025c610851565b604051610214919061200a565b610271610860565b604051610214919061208e565b610271610866565b610299610294366004611f12565b61086c565b60405161021493929190612478565b6102476102b6366004611e12565b6108a2565b610271610936565b6102cb61095a565b6040516102149190612494565b61027161095f565b6101fd6102ee366004611dda565b610965565b6102716109bd565b6102716109c3565b610271610311366004611da2565b6109c9565b610271610324366004611da2565b610c79565b610271610c8b565b610271610c91565b610271610347366004611da2565b610c97565b61035f61035a366004611da2565b610ca9565b60405161021492919061244f565b61020761101f565b610247610383366004611ec7565b611042565b61027161104f565b610271611055565b6101fd6103a6366004611da2565b61105b565b61025c611188565b61025c611197565b6101fd6103c9366004611e52565b6111a6565b6102716103dc366004611dda565b611315565b6101fd611332565b600e546001146104145760405162461bcd60e51b815260040161040b9061217b565b60405180910390fd5b6000600e55841515806104275750600084115b6104435760405162461bcd60e51b815260040161040b906123d7565b60008061044e610810565b5091509150816001600160701b0316871080156104735750806001600160701b031686105b61048f5760405162461bcd60e51b815260040161040b9061233c565b60065460075460009182916001600160a01b039182169190811690891682148015906104cd5750806001600160a01b0316896001600160a01b031614155b6104e95760405162461bcd60e51b815260040161040b9061227b565b8a156104fa576104fa828a8d61147e565b891561050b5761050b818a8c61147e565b861561057857604051632eb77d9d60e11b81526001600160a01b038a1690635d6efb3a906105459033908f908f908e908e9060040161201e565b600060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526001600160a01b038316906370a08231906105a490309060040161200a565b60206040518083038186803b1580156105bc57600080fd5b505afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190611f2a565b6040516370a0823160e01b81529094506001600160a01b038216906370a082319061062390309060040161200a565b60206040518083038186803b15801561063b57600080fd5b505afa15801561064f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106739190611f2a565b92505050600089856001600160701b03160383116106925760006106a1565b89856001600160701b03160383035b9050600089856001600160701b03160383116106be5760006106cd565b89856001600160701b03160383035b905060008211806106de5750600081115b6106fa5760405162461bcd60e51b815260040161040b906121d8565b600061071c61070a8460036115c3565b610716876103e86115c3565b90611604565b9050600061072e61070a8460036115c3565b9050610753620f424061074d6001600160701b038b8116908b166115c3565b906115c3565b61075d83836115c3565b101561077b5760405162461bcd60e51b815260040161040b906123b6565b505061078984848888611646565b886001600160a01b0316336001600160a01b03167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848f8f6040516107d2949392919061245d565b60405180910390a350506001600e55505050505050505050565b6040518060400160405280600881526020016744696e6f204c507360c01b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006108473384846117e7565b5060015b92915050565b6006546001600160a01b031681565b600d5481565b60005481565b600c818154811061087957fe5b600091825260209091206003909102018054600182015460029092015490925063ffffffff1683565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610921576001600160a01b03841660009081526002602090815260408083203384529091529020546108fc9083611604565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b61092c84848461184f565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b0316331461098f5760405162461bcd60e51b815260040161040b90612252565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600e546001146109ed5760405162461bcd60e51b815260040161040b9061217b565b6000600e819055806109fd610810565b506006546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a0823190610a3790309060040161200a565b60206040518083038186803b158015610a4f57600080fd5b505afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611f2a565b6007546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610abd90309060040161200a565b60206040518083038186803b158015610ad557600080fd5b505afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611f2a565b90506000610b24836001600160701b038716611604565b90506000610b3b836001600160701b038716611604565b90506000610b4987876118f3565b60005490915080610b8057610b6c6103e8610716610b6787876115c3565b611a3f565b9850610b7b60006103e8611a91565b610bc3565b610bc06001600160701b038916610b9786846115c3565b81610b9e57fe5b046001600160701b038916610bb386856115c3565b81610bba57fe5b04611b1e565b98505b60008911610be35760405162461bcd60e51b815260040161040b90612373565b610bed8a8a611a91565b610bf986868a8a611646565b8115610c2357600854610c1f906001600160701b0380821691600160701b9004166115c3565b600b555b336001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051610c5e92919061244f565b60405180910390a250506001600e5550949695505050505050565b60016020526000908152604090205481565b600b5481565b600c5490565b60046020526000908152604090205481565b600080600e54600114610cce5760405162461bcd60e51b815260040161040b9061217b565b6000600e81905580610cde610810565b506006546007546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190610d2090309060040161200a565b60206040518083038186803b158015610d3857600080fd5b505afa158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d709190611f2a565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610da0919061200a565b60206040518083038186803b158015610db857600080fd5b505afa158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df09190611f2a565b30600090815260016020526040812054919250610e0d88886118f3565b60005490915080610e1e84876115c3565b81610e2557fe5b049a5080610e3384866115c3565b81610e3a57fe5b04995060008b118015610e4d575060008a115b610e695760405162461bcd60e51b815260040161040b9061220f565b610e733084611b34565b610e7e878d8d61147e565b610e89868d8c61147e565b6040516370a0823160e01b81526001600160a01b038816906370a0823190610eb590309060040161200a565b60206040518083038186803b158015610ecd57600080fd5b505afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f059190611f2a565b6040516370a0823160e01b81529095506001600160a01b038716906370a0823190610f3490309060040161200a565b60206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190611f2a565b9350610f9285858b8b611646565b8115610fbc57600854610fb8906001600160701b0380821691600160701b9004166115c3565b600b555b8b6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d60405161100192919061244f565b60405180910390a35050505050505050506001600e81905550915091565b60405180604001604052806007815260200166044696e6f2d4c560cc1b81525081565b600061084733848461184f565b6103e881565b61271081565b600e5460011461107d5760405162461bcd60e51b815260040161040b9061217b565b6000600e556006546007546008546040516370a0823160e01b81526001600160a01b03938416939092169161112b9184918691611126916001600160701b039091169084906370a08231906110d690309060040161200a565b60206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190611f2a565b61147e565b61117e81846111266008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110d6919061200a565b50506001600e5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156111c65760405162461bcd60e51b815260040161040b906122d4565b6003546001600160a01b03881660009081526004602090815260408083208054600181019091559051929392611227927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d92918d9101612097565b6040516020818303038152906040528051906020012060405160200161124e929190611fef565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161128b94939291906120cb565b6020604051602081039080840390855afa1580156112ad573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906112e35750886001600160a01b0316816001600160a01b0316145b6112ff5760405162461bcd60e51b815260040161040b906121a1565b61130a8989896117e7565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600e546001146113545760405162461bcd60e51b815260040161040b9061217b565b6000600e556006546040516370a0823160e01b8152611477916001600160a01b0316906370a082319061138b90309060040161200a565b60206040518083038186803b1580156113a357600080fd5b505afa1580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db9190611f2a565b6007546040516370a0823160e01b81526001600160a01b03909116906370a082319061140b90309060040161200a565b60206040518083038186803b15801561142357600080fd5b505afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190611f2a565b6008546001600160701b0380821691600160701b900416611646565b6001600e55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602090910152516000906060906001600160a01b038616907fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b906114f6908790879060240161206a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516115349190611fd3565b6000604051808303816000865af19150503d8060008114611571576040519150601f19603f3d011682016040523d82523d6000602084013e611576565b606091505b50915091508180156115a05750805115806115a05750808060200190518101906115a09190611ef2565b6115bc5760405162461bcd60e51b815260040161040b906122a5565b5050505050565b6000826115d25750600061084b565b828202828482816115df57fe5b04146115fd5760405162461bcd60e51b815260040161040b906122fb565b9392505050565b60006115fd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611bbe565b6001600160701b03841180159061166457506001600160701b038311155b6116805760405162461bcd60e51b815260040161040b9061211c565b60085463ffffffff42811691600160e01b900481168203908116158015906116b057506001600160701b03841615155b80156116c457506001600160701b03831615155b1561173f578063ffffffff166116ec856116dd86611bea565b6001600160e01b031690611bfc565b600980546001600160e01b03929092169290920201905563ffffffff8116611717846116dd87611bea565b6001600160e01b031602600a6000828254019250508190555061173f600954600a5484611c21565b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff87160217928390556040517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1936117d79381811693909104169061240c565b60405180910390a1505050505050565b6001600160a01b0380841660008181526002602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061184290859061208e565b60405180910390a3505050565b6001600160a01b0383166000908152600160205260409020546118729082611604565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546118a19082611d7d565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061184290859061208e565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561194457600080fd5b505afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190611dbe565b600b546001600160a01b038216158015945091925090611a2b578015611a265760006119b7610b676001600160701b038881169088166115c3565b905060006119c483611a3f565b905080821115611a235760006119e66119dd8484611604565b600054906115c3565b905060006119ff836119f98660026115c3565b90611d7d565b90506000818381611a0c57fe5b0490508015611a1f57611a1f8782611a91565b5050505b50505b611a37565b8015611a37576000600b555b505092915050565b60006003821115611a82575080600160028204015b81811015611a7c57809150600281828581611a6b57fe5b040181611a7457fe5b049050611a54565b50611a8c565b8115611a8c575060015b919050565b600054611a9e9082611d7d565b60009081556001600160a01b038316815260016020526040902054611ac39082611d7d565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611b1290859061208e565b60405180910390a35050565b6000818310611b2d57816115fd565b5090919050565b6001600160a01b038216600090815260016020526040902054611b579082611604565b6001600160a01b03831660009081526001602052604081209190915554611b7e9082611604565b60009081556040516001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611b1290859061208e565b60008184841115611be25760405162461bcd60e51b815260040161040b91906120e9565b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b03841681611c1957fe5b049392505050565b600c546127101115611cec57604080516060810182528481526020810184815263ffffffff848116938301938452600c805460018101825560009190915292517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c760039094029384015590517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c883015591517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c9909101805463ffffffff191691909216179055611d5f565b60405180606001604052808481526020018381526020018263ffffffff16815250600c600d5481548110611d1c57fe5b60009182526020918290208351600392909202019081559082015160018201556040909101516002909101805463ffffffff191663ffffffff9092169190911790555b600d80546001019081905561271011611d78576000600d555b505050565b6000828201838110156115fd5760405162461bcd60e51b815260040161040b90612144565b600060208284031215611db3578081fd5b81356115fd816124d2565b600060208284031215611dcf578081fd5b81516115fd816124d2565b60008060408385031215611dec578081fd5b8235611df7816124d2565b91506020830135611e07816124d2565b809150509250929050565b600080600060608486031215611e26578081fd5b8335611e31816124d2565b92506020840135611e41816124d2565b929592945050506040919091013590565b600080600080600080600060e0888a031215611e6c578283fd5b8735611e77816124d2565b96506020880135611e87816124d2565b95506040880135945060608801359350608088013560ff81168114611eaa578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611ed9578182fd5b8235611ee4816124d2565b946020939093013593505050565b600060208284031215611f03578081fd5b815180151581146115fd578182fd5b600060208284031215611f23578081fd5b5035919050565b600060208284031215611f3b578081fd5b5051919050565b600080600080600060808688031215611f59578081fd5b85359450602086013593506040860135611f72816124d2565b9250606086013567ffffffffffffffff80821115611f8e578283fd5b818801915088601f830112611fa1578283fd5b813581811115611faf578384fd5b896020828501011115611fc0578384fd5b9699959850939650602001949392505050565b60008251611fe58184602087016124a2565b9190910192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b600060018060a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825282518060208401526121088160408501602087016124a2565b601f01601f19169190910160400192915050565b6020808252600e908201526d44696e6f3a204f564552464c4f5760901b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600c908201526b111a5b9bce881313d0d2d15160a21b604082015260600190565b60208082526017908201527f44696e6f3a20494e56414c49445f5349474e4154555245000000000000000000604082015260600190565b6020808252601f908201527f44696e6f3a20494e53554646494349454e545f494e5055545f414d4f554e5400604082015260600190565b60208082526023908201527f44696e6f3a20494e53554646494349454e545f4c49515549444954595f42555260408201526213915160ea1b606082015260800190565b6020808252600f908201526e2234b7379d102327a92124a22222a760891b604082015260600190565b60208082526010908201526f44696e6f3a20494e56414c49445f544f60801b604082015260600190565b602080825260159082015274111a5b9bce881514905394d1915497d19052531151605a1b604082015260600190565b6020808252600d908201526c111a5b9bce8811561412549151609a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601c908201527f44696e6f3a20494e53554646494349454e545f4c495155494449545900000000604082015260600190565b60208082526023908201527f44696e6f3a20494e53554646494349454e545f4c49515549444954595f4d494e60408201526215115160ea1b606082015260800190565b60208082526007908201526644696e6f3a204b60c81b604082015260600190565b6020808252818101527f44696e6f3a20494e53554646494349454e545f4f55545055545f414d4f554e54604082015260600190565b6001600160701b0392831681529116602082015260400190565b6001600160701b03938416815291909216602082015263ffffffff909116604082015260600190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b928352602083019190915263ffffffff16604082015260600190565b60ff91909116815260200190565b60005b838110156124bd5781810151838201526020016124a5565b838111156124cc576000848401525b50505050565b6001600160a01b03811681146124e757600080fd5b5056fea164736f6c634300060c000aa164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80635855a25a116100665780635855a25a146100fb578063a2e74af614610103578063c9c653961461012b578063e6a4390514610159578063f46901ed1461018757610093565b8063017e7e5814610098578063094b7415146100bc5780631e3dd18b146100c4578063574f2ba3146100e1575b600080fd5b6100a06101ad565b604080516001600160a01b039092168252519081900360200190f35b6100a06101bc565b6100a0600480360360208110156100da57600080fd5b50356101cb565b6100e96101f2565b60408051918252519081900360200190f35b6100e96101f8565b6101296004803603602081101561011957600080fd5b50356001600160a01b031661028b565b005b6100a06004803603604081101561014157600080fd5b506001600160a01b03813581169160200135166102fe565b6100a06004803603604081101561016f57600080fd5b506001600160a01b0381358116916020013516610619565b6101296004803603602081101561019d57600080fd5b50356001600160a01b031661063f565b6000546001600160a01b031681565b6001546001600160a01b031681565b600381815481106101d857fe5b6000918252602090912001546001600160a01b0316905081565b60035490565b604051610207602082016106b2565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b6020831061024d5780518252601f19909201916020918201910161022e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b6001546001600160a01b031633146102dc576040805162461bcd60e51b815260206004820152600f60248201526e2234b7379d102327a92124a22222a760891b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b03161415610367576040805162461bcd60e51b815260206004820152601960248201527f44696e6f3a204944454e544943414c5f41444452455353455300000000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061038a57838561038d565b84845b90925090506001600160a01b0382166103e2576040805162461bcd60e51b815260206004820152601260248201527144696e6f3a205a45524f5f4144445245535360701b604482015290519081900360640190fd5b6001600160a01b03828116600090815260026020908152604080832085851684529091529020541615610450576040805162461bcd60e51b815260206004820152601160248201527044696e6f3a20504149525f45584953545360781b604482015290519081900360640190fd5b606060405180602001610462906106b2565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610690576040805162461bcd60e51b815260206004820152600f60248201526e2234b7379d102327a92124a22222a760891b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612626806106c08339019056fe60806040526001600e5534801561001557600080fd5b50604080518082018252600881526744696e6f204c507360c01b6020918201528151808301835260018152603160f81b90820152905146916100c1917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f917ff97596e14ccae3179b39ad8c817c7d97a49b32d9582d983551fd34d70b90cab5917fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69186913091016100f4565b60408051601f19818403018152919052805160209091012060035550600580546001600160a01b03191633179055610120565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6124f78061012f6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636a6278421161010f578063ba9a7a56116100a2578063d21220a711610071578063d21220a7146103b3578063d505accf146103bb578063dd62ed3e146103ce578063fff6cae9146103e1576101e5565b8063ba9a7a5614610388578063bb39a04314610390578063bc25cf7714610398578063c45a0155146103ab576101e5565b80637ecebe00116100de5780637ecebe001461033957806389afcb441461034c57806395d89b411461036d578063a9059cbb14610375576101e5565b80636a6278421461030357806370a08231146103165780637464fc3d1461032957806379fbf9d214610331576101e5565b8063219cbe31116101875780633644e515116101565780633644e515146102d8578063485cc955146102e05780635909c0d5146102f35780635a3d5493146102fb576101e5565b8063219cbe311461028657806323b872dd146102a857806330adf81f146102bb578063313ce567146102c3576101e5565b8063095ea7b3116101c3578063095ea7b3146102345780630dfe16811461025457806313fe39231461026957806318160ddd1461027e576101e5565b8063022c0d9f146101ea57806306fdde03146101ff5780630902f1ac1461021d575b600080fd5b6101fd6101f8366004611f42565b6103e9565b005b6102076107ec565b60405161021491906120e9565b60405180910390f35b610225610810565b60405161021493929190612426565b610247610242366004611ec7565b61083a565b6040516102149190612083565b61025c610851565b604051610214919061200a565b610271610860565b604051610214919061208e565b610271610866565b610299610294366004611f12565b61086c565b60405161021493929190612478565b6102476102b6366004611e12565b6108a2565b610271610936565b6102cb61095a565b6040516102149190612494565b61027161095f565b6101fd6102ee366004611dda565b610965565b6102716109bd565b6102716109c3565b610271610311366004611da2565b6109c9565b610271610324366004611da2565b610c79565b610271610c8b565b610271610c91565b610271610347366004611da2565b610c97565b61035f61035a366004611da2565b610ca9565b60405161021492919061244f565b61020761101f565b610247610383366004611ec7565b611042565b61027161104f565b610271611055565b6101fd6103a6366004611da2565b61105b565b61025c611188565b61025c611197565b6101fd6103c9366004611e52565b6111a6565b6102716103dc366004611dda565b611315565b6101fd611332565b600e546001146104145760405162461bcd60e51b815260040161040b9061217b565b60405180910390fd5b6000600e55841515806104275750600084115b6104435760405162461bcd60e51b815260040161040b906123d7565b60008061044e610810565b5091509150816001600160701b0316871080156104735750806001600160701b031686105b61048f5760405162461bcd60e51b815260040161040b9061233c565b60065460075460009182916001600160a01b039182169190811690891682148015906104cd5750806001600160a01b0316896001600160a01b031614155b6104e95760405162461bcd60e51b815260040161040b9061227b565b8a156104fa576104fa828a8d61147e565b891561050b5761050b818a8c61147e565b861561057857604051632eb77d9d60e11b81526001600160a01b038a1690635d6efb3a906105459033908f908f908e908e9060040161201e565b600060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526001600160a01b038316906370a08231906105a490309060040161200a565b60206040518083038186803b1580156105bc57600080fd5b505afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190611f2a565b6040516370a0823160e01b81529094506001600160a01b038216906370a082319061062390309060040161200a565b60206040518083038186803b15801561063b57600080fd5b505afa15801561064f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106739190611f2a565b92505050600089856001600160701b03160383116106925760006106a1565b89856001600160701b03160383035b9050600089856001600160701b03160383116106be5760006106cd565b89856001600160701b03160383035b905060008211806106de5750600081115b6106fa5760405162461bcd60e51b815260040161040b906121d8565b600061071c61070a8460036115c3565b610716876103e86115c3565b90611604565b9050600061072e61070a8460036115c3565b9050610753620f424061074d6001600160701b038b8116908b166115c3565b906115c3565b61075d83836115c3565b101561077b5760405162461bcd60e51b815260040161040b906123b6565b505061078984848888611646565b886001600160a01b0316336001600160a01b03167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848f8f6040516107d2949392919061245d565b60405180910390a350506001600e55505050505050505050565b6040518060400160405280600881526020016744696e6f204c507360c01b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006108473384846117e7565b5060015b92915050565b6006546001600160a01b031681565b600d5481565b60005481565b600c818154811061087957fe5b600091825260209091206003909102018054600182015460029092015490925063ffffffff1683565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610921576001600160a01b03841660009081526002602090815260408083203384529091529020546108fc9083611604565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b61092c84848461184f565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b0316331461098f5760405162461bcd60e51b815260040161040b90612252565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600e546001146109ed5760405162461bcd60e51b815260040161040b9061217b565b6000600e819055806109fd610810565b506006546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a0823190610a3790309060040161200a565b60206040518083038186803b158015610a4f57600080fd5b505afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611f2a565b6007546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610abd90309060040161200a565b60206040518083038186803b158015610ad557600080fd5b505afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611f2a565b90506000610b24836001600160701b038716611604565b90506000610b3b836001600160701b038716611604565b90506000610b4987876118f3565b60005490915080610b8057610b6c6103e8610716610b6787876115c3565b611a3f565b9850610b7b60006103e8611a91565b610bc3565b610bc06001600160701b038916610b9786846115c3565b81610b9e57fe5b046001600160701b038916610bb386856115c3565b81610bba57fe5b04611b1e565b98505b60008911610be35760405162461bcd60e51b815260040161040b90612373565b610bed8a8a611a91565b610bf986868a8a611646565b8115610c2357600854610c1f906001600160701b0380821691600160701b9004166115c3565b600b555b336001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051610c5e92919061244f565b60405180910390a250506001600e5550949695505050505050565b60016020526000908152604090205481565b600b5481565b600c5490565b60046020526000908152604090205481565b600080600e54600114610cce5760405162461bcd60e51b815260040161040b9061217b565b6000600e81905580610cde610810565b506006546007546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190610d2090309060040161200a565b60206040518083038186803b158015610d3857600080fd5b505afa158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d709190611f2a565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610da0919061200a565b60206040518083038186803b158015610db857600080fd5b505afa158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df09190611f2a565b30600090815260016020526040812054919250610e0d88886118f3565b60005490915080610e1e84876115c3565b81610e2557fe5b049a5080610e3384866115c3565b81610e3a57fe5b04995060008b118015610e4d575060008a115b610e695760405162461bcd60e51b815260040161040b9061220f565b610e733084611b34565b610e7e878d8d61147e565b610e89868d8c61147e565b6040516370a0823160e01b81526001600160a01b038816906370a0823190610eb590309060040161200a565b60206040518083038186803b158015610ecd57600080fd5b505afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f059190611f2a565b6040516370a0823160e01b81529095506001600160a01b038716906370a0823190610f3490309060040161200a565b60206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190611f2a565b9350610f9285858b8b611646565b8115610fbc57600854610fb8906001600160701b0380821691600160701b9004166115c3565b600b555b8b6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d60405161100192919061244f565b60405180910390a35050505050505050506001600e81905550915091565b60405180604001604052806007815260200166044696e6f2d4c560cc1b81525081565b600061084733848461184f565b6103e881565b61271081565b600e5460011461107d5760405162461bcd60e51b815260040161040b9061217b565b6000600e556006546007546008546040516370a0823160e01b81526001600160a01b03938416939092169161112b9184918691611126916001600160701b039091169084906370a08231906110d690309060040161200a565b60206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190611f2a565b61147e565b61117e81846111266008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110d6919061200a565b50506001600e5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156111c65760405162461bcd60e51b815260040161040b906122d4565b6003546001600160a01b03881660009081526004602090815260408083208054600181019091559051929392611227927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d92918d9101612097565b6040516020818303038152906040528051906020012060405160200161124e929190611fef565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161128b94939291906120cb565b6020604051602081039080840390855afa1580156112ad573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906112e35750886001600160a01b0316816001600160a01b0316145b6112ff5760405162461bcd60e51b815260040161040b906121a1565b61130a8989896117e7565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600e546001146113545760405162461bcd60e51b815260040161040b9061217b565b6000600e556006546040516370a0823160e01b8152611477916001600160a01b0316906370a082319061138b90309060040161200a565b60206040518083038186803b1580156113a357600080fd5b505afa1580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db9190611f2a565b6007546040516370a0823160e01b81526001600160a01b03909116906370a082319061140b90309060040161200a565b60206040518083038186803b15801561142357600080fd5b505afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190611f2a565b6008546001600160701b0380821691600160701b900416611646565b6001600e55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602090910152516000906060906001600160a01b038616907fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b906114f6908790879060240161206a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516115349190611fd3565b6000604051808303816000865af19150503d8060008114611571576040519150601f19603f3d011682016040523d82523d6000602084013e611576565b606091505b50915091508180156115a05750805115806115a05750808060200190518101906115a09190611ef2565b6115bc5760405162461bcd60e51b815260040161040b906122a5565b5050505050565b6000826115d25750600061084b565b828202828482816115df57fe5b04146115fd5760405162461bcd60e51b815260040161040b906122fb565b9392505050565b60006115fd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611bbe565b6001600160701b03841180159061166457506001600160701b038311155b6116805760405162461bcd60e51b815260040161040b9061211c565b60085463ffffffff42811691600160e01b900481168203908116158015906116b057506001600160701b03841615155b80156116c457506001600160701b03831615155b1561173f578063ffffffff166116ec856116dd86611bea565b6001600160e01b031690611bfc565b600980546001600160e01b03929092169290920201905563ffffffff8116611717846116dd87611bea565b6001600160e01b031602600a6000828254019250508190555061173f600954600a5484611c21565b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff87160217928390556040517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1936117d79381811693909104169061240c565b60405180910390a1505050505050565b6001600160a01b0380841660008181526002602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061184290859061208e565b60405180910390a3505050565b6001600160a01b0383166000908152600160205260409020546118729082611604565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546118a19082611d7d565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061184290859061208e565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561194457600080fd5b505afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190611dbe565b600b546001600160a01b038216158015945091925090611a2b578015611a265760006119b7610b676001600160701b038881169088166115c3565b905060006119c483611a3f565b905080821115611a235760006119e66119dd8484611604565b600054906115c3565b905060006119ff836119f98660026115c3565b90611d7d565b90506000818381611a0c57fe5b0490508015611a1f57611a1f8782611a91565b5050505b50505b611a37565b8015611a37576000600b555b505092915050565b60006003821115611a82575080600160028204015b81811015611a7c57809150600281828581611a6b57fe5b040181611a7457fe5b049050611a54565b50611a8c565b8115611a8c575060015b919050565b600054611a9e9082611d7d565b60009081556001600160a01b038316815260016020526040902054611ac39082611d7d565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611b1290859061208e565b60405180910390a35050565b6000818310611b2d57816115fd565b5090919050565b6001600160a01b038216600090815260016020526040902054611b579082611604565b6001600160a01b03831660009081526001602052604081209190915554611b7e9082611604565b60009081556040516001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611b1290859061208e565b60008184841115611be25760405162461bcd60e51b815260040161040b91906120e9565b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b03841681611c1957fe5b049392505050565b600c546127101115611cec57604080516060810182528481526020810184815263ffffffff848116938301938452600c805460018101825560009190915292517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c760039094029384015590517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c883015591517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c9909101805463ffffffff191691909216179055611d5f565b60405180606001604052808481526020018381526020018263ffffffff16815250600c600d5481548110611d1c57fe5b60009182526020918290208351600392909202019081559082015160018201556040909101516002909101805463ffffffff191663ffffffff9092169190911790555b600d80546001019081905561271011611d78576000600d555b505050565b6000828201838110156115fd5760405162461bcd60e51b815260040161040b90612144565b600060208284031215611db3578081fd5b81356115fd816124d2565b600060208284031215611dcf578081fd5b81516115fd816124d2565b60008060408385031215611dec578081fd5b8235611df7816124d2565b91506020830135611e07816124d2565b809150509250929050565b600080600060608486031215611e26578081fd5b8335611e31816124d2565b92506020840135611e41816124d2565b929592945050506040919091013590565b600080600080600080600060e0888a031215611e6c578283fd5b8735611e77816124d2565b96506020880135611e87816124d2565b95506040880135945060608801359350608088013560ff81168114611eaa578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611ed9578182fd5b8235611ee4816124d2565b946020939093013593505050565b600060208284031215611f03578081fd5b815180151581146115fd578182fd5b600060208284031215611f23578081fd5b5035919050565b600060208284031215611f3b578081fd5b5051919050565b600080600080600060808688031215611f59578081fd5b85359450602086013593506040860135611f72816124d2565b9250606086013567ffffffffffffffff80821115611f8e578283fd5b818801915088601f830112611fa1578283fd5b813581811115611faf578384fd5b896020828501011115611fc0578384fd5b9699959850939650602001949392505050565b60008251611fe58184602087016124a2565b9190910192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b600060018060a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825282518060208401526121088160408501602087016124a2565b601f01601f19169190910160400192915050565b6020808252600e908201526d44696e6f3a204f564552464c4f5760901b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600c908201526b111a5b9bce881313d0d2d15160a21b604082015260600190565b60208082526017908201527f44696e6f3a20494e56414c49445f5349474e4154555245000000000000000000604082015260600190565b6020808252601f908201527f44696e6f3a20494e53554646494349454e545f494e5055545f414d4f554e5400604082015260600190565b60208082526023908201527f44696e6f3a20494e53554646494349454e545f4c49515549444954595f42555260408201526213915160ea1b606082015260800190565b6020808252600f908201526e2234b7379d102327a92124a22222a760891b604082015260600190565b60208082526010908201526f44696e6f3a20494e56414c49445f544f60801b604082015260600190565b602080825260159082015274111a5b9bce881514905394d1915497d19052531151605a1b604082015260600190565b6020808252600d908201526c111a5b9bce8811561412549151609a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601c908201527f44696e6f3a20494e53554646494349454e545f4c495155494449545900000000604082015260600190565b60208082526023908201527f44696e6f3a20494e53554646494349454e545f4c49515549444954595f4d494e60408201526215115160ea1b606082015260800190565b60208082526007908201526644696e6f3a204b60c81b604082015260600190565b6020808252818101527f44696e6f3a20494e53554646494349454e545f4f55545055545f414d4f554e54604082015260600190565b6001600160701b0392831681529116602082015260400190565b6001600160701b03938416815291909216602082015263ffffffff909116604082015260600190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b928352602083019190915263ffffffff16604082015260600190565b60ff91909116815260200190565b60005b838110156124bd5781810151838201526020016124a5565b838111156124cc576000848401525b50505050565b6001600160a01b03811681146124e757600080fd5b5056fea164736f6c634300060c000aa164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1910,
        "contract": "contracts/DinoFactory.sol:DinoFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1913,
        "contract": "contracts/DinoFactory.sol:DinoFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1920,
        "contract": "contracts/DinoFactory.sol:DinoFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 1924,
        "contract": "contracts/DinoFactory.sol:DinoFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}