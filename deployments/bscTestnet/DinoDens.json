{
  "address": "0x7d9d4e883DaEe6a23DA96Ad148dC996194D7dD68",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBEP20",
          "name": "_dino",
          "type": "address"
        },
        {
          "internalType": "contract IDinoTreasury",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "Referral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldBp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBp",
          "type": "uint256"
        }
      ],
      "name": "ReferralBonusBpChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_userTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "ReferralPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_REFERRAL_BP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBEP20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "depositWithReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dino",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dinoPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getReferral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastClaimDinoBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "contract IMigratorDens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingDino",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDinoPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refBonusBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referredCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMigratorDens",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract IDinoTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRefBonusBp",
          "type": "uint256"
        }
      ],
      "name": "updateReferralBonusBp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9b883737532a87e9e97757299f62b74c84f2cf28b3e493e04a59961349fd93b",
  "receipt": {
    "to": null,
    "from": "0x4C37848BC193995a3Cdf280919a42bD899464a2D",
    "contractAddress": "0x7d9d4e883DaEe6a23DA96Ad148dC996194D7dD68",
    "transactionIndex": 4,
    "gasUsed": "2324458",
    "logsBloom": "0x
    "blockHash": "0xf43750834de588d1824a54ac7b691e1b8a6825d462220ea1eaaf5f0dc4f24b1e",
    "transactionHash": "0xd9b883737532a87e9e97757299f62b74c84f2cf28b3e493e04a59961349fd93b",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9916650,
        "transactionHash": "0xd9b883737532a87e9e97757299f62b74c84f2cf28b3e493e04a59961349fd93b",
        "address": "0x7d9d4e883DaEe6a23DA96Ad148dC996194D7dD68",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c37848bc193995a3cdf280919a42bd899464a2d"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xf43750834de588d1824a54ac7b691e1b8a6825d462220ea1eaaf5f0dc4f24b1e"
      }
    ],
    "blockNumber": 9916650,
    "cumulativeGasUsed": "2594223",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFfBbEAE934549ce6E420ede7dBc91036d19E95E0",
    "0xEB3F32D3ad04F21202EC50D90904A76d7a666f97",
    9025730
  ],
  "solcInputHash": "09df086e15422a8c3d37c475cd44a761",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_dino\",\"type\":\"address\"},{\"internalType\":\"contract IDinoTreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldBp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBp\",\"type\":\"uint256\"}],\"name\":\"ReferralBonusBpChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"ReferralPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_REFERRAL_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"depositWithReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dino\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dinoPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimDinoBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorDens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDino\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDinoPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refBonusBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorDens\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract IDinoTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRefBonusBp\",\"type\":\"uint256\"}],\"name\":\"updateReferralBonusBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DinoDens.sol\":\"DinoDens\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DinoDens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.12;\\n\\nimport './interfaces/IBEP20.sol';\\nimport './libraries/SafeMath.sol';\\nimport './libraries/SafeBEP20.sol';\\nimport './libraries/Ownable.sol';\\n\\ninterface IMigratorDens {\\n    // Take the current LP token address and return the new LP token address.\\n    // Migrator should have full access to the caller's LP token.\\n    function migrate(IBEP20 token) external returns (IBEP20);\\n}\\n\\ninterface IDinoTreasury {\\n    function claim() external returns (uint256);\\n}\\n\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once DINO is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract DinoDens is Ownable {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of DINOs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accDinoPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accDinoPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBEP20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. DINOs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that DINOs distribution occurs.\\n        uint256 accDinoPerShare; // Accumulated DINOs per share, times 1e12. See below.\\n    }\\n\\n    // The DINO TOKEN!\\n    IBEP20 public dino;\\n    // The treasury contract\\n    IDinoTreasury public treasury;\\n    // DINO tokens created per block.\\n    uint256 public dinoPerBlock;\\n    // Last block number that dens claims DINO tokens.\\n    uint256 public lastClaimDinoBlock;\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorDens public migrator;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when DINO mining starts.\\n    uint256 public startBlock;\\n\\n    // Max referral commission rate: 20%.\\n    uint16 public constant MAXIMUM_REFERRAL_BP = 2000;\\n    // Referral Bonus in basis points. Initially set to 2%\\n    uint256 public refBonusBP = 200;\\n    uint256 public accBP = 9800; \\n    // Referral Mapping\\n    mapping(address => address) public referrers; // account_address -> referrer_address\\n    mapping(address => uint256) public referredCount; // referrer_address -> num_of_referred\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Referral(address indexed _referrer, address indexed _user);\\n    event ReferralPaid(address indexed _user, address indexed _userTo, uint256 _reward);\\n    event ReferralBonusBpChanged(uint256 _oldBp, uint256 _newBp);\\n\\n    constructor(\\n        IBEP20 _dino,\\n        IDinoTreasury _treasury,\\n        uint256 _startBlock\\n    ) public {\\n        dino = _dino;\\n        treasury = _treasury;\\n        startBlock = _startBlock;\\n\\n        // staking pool\\n        poolInfo.push(PoolInfo({lpToken: _dino, allocPoint: 0, lastRewardBlock: startBlock, accDinoPerShare: 0}));\\n        dinoPerBlock = treasury.claim();\\n        lastClaimDinoBlock = block.number;\\n        totalAllocPoint = 0;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IBEP20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accDinoPerShare: 0})\\n        );\\n    }\\n\\n    // Update the given pool's DINO allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorDens _migrator) public onlyOwner {\\n        migrator = _migrator;\\n    }\\n\\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\\n    function migrate(uint256 _pid) public {\\n        require(address(migrator) != address(0), 'migrate: no migrator');\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IBEP20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IBEP20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), 'migrate: bad');\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\n        return _to.sub(_from);\\n    }\\n\\n    // View function to see pending DINOs on frontend.\\n    function pendingDino(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accDinoPerShare = pool.accDinoPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 dinoReward = multiplier.mul(dinoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accDinoPerShare = accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt).mul(accBP).div(10000);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        if (lastClaimDinoBlock < block.number) {\\n            dinoPerBlock = treasury.claim().div(block.number.sub(lastClaimDinoBlock));\\n            lastClaimDinoBlock = block.number;\\n        }\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 dinoReward = multiplier.mul(dinoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        pool.accDinoPerShare = pool.accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to DinoDens for DINO allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        require(_pid != 0, 'deposit DINO by staking');\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                sendReward(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Deposit LP tokens to DinoDens for DINO allocation with referral.\\n    function depositWithReferrer(uint256 _pid, uint256 _amount, address _referrer) public {\\n        require(_pid != 0, 'deposit DINO by staking');\\n        require(_referrer == address(_referrer),\\\"deposit: Invalid referrer address\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                sendReward(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            setReferral(msg.sender, _referrer);\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from DinoDens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        require(_pid != 0, 'withdraw DINO by unstaking');\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, 'withdraw: not good');\\n\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            sendReward(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Stake DINO tokens to DinoDens\\n    function enterStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        updatePool(0);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                sendReward(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n\\n        emit Deposit(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw DINO tokens from STAKING.\\n    function leaveStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        require(user.amount >= _amount, 'withdraw: not good');\\n        updatePool(0);\\n        uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            sendReward(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n\\n        emit Withdraw(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Safe dino transfer function, just in case if rounding error causes pool to not have enough DINOs.\\n    function safeDinoTransfer(address _to, uint256 _amount) internal {\\n        uint256 dinoBal = dino.balanceOf(address(this));\\n        if (_amount > dinoBal) {\\n            dino.transfer(_to, dinoBal);\\n        } else {\\n            dino.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Set Referral Address for a user\\n    function setReferral(address _user, address _referrer) internal {\\n        if (_referrer == address(_referrer) && referrers[_user] == address(0) && _referrer != address(0) && _referrer != _user) {\\n            referrers[_user] = _referrer;\\n            referredCount[_referrer] += 1;\\n            emit Referral(_user, _referrer);\\n        }\\n    }\\n\\n    // Get Referral Address for a Account\\n    function getReferral(address _user) public view returns (address) {\\n        return referrers[_user];\\n    }\\n\\n    // Send reward to Account and the referrer if needed\\n    function sendReward(address _user, uint256 _pending) internal {\\n        uint256 accEarned = _pending.mul(accBP).div(10000);\\n        safeDinoTransfer(_user, accEarned);\\n        payReferralCommission(_user, _pending);\\n    }\\n\\n    // Pay referral commission to the referrer who referred this user.\\n    function payReferralCommission(address _user, uint256 _pending) internal {\\n        address referrer = getReferral(_user);\\n        if (referrer != address(0) && referrer != _user && refBonusBP > 0) {\\n            uint256 refBonusEarned = _pending.mul(refBonusBP).div(10000);\\n            safeDinoTransfer(referrer, refBonusEarned);\\n            emit ReferralPaid(_user, referrer, refBonusEarned);\\n        }\\n    }\\n\\n    // Referral Bonus in basis points.\\n    // Initially set to 2%, this this the ability to increase or decrease the Bonus percentage based on\\n    // community voting and feedback.\\n    function updateReferralBonusBp(uint256 _newRefBonusBp) public onlyOwner {\\n        require(_newRefBonusBp <= MAXIMUM_REFERRAL_BP, \\\"updateReferralBonusBp: invalid referral bonus basis points\\\");\\n        require(_newRefBonusBp != refBonusBP, \\\"updateReferralBonusBp: same bonus bp set\\\");\\n        uint256 previousRefBonusBP = refBonusBP;\\n        refBonusBP = _newRefBonusBp;\\n        accBP = 10000 - refBonusBP;\\n        emit ReferralBonusBpChanged(previousRefBonusBP, _newRefBonusBp);\\n    }\\n}\\n\",\"keccak256\":\"0x092df02e0596b418afce69dee5d6e81ef83cb98eddb7d53e8e0cce3eef62c1b2\",\"license\":\"MIT\"},\"contracts/interfaces/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc34a0fc0edc354e31790feb123bc93302e8b21765768e546b633fb168469cb8\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x721e647998bd10326c34bbca3d952379a62266832bfdb21b18adbce0e1afde13\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xc7d2396c5481131099cdbc8138b2c4df45b5150edc983a78b5fd01acb1197cf2\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x702257f24af80a77b86990f29d8fc193413a5c3b9ddf8ac8f9f841199e78eef5\",\"license\":\"MIT\"},\"contracts/libraries/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport '../interfaces/IBEP20.sol';\\nimport './SafeMath.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(value, 'SafeBEP20: decreased allowance below zero');\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ef26b7f4bf9d8ad7661dff713779c3a3f34cc713790eb2e717d3dd31a1fede9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1de2a24b6da5a4b2164df9a9fe8d0c16362fcb7e2aa3ddd283133da0d8d39c1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060085560c8600a55612648600b553480156200002157600080fd5b506040516200275638038062002756833981810160405260608110156200004757600080fd5b508051602082015160409092015190919060006200006462000237565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b038086166001600160a01b03199283168117845560028054878416908516178155600986905560408051608081018252928352600060208085018281528584018a815260608701848152600680549b8c0181558552965160049a8b027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f81018054928b1692909b169190911790995590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40890155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4188015593517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d429096019590955590548151634e71d92d60e01b81529151931694634e71d92d94828201949283900390910190829087803b158015620001f457600080fd5b505af115801562000209573d6000803e3d6000fd5b505050506040513d60208110156200022057600080fd5b50516003555050436004555060006008556200023b565b3390565b61250b806200024b6000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80635312ea8e1161011a57806371812716116100ad57806393f1a40b1161007c57806393f1a40b14610548578063a44e45471461058d578063c13cb08414610595578063e2bbb1581461059d578063f2fde38b146105c057610206565b806371812716146104e95780637cd07e47146105155780638da5cb5b1461051d5780638dbb1e3a1461052557610206565b806364482f79116100e957806364482f791461049157806364ed743b146104bc57806366f685ea146104d9578063715018a6146104e157610206565b80635312ea8e1461045c5780635687c1ab1461047957806361d027b314610481578063630b5ba11461048957610206565b80633b0f0f2f1161019d578063454b06081161016c578063454b0608146103ec57806348cd4cb1146104095780634a3b68cc146104115780634b8c43d01461043757806351eb05a61461043f57610206565b80633b0f0f2f146103445780633f7b06d81461038657806341441d3b146103ac578063441a3e70146103c957610206565b806317caf6f1116101d957806317caf6f1146102c35780631eaaa045146102cb57806323cf3118146102ff5780633a22df781461032557610206565b806305831aa21461020b578063081e3eda1461023f5780631058d281146102595780631526fe2714610276575b600080fd5b61023d6004803603606081101561022157600080fd5b50803590602081013590604001356001600160a01b03166105e6565b005b61024761075b565b60408051918252519081900360200190f35b61023d6004803603602081101561026f57600080fd5b5035610761565b6102936004803603602081101561028c57600080fd5b50356108ce565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b61024761090f565b61023d600480360360608110156102e157600080fd5b508035906001600160a01b0360208201351690604001351515610915565b61023d6004803603602081101561031557600080fd5b50356001600160a01b0316610a90565b61032d610b0a565b6040805161ffff9092168252519081900360200190f35b61036a6004803603602081101561035a57600080fd5b50356001600160a01b0316610b10565b604080516001600160a01b039092168252519081900360200190f35b6102476004803603602081101561039c57600080fd5b50356001600160a01b0316610b2e565b61023d600480360360208110156103c257600080fd5b5035610b40565b61023d600480360360408110156103df57600080fd5b5080359060200135610c69565b61023d6004803603602081101561040257600080fd5b5035610e0e565b61024761106a565b61036a6004803603602081101561042757600080fd5b50356001600160a01b0316611070565b61024761108b565b61023d6004803603602081101561045557600080fd5b5035611091565b61023d6004803603602081101561047257600080fd5b503561126d565b610247611308565b61036a61130e565b61023d61131d565b61023d600480360360608110156104a757600080fd5b50803590602081013590604001351515611340565b61023d600480360360208110156104d257600080fd5b503561141c565b610247611546565b61023d61154c565b610247600480360360408110156104ff57600080fd5b50803590602001356001600160a01b03166115ee565b61036a61175e565b61036a61176d565b6102476004803603604081101561053b57600080fd5b508035906020013561177c565b6105746004803603604081101561055e57600080fd5b50803590602001356001600160a01b031661178f565b6040805192835260208301919091528051918290030190f35b61036a6117b3565b6102476117c2565b61023d600480360360408110156105b357600080fd5b50803590602001356117c8565b61023d600480360360208110156105d657600080fd5b50356001600160a01b0316611926565b82610632576040805162461bcd60e51b81526020600482015260176024820152766465706f7369742044494e4f206279207374616b696e6760481b604482015290519081900360640190fd5b60006006848154811061064157fe5b6000918252602080832087845260078252604080852033865290925292206004909102909101915061067285611091565b8054156106c75760006106b382600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b906119e0565b90611a22565b905080156106c5576106c53382611a64565b505b83156106fd576106d73384611a9c565b81546106ee906001600160a01b0316333087611b5a565b80546106fa9085611bb4565b81555b600382015481546107189164e8d4a51000916106a791611987565b6001820155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b60065490565b6000600660008154811061077157fe5b600091825260208083203384527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df90915260409092208054600490920290920192508311156107fc576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6108066000611091565b600061083482600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b90508015610846576108463382611a64565b83156108705781546108589085611a22565b82558254610870906001600160a01b03163386611c0e565b6003830154825461088b9164e8d4a51000916106a791611987565b600183015560408051858152905160009133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b600681815481106108db57fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60085481565b61091d611c60565b6000546001600160a01b0390811691161461096d576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b801561097b5761097b61131d565b6000600954431161098e57600954610990565b435b6008549091506109a09085611bb4565b600855604080516080810182526001600160a01b0394851681526020810195865290810191825260006060820181815260068054600181018255925291517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490920291820180546001600160a01b031916919096161790945593517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40840155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d418301555090517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4290910155565b610a98611c60565b6000546001600160a01b03908116911614610ae8576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6107d081565b6001600160a01b039081166000908152600c60205260409020541690565b600d6020526000908152604090205481565b60006006600081548110610b5057fe5b600091825260208083203384527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df90915260408320600490920201925090610b9790611091565b805415610be0576000610bcc82600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b90508015610bde57610bde3382611a64565b505b8215610c0c578154610bfd906001600160a01b0316333086611b5a565b8054610c099084611bb4565b81555b60038201548154610c279164e8d4a51000916106a791611987565b600182015560408051848152905160009133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050565b81610cbb576040805162461bcd60e51b815260206004820152601a60248201527f77697468647261772044494e4f20627920756e7374616b696e67000000000000604482015290519081900360640190fd5b600060068381548110610cca57fe5b600091825260208083208684526007825260408085203386529092529220805460049092029092019250831115610d3d576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610d4684611091565b6000610d7482600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b90508015610d8657610d863382611a64565b8315610db0578154610d989085611a22565b82558254610db0906001600160a01b03163386611c0e565b60038301548254610dcb9164e8d4a51000916106a791611987565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b6005546001600160a01b0316610e62576040805162461bcd60e51b815260206004820152601460248201527336b4b3b930ba329d1037379036b4b3b930ba37b960611b604482015290519081900360640190fd5b600060068281548110610e7157fe5b600091825260208083206004928302018054604080516370a0823160e01b81523095810195909552519195506001600160a01b0316939284926370a0823192602480840193829003018186803b158015610eca57600080fd5b505afa158015610ede573d6000803e3d6000fd5b505050506040513d6020811015610ef457600080fd5b5051600554909150610f13906001600160a01b03848116911683611c64565b6005546040805163ce5494bb60e01b81526001600160a01b0385811660048301529151600093929092169163ce5494bb9160248082019260209290919082900301818787803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d6020811015610f8f57600080fd5b5051604080516370a0823160e01b815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610fdb57600080fd5b505afa158015610fef573d6000803e3d6000fd5b505050506040513d602081101561100557600080fd5b50518214611049576040805162461bcd60e51b815260206004820152600c60248201526b1b5a59dc985d194e8818985960a21b604482015290519081900360640190fd5b83546001600160a01b0319166001600160a01b039190911617909255505050565b60095481565b600c602052600090815260409020546001600160a01b031681565b60045481565b43600454101561113d576111356110b360045443611a2290919063ffffffff16565b600260009054906101000a90046001600160a01b03166001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561110357600080fd5b505af1158015611117573d6000803e3d6000fd5b505050506040513d602081101561112d57600080fd5b5051906119e0565b600355436004555b60006006828154811061114c57fe5b906000526020600020906004020190508060020154431161116d575061126a565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156111b757600080fd5b505afa1580156111cb573d6000803e3d6000fd5b505050506040513d60208110156111e157600080fd5b50519050806111f757504360029091015561126a565b600061120783600201544361177c565b905060006112346008546106a7866001015461122e6003548761198790919063ffffffff16565b90611987565b905061125761124c846106a78464e8d4a51000611987565b600386015490611bb4565b6003850155505043600290920191909155505b50565b60006006828154811061127c57fe5b600091825260208083208584526007825260408085203380875293529093208054600490930290930180549094506112c1926001600160a01b03919091169190611c0e565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001909101555050565b60035481565b6002546001600160a01b031681565b60065460005b8181101561133c5761133481611091565b600101611323565b5050565b611348611c60565b6000546001600160a01b03908116911614611398576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b80156113a6576113a661131d565b6000600684815481106113b557fe5b906000526020600020906004020160010154905082600685815481106113d757fe5b906000526020600020906004020160010181905550828114611416576114128361140c83600854611a2290919063ffffffff16565b90611bb4565b6008555b50505050565b611424611c60565b6000546001600160a01b03908116911614611474576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b6107d08111156114b55760405162461bcd60e51b815260040180806020018281038252603a815260200180612426603a913960400191505060405180910390fd5b600a548114156114f65760405162461bcd60e51b81526004018080602001828103825260288152602001806124606028913960400191505060405180910390fd5b600a805490829055612710829003600b55604080518281526020810184905281517f3282b692bfebf5f35b198a229212cf532c72099026ab54c4b8665382d1086b3f929181900390910190a15050565b600a5481565b611554611c60565b6000546001600160a01b039081169116146115a4576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080600684815481106115fe57fe5b600091825260208083208784526007825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561167c57600080fd5b505afa158015611690573d6000803e3d6000fd5b505050506040513d60208110156116a657600080fd5b50516002850154909150431180156116bd57508015155b1561171d5760006116d285600201544361177c565b905060006116f96008546106a7886001015461122e6003548761198790919063ffffffff16565b9050611718611711846106a78464e8d4a51000611987565b8590611bb4565b935050505b6117516127106106a7600b5461122e87600101546106ad64e8d4a510006106a78a8c6000015461198790919063ffffffff16565b9450505050505b92915050565b6005546001600160a01b031681565b6000546001600160a01b031690565b60006117888284611a22565b9392505050565b60076020908152600092835260408084209091529082529020805460019091015482565b6001546001600160a01b031681565b600b5481565b81611814576040805162461bcd60e51b81526020600482015260176024820152766465706f7369742044494e4f206279207374616b696e6760481b604482015290519081900360640190fd5b60006006838154811061182357fe5b6000918252602080832086845260078252604080852033865290925292206004909102909101915061185484611091565b80541561189d57600061188982600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b9050801561189b5761189b3382611a64565b505b82156118c95781546118ba906001600160a01b0316333086611b5a565b80546118c69084611bb4565b81555b600382015481546118e49164e8d4a51000916106a791611987565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b61192e611c60565b6000546001600160a01b0390811691161461197e576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b61126a81611d77565b60008261199657506000611758565b828202828482816119a357fe5b04146117885760405162461bcd60e51b81526004018080602001828103825260218152602001806124886021913960400191505060405180910390fd5b600061178883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611e17565b600061178883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611eb9565b6000611a816127106106a7600b548561198790919063ffffffff16565b9050611a8d8382611f13565b611a9783836120a3565b505050565b6001600160a01b038281166000908152600c602052604090205416158015611acc57506001600160a01b03811615155b8015611aea5750816001600160a01b0316816001600160a01b031614155b1561133c576001600160a01b038281166000818152600c6020908152604080832080546001600160a01b0319169587169586179055848352600d90915280822080546001019055517f9d05414fb79fac216c15606de5cc06664e91a254e4d5f57664d5f1beaf7fb7ef9190a35050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611416908590612167565b600082820183811015611788576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a97908490612167565b3390565b801580611cea575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d6020811015611ce657600080fd5b5051155b611d255760405162461bcd60e51b81526004018080602001828103825260368152602001806124a96036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611a97908490612167565b6001600160a01b038116611dbc5760405162461bcd60e51b81526004018080602001828103825260268152602001806124006026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008183611ea35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e68578181015183820152602001611e50565b50505050905090810190601f168015611e955780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611eaf57fe5b0495945050505050565b60008184841115611f0b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611e68578181015183820152602001611e50565b505050900390565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611f5e57600080fd5b505afa158015611f72573d6000803e3d6000fd5b505050506040513d6020811015611f8857600080fd5b505190508082111561201c576001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611fea57600080fd5b505af1158015611ffe573d6000803e3d6000fd5b505050506040513d602081101561201457600080fd5b50611a979050565b6001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561207257600080fd5b505af1158015612086573d6000803e3d6000fd5b505050506040513d602081101561209c57600080fd5b5050505050565b60006120ae83610b10565b90506001600160a01b038116158015906120da5750826001600160a01b0316816001600160a01b031614155b80156120e857506000600a54115b15611a9757600061210a6127106106a7600a548661198790919063ffffffff16565b90506121168282611f13565b816001600160a01b0316846001600160a01b03167f0a721ab4682ceb61c7e4d264ef879fc419a6d764b136e7d96ef54b2053c75673836040518082815260200191505060405180910390a350505050565b60606121bc826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122189092919063ffffffff16565b805190915015611a97578080602001905160208110156121db57600080fd5b5051611a975760405162461bcd60e51b815260040180806020018281038252602a8152602001806123d6602a913960400191505060405180910390fd5b6060612227848460008561222f565b949350505050565b606061223a8561239c565b61228b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106122ca5780518252601f1990920191602091820191016122ab565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461232c576040519150601f19603f3d011682016040523d82523d6000602084013e612331565b606091505b509150915081156123455791506122279050565b8051156123555780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611e68578181015183820152602001611e50565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061222757505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373757064617465526566657272616c426f6e757342703a20696e76616c696420726566657272616c20626f6e757320626173697320706f696e7473757064617465526566657272616c426f6e757342703a2073616d6520626f6e757320627020736574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c80635312ea8e1161011a57806371812716116100ad57806393f1a40b1161007c57806393f1a40b14610548578063a44e45471461058d578063c13cb08414610595578063e2bbb1581461059d578063f2fde38b146105c057610206565b806371812716146104e95780637cd07e47146105155780638da5cb5b1461051d5780638dbb1e3a1461052557610206565b806364482f79116100e957806364482f791461049157806364ed743b146104bc57806366f685ea146104d9578063715018a6146104e157610206565b80635312ea8e1461045c5780635687c1ab1461047957806361d027b314610481578063630b5ba11461048957610206565b80633b0f0f2f1161019d578063454b06081161016c578063454b0608146103ec57806348cd4cb1146104095780634a3b68cc146104115780634b8c43d01461043757806351eb05a61461043f57610206565b80633b0f0f2f146103445780633f7b06d81461038657806341441d3b146103ac578063441a3e70146103c957610206565b806317caf6f1116101d957806317caf6f1146102c35780631eaaa045146102cb57806323cf3118146102ff5780633a22df781461032557610206565b806305831aa21461020b578063081e3eda1461023f5780631058d281146102595780631526fe2714610276575b600080fd5b61023d6004803603606081101561022157600080fd5b50803590602081013590604001356001600160a01b03166105e6565b005b61024761075b565b60408051918252519081900360200190f35b61023d6004803603602081101561026f57600080fd5b5035610761565b6102936004803603602081101561028c57600080fd5b50356108ce565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b61024761090f565b61023d600480360360608110156102e157600080fd5b508035906001600160a01b0360208201351690604001351515610915565b61023d6004803603602081101561031557600080fd5b50356001600160a01b0316610a90565b61032d610b0a565b6040805161ffff9092168252519081900360200190f35b61036a6004803603602081101561035a57600080fd5b50356001600160a01b0316610b10565b604080516001600160a01b039092168252519081900360200190f35b6102476004803603602081101561039c57600080fd5b50356001600160a01b0316610b2e565b61023d600480360360208110156103c257600080fd5b5035610b40565b61023d600480360360408110156103df57600080fd5b5080359060200135610c69565b61023d6004803603602081101561040257600080fd5b5035610e0e565b61024761106a565b61036a6004803603602081101561042757600080fd5b50356001600160a01b0316611070565b61024761108b565b61023d6004803603602081101561045557600080fd5b5035611091565b61023d6004803603602081101561047257600080fd5b503561126d565b610247611308565b61036a61130e565b61023d61131d565b61023d600480360360608110156104a757600080fd5b50803590602081013590604001351515611340565b61023d600480360360208110156104d257600080fd5b503561141c565b610247611546565b61023d61154c565b610247600480360360408110156104ff57600080fd5b50803590602001356001600160a01b03166115ee565b61036a61175e565b61036a61176d565b6102476004803603604081101561053b57600080fd5b508035906020013561177c565b6105746004803603604081101561055e57600080fd5b50803590602001356001600160a01b031661178f565b6040805192835260208301919091528051918290030190f35b61036a6117b3565b6102476117c2565b61023d600480360360408110156105b357600080fd5b50803590602001356117c8565b61023d600480360360208110156105d657600080fd5b50356001600160a01b0316611926565b82610632576040805162461bcd60e51b81526020600482015260176024820152766465706f7369742044494e4f206279207374616b696e6760481b604482015290519081900360640190fd5b60006006848154811061064157fe5b6000918252602080832087845260078252604080852033865290925292206004909102909101915061067285611091565b8054156106c75760006106b382600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b906119e0565b90611a22565b905080156106c5576106c53382611a64565b505b83156106fd576106d73384611a9c565b81546106ee906001600160a01b0316333087611b5a565b80546106fa9085611bb4565b81555b600382015481546107189164e8d4a51000916106a791611987565b6001820155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b60065490565b6000600660008154811061077157fe5b600091825260208083203384527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df90915260409092208054600490920290920192508311156107fc576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6108066000611091565b600061083482600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b90508015610846576108463382611a64565b83156108705781546108589085611a22565b82558254610870906001600160a01b03163386611c0e565b6003830154825461088b9164e8d4a51000916106a791611987565b600183015560408051858152905160009133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b600681815481106108db57fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60085481565b61091d611c60565b6000546001600160a01b0390811691161461096d576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b801561097b5761097b61131d565b6000600954431161098e57600954610990565b435b6008549091506109a09085611bb4565b600855604080516080810182526001600160a01b0394851681526020810195865290810191825260006060820181815260068054600181018255925291517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490920291820180546001600160a01b031916919096161790945593517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40840155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d418301555090517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4290910155565b610a98611c60565b6000546001600160a01b03908116911614610ae8576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6107d081565b6001600160a01b039081166000908152600c60205260409020541690565b600d6020526000908152604090205481565b60006006600081548110610b5057fe5b600091825260208083203384527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df90915260408320600490920201925090610b9790611091565b805415610be0576000610bcc82600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b90508015610bde57610bde3382611a64565b505b8215610c0c578154610bfd906001600160a01b0316333086611b5a565b8054610c099084611bb4565b81555b60038201548154610c279164e8d4a51000916106a791611987565b600182015560408051848152905160009133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050565b81610cbb576040805162461bcd60e51b815260206004820152601a60248201527f77697468647261772044494e4f20627920756e7374616b696e67000000000000604482015290519081900360640190fd5b600060068381548110610cca57fe5b600091825260208083208684526007825260408085203386529092529220805460049092029092019250831115610d3d576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610d4684611091565b6000610d7482600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b90508015610d8657610d863382611a64565b8315610db0578154610d989085611a22565b82558254610db0906001600160a01b03163386611c0e565b60038301548254610dcb9164e8d4a51000916106a791611987565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b6005546001600160a01b0316610e62576040805162461bcd60e51b815260206004820152601460248201527336b4b3b930ba329d1037379036b4b3b930ba37b960611b604482015290519081900360640190fd5b600060068281548110610e7157fe5b600091825260208083206004928302018054604080516370a0823160e01b81523095810195909552519195506001600160a01b0316939284926370a0823192602480840193829003018186803b158015610eca57600080fd5b505afa158015610ede573d6000803e3d6000fd5b505050506040513d6020811015610ef457600080fd5b5051600554909150610f13906001600160a01b03848116911683611c64565b6005546040805163ce5494bb60e01b81526001600160a01b0385811660048301529151600093929092169163ce5494bb9160248082019260209290919082900301818787803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d6020811015610f8f57600080fd5b5051604080516370a0823160e01b815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610fdb57600080fd5b505afa158015610fef573d6000803e3d6000fd5b505050506040513d602081101561100557600080fd5b50518214611049576040805162461bcd60e51b815260206004820152600c60248201526b1b5a59dc985d194e8818985960a21b604482015290519081900360640190fd5b83546001600160a01b0319166001600160a01b039190911617909255505050565b60095481565b600c602052600090815260409020546001600160a01b031681565b60045481565b43600454101561113d576111356110b360045443611a2290919063ffffffff16565b600260009054906101000a90046001600160a01b03166001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561110357600080fd5b505af1158015611117573d6000803e3d6000fd5b505050506040513d602081101561112d57600080fd5b5051906119e0565b600355436004555b60006006828154811061114c57fe5b906000526020600020906004020190508060020154431161116d575061126a565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156111b757600080fd5b505afa1580156111cb573d6000803e3d6000fd5b505050506040513d60208110156111e157600080fd5b50519050806111f757504360029091015561126a565b600061120783600201544361177c565b905060006112346008546106a7866001015461122e6003548761198790919063ffffffff16565b90611987565b905061125761124c846106a78464e8d4a51000611987565b600386015490611bb4565b6003850155505043600290920191909155505b50565b60006006828154811061127c57fe5b600091825260208083208584526007825260408085203380875293529093208054600490930290930180549094506112c1926001600160a01b03919091169190611c0e565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001909101555050565b60035481565b6002546001600160a01b031681565b60065460005b8181101561133c5761133481611091565b600101611323565b5050565b611348611c60565b6000546001600160a01b03908116911614611398576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b80156113a6576113a661131d565b6000600684815481106113b557fe5b906000526020600020906004020160010154905082600685815481106113d757fe5b906000526020600020906004020160010181905550828114611416576114128361140c83600854611a2290919063ffffffff16565b90611bb4565b6008555b50505050565b611424611c60565b6000546001600160a01b03908116911614611474576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b6107d08111156114b55760405162461bcd60e51b815260040180806020018281038252603a815260200180612426603a913960400191505060405180910390fd5b600a548114156114f65760405162461bcd60e51b81526004018080602001828103825260288152602001806124606028913960400191505060405180910390fd5b600a805490829055612710829003600b55604080518281526020810184905281517f3282b692bfebf5f35b198a229212cf532c72099026ab54c4b8665382d1086b3f929181900390910190a15050565b600a5481565b611554611c60565b6000546001600160a01b039081169116146115a4576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080600684815481106115fe57fe5b600091825260208083208784526007825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561167c57600080fd5b505afa158015611690573d6000803e3d6000fd5b505050506040513d60208110156116a657600080fd5b50516002850154909150431180156116bd57508015155b1561171d5760006116d285600201544361177c565b905060006116f96008546106a7886001015461122e6003548761198790919063ffffffff16565b9050611718611711846106a78464e8d4a51000611987565b8590611bb4565b935050505b6117516127106106a7600b5461122e87600101546106ad64e8d4a510006106a78a8c6000015461198790919063ffffffff16565b9450505050505b92915050565b6005546001600160a01b031681565b6000546001600160a01b031690565b60006117888284611a22565b9392505050565b60076020908152600092835260408084209091529082529020805460019091015482565b6001546001600160a01b031681565b600b5481565b81611814576040805162461bcd60e51b81526020600482015260176024820152766465706f7369742044494e4f206279207374616b696e6760481b604482015290519081900360640190fd5b60006006838154811061182357fe5b6000918252602080832086845260078252604080852033865290925292206004909102909101915061185484611091565b80541561189d57600061188982600101546106ad64e8d4a510006106a78760030154876000015461198790919063ffffffff16565b9050801561189b5761189b3382611a64565b505b82156118c95781546118ba906001600160a01b0316333086611b5a565b80546118c69084611bb4565b81555b600382015481546118e49164e8d4a51000916106a791611987565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b61192e611c60565b6000546001600160a01b0390811691161461197e576040805162461bcd60e51b815260206004820181905260248201526000805160206124df833981519152604482015290519081900360640190fd5b61126a81611d77565b60008261199657506000611758565b828202828482816119a357fe5b04146117885760405162461bcd60e51b81526004018080602001828103825260218152602001806124886021913960400191505060405180910390fd5b600061178883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611e17565b600061178883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611eb9565b6000611a816127106106a7600b548561198790919063ffffffff16565b9050611a8d8382611f13565b611a9783836120a3565b505050565b6001600160a01b038281166000908152600c602052604090205416158015611acc57506001600160a01b03811615155b8015611aea5750816001600160a01b0316816001600160a01b031614155b1561133c576001600160a01b038281166000818152600c6020908152604080832080546001600160a01b0319169587169586179055848352600d90915280822080546001019055517f9d05414fb79fac216c15606de5cc06664e91a254e4d5f57664d5f1beaf7fb7ef9190a35050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611416908590612167565b600082820183811015611788576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a97908490612167565b3390565b801580611cea575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d6020811015611ce657600080fd5b5051155b611d255760405162461bcd60e51b81526004018080602001828103825260368152602001806124a96036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611a97908490612167565b6001600160a01b038116611dbc5760405162461bcd60e51b81526004018080602001828103825260268152602001806124006026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008183611ea35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e68578181015183820152602001611e50565b50505050905090810190601f168015611e955780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611eaf57fe5b0495945050505050565b60008184841115611f0b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611e68578181015183820152602001611e50565b505050900390565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611f5e57600080fd5b505afa158015611f72573d6000803e3d6000fd5b505050506040513d6020811015611f8857600080fd5b505190508082111561201c576001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611fea57600080fd5b505af1158015611ffe573d6000803e3d6000fd5b505050506040513d602081101561201457600080fd5b50611a979050565b6001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561207257600080fd5b505af1158015612086573d6000803e3d6000fd5b505050506040513d602081101561209c57600080fd5b5050505050565b60006120ae83610b10565b90506001600160a01b038116158015906120da5750826001600160a01b0316816001600160a01b031614155b80156120e857506000600a54115b15611a9757600061210a6127106106a7600a548661198790919063ffffffff16565b90506121168282611f13565b816001600160a01b0316846001600160a01b03167f0a721ab4682ceb61c7e4d264ef879fc419a6d764b136e7d96ef54b2053c75673836040518082815260200191505060405180910390a350505050565b60606121bc826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122189092919063ffffffff16565b805190915015611a97578080602001905160208110156121db57600080fd5b5051611a975760405162461bcd60e51b815260040180806020018281038252602a8152602001806123d6602a913960400191505060405180910390fd5b6060612227848460008561222f565b949350505050565b606061223a8561239c565b61228b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106122ca5780518252601f1990920191602091820191016122ab565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461232c576040519150601f19603f3d011682016040523d82523d6000602084013e612331565b606091505b509150915081156123455791506122279050565b8051156123555780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611e68578181015183820152602001611e50565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061222757505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373757064617465526566657272616c426f6e757342703a20696e76616c696420726566657272616c20626f6e757320626173697320706f696e7473757064617465526566657272616c426f6e757342703a2073616d6520626f6e757320627020736574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10091,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 433,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "dino",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBEP20)7976"
      },
      {
        "astId": 435,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDinoTreasury)409"
      },
      {
        "astId": 437,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "dinoPerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 439,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "lastClaimDinoBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 441,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "migrator",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMigratorDens)403"
      },
      {
        "astId": 444,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "poolInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)431_storage)dyn_storage"
      },
      {
        "astId": 450,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)422_storage))"
      },
      {
        "astId": 453,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 455,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "startBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 461,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "refBonusBP",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 464,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "accBP",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 468,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "referrers",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 472,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "referredCount",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)431_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)431_storage",
        "encoding": "dynamic_array",
        "label": "struct DinoDens.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBEP20)7976": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_contract(IDinoTreasury)409": {
        "encoding": "inplace",
        "label": "contract IDinoTreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IMigratorDens)403": {
        "encoding": "inplace",
        "label": "contract IMigratorDens",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(UserInfo)422_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DinoDens.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)422_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)422_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct DinoDens.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)422_storage)"
      },
      "t_struct(PoolInfo)431_storage": {
        "encoding": "inplace",
        "label": "struct DinoDens.PoolInfo",
        "members": [
          {
            "astId": 424,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBEP20)7976"
          },
          {
            "astId": 426,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 428,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 430,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "accDinoPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)422_storage": {
        "encoding": "inplace",
        "label": "struct DinoDens.UserInfo",
        "members": [
          {
            "astId": 419,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 421,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}