{
  "address": "0x0CC54b57165C818307388F00800Ce39127865E48",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBEP20",
          "name": "_dino",
          "type": "address"
        },
        {
          "internalType": "contract IDinoTreasury",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "Referral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldBp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBp",
          "type": "uint256"
        }
      ],
      "name": "ReferralBonusBpChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_userTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "ReferralPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_REFERRAL_BP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBEP20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "depositWithReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        }
      ],
      "name": "dev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dino",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dinoPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getReferral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastClaimDinoBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "contract IMigratorDens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingDino",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDinoPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refBonusBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referredCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMigratorDens",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract IDinoTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRefBonusBp",
          "type": "uint256"
        }
      ],
      "name": "updateReferralBonusBp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdcc8d156ed94e6d8532de9b77b66337600fa3b09e1e1e54caa4aa26f33e4c87",
  "receipt": {
    "to": null,
    "from": "0x4C37848BC193995a3Cdf280919a42bD899464a2D",
    "contractAddress": "0x0CC54b57165C818307388F00800Ce39127865E48",
    "transactionIndex": 2,
    "gasUsed": "2483179",
    "logsBloom": "0x
    "blockHash": "0x374de9ac770ce8669ca49520d4cfaaa8132d0fcad5a9c26ca8d955a3e09a1f5f",
    "transactionHash": "0xcdcc8d156ed94e6d8532de9b77b66337600fa3b09e1e1e54caa4aa26f33e4c87",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9261879,
        "transactionHash": "0xcdcc8d156ed94e6d8532de9b77b66337600fa3b09e1e1e54caa4aa26f33e4c87",
        "address": "0x0CC54b57165C818307388F00800Ce39127865E48",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c37848bc193995a3cdf280919a42bd899464a2d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x374de9ac770ce8669ca49520d4cfaaa8132d0fcad5a9c26ca8d955a3e09a1f5f"
      }
    ],
    "blockNumber": 9261879,
    "cumulativeGasUsed": "2585481",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFfBbEAE934549ce6E420ede7dBc91036d19E95E0",
    "0xEB3F32D3ad04F21202EC50D90904A76d7a666f97",
    "0xF8aDce81568Cd1d697cdD603085d5A6fB698b164",
    9025730
  ],
  "solcInputHash": "724d6fca1a06ebff3bca431b4ab5fd5c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_dino\",\"type\":\"address\"},{\"internalType\":\"contract IDinoTreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldBp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBp\",\"type\":\"uint256\"}],\"name\":\"ReferralBonusBpChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"ReferralPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_REFERRAL_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"depositWithReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dino\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dinoPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimDinoBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorDens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDino\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDinoPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refBonusBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorDens\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract IDinoTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRefBonusBp\",\"type\":\"uint256\"}],\"name\":\"updateReferralBonusBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DinoDens.sol\":\"DinoDens\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DinoDens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.12;\\n\\nimport './interfaces/IBEP20.sol';\\nimport './libraries/SafeMath.sol';\\nimport './libraries/SafeBEP20.sol';\\nimport './libraries/Ownable.sol';\\n\\ninterface IMigratorDens {\\n    // Take the current LP token address and return the new LP token address.\\n    // Migrator should have full access to the caller's LP token.\\n    function migrate(IBEP20 token) external returns (IBEP20);\\n}\\n\\ninterface IDinoTreasury {\\n    function claim() external returns (uint256);\\n}\\n\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once DINO is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract DinoDens is Ownable {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of DINOs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accDinoPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accDinoPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBEP20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. DINOs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that DINOs distribution occurs.\\n        uint256 accDinoPerShare; // Accumulated DINOs per share, times 1e12. See below.\\n    }\\n\\n    // The DINO TOKEN!\\n    IBEP20 public dino;\\n    // The treasury contract\\n    IDinoTreasury public treasury;\\n    // Dev address.\\n    address public devaddr;\\n    // DINO tokens created per block.\\n    uint256 public dinoPerBlock;\\n    // Last block number that dens claims DINO tokens.\\n    uint256 public lastClaimDinoBlock;\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorDens public migrator;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when DINO mining starts.\\n    uint256 public startBlock;\\n\\n    // Max referral commission rate: 20%.\\n    uint16 public constant MAXIMUM_REFERRAL_BP = 2000;\\n    // Referral Bonus in basis points. Initially set to 2%\\n    uint256 public refBonusBP = 200;\\n    uint256 public accBP = 9800; \\n    // Referral Mapping\\n    mapping(address => address) public referrers; // account_address -> referrer_address\\n    mapping(address => uint256) public referredCount; // referrer_address -> num_of_referred\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Referral(address indexed _referrer, address indexed _user);\\n    event ReferralPaid(address indexed _user, address indexed _userTo, uint256 _reward);\\n    event ReferralBonusBpChanged(uint256 _oldBp, uint256 _newBp);\\n\\n    constructor(\\n        IBEP20 _dino,\\n        IDinoTreasury _treasury,\\n        address _devaddr,\\n        uint256 _startBlock\\n    ) public {\\n        dino = _dino;\\n        treasury = _treasury;\\n        devaddr = _devaddr;\\n        startBlock = _startBlock;\\n\\n        // staking pool\\n        poolInfo.push(PoolInfo({lpToken: _dino, allocPoint: 1000, lastRewardBlock: startBlock, accDinoPerShare: 0}));\\n        dinoPerBlock = treasury.claim();\\n        lastClaimDinoBlock = block.number;\\n        totalAllocPoint = 1000;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IBEP20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accDinoPerShare: 0})\\n        );\\n        updateStakingPool();\\n    }\\n\\n    // Update the given pool's DINO allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n            updateStakingPool();\\n        }\\n    }\\n\\n    function updateStakingPool() internal {\\n        uint256 length = poolInfo.length;\\n        uint256 points = 0;\\n        for (uint256 pid = 1; pid < length; ++pid) {\\n            points = points.add(poolInfo[pid].allocPoint);\\n        }\\n        if (points != 0) {\\n            points = points.div(3);\\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points);\\n            poolInfo[0].allocPoint = points;\\n        }\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorDens _migrator) public onlyOwner {\\n        migrator = _migrator;\\n    }\\n\\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\\n    function migrate(uint256 _pid) public {\\n        require(address(migrator) != address(0), 'migrate: no migrator');\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IBEP20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IBEP20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), 'migrate: bad');\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\n        return _to.sub(_from);\\n    }\\n\\n    // View function to see pending DINOs on frontend.\\n    function pendingDino(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accDinoPerShare = pool.accDinoPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 dinoReward = multiplier.mul(dinoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accDinoPerShare = accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt).mul(accBP).div(10000);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        if (lastClaimDinoBlock < block.number) {\\n            dinoPerBlock = treasury.claim().div(block.number.sub(lastClaimDinoBlock));\\n            lastClaimDinoBlock = block.number;\\n        }\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 dinoReward = multiplier.mul(dinoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        safeDinoTransfer(devaddr, dinoReward.div(10));\\n        dinoReward = dinoReward.sub(dinoReward.div(10));\\n        pool.accDinoPerShare = pool.accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to DinoDens for DINO allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        require(_pid != 0, 'deposit DINO by staking');\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                sendReward(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Deposit LP tokens to DinoDens for DINO allocation with referral.\\n    function depositWithReferrer(uint256 _pid, uint256 _amount, address _referrer) public {\\n        require(_pid != 0, 'deposit DINO by staking');\\n        require(_referrer == address(_referrer),\\\"deposit: Invalid referrer address\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                sendReward(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            setReferral(msg.sender, _referrer);\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from DinoDens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        require(_pid != 0, 'withdraw DINO by unstaking');\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, 'withdraw: not good');\\n\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            sendReward(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Stake DINO tokens to DinoDens\\n    function enterStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        updatePool(0);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                sendReward(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n\\n        emit Deposit(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw DINO tokens from STAKING.\\n    function leaveStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        require(user.amount >= _amount, 'withdraw: not good');\\n        updatePool(0);\\n        uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            sendReward(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\\n\\n        emit Withdraw(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Safe dino transfer function, just in case if rounding error causes pool to not have enough DINOs.\\n    function safeDinoTransfer(address _to, uint256 _amount) internal {\\n        uint256 dinoBal = dino.balanceOf(address(this));\\n        if (_amount > dinoBal) {\\n            dino.transfer(_to, dinoBal);\\n        } else {\\n            dino.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devaddr) public {\\n        require(msg.sender == devaddr, 'dev: wut?');\\n        devaddr = _devaddr;\\n    }\\n\\n    // Set Referral Address for a user\\n    function setReferral(address _user, address _referrer) internal {\\n        if (_referrer == address(_referrer) && referrers[_user] == address(0) && _referrer != address(0) && _referrer != _user) {\\n            referrers[_user] = _referrer;\\n            referredCount[_referrer] += 1;\\n            emit Referral(_user, _referrer);\\n        }\\n    }\\n\\n    // Get Referral Address for a Account\\n    function getReferral(address _user) public view returns (address) {\\n        return referrers[_user];\\n    }\\n\\n    // Send reward to Account and the referrer if needed\\n    function sendReward(address _user, uint256 _pending) internal {\\n        uint256 accEarned = _pending.mul(accBP).div(10000);\\n        safeDinoTransfer(_user, accEarned);\\n        payReferralCommission(_user, _pending);\\n    }\\n\\n    // Pay referral commission to the referrer who referred this user.\\n    function payReferralCommission(address _user, uint256 _pending) internal {\\n        address referrer = getReferral(_user);\\n        if (referrer != address(0) && referrer != _user && refBonusBP > 0) {\\n            uint256 refBonusEarned = _pending.mul(refBonusBP).div(10000);\\n            safeDinoTransfer(referrer, refBonusEarned);\\n            emit ReferralPaid(_user, referrer, refBonusEarned);\\n        }\\n    }\\n\\n    // Referral Bonus in basis points.\\n    // Initially set to 2%, this this the ability to increase or decrease the Bonus percentage based on\\n    // community voting and feedback.\\n    function updateReferralBonusBp(uint256 _newRefBonusBp) public onlyOwner {\\n        require(_newRefBonusBp <= MAXIMUM_REFERRAL_BP, \\\"updateReferralBonusBp: invalid referral bonus basis points\\\");\\n        require(_newRefBonusBp != refBonusBP, \\\"updateReferralBonusBp: same bonus bp set\\\");\\n        uint256 previousRefBonusBP = refBonusBP;\\n        refBonusBP = _newRefBonusBp;\\n        accBP = 10000 - refBonusBP;\\n        emit ReferralBonusBpChanged(previousRefBonusBP, _newRefBonusBp);\\n    }\\n}\\n\",\"keccak256\":\"0xd2e4f89c0f9136b5e9e9d66078c70b4e23795a906b919ca5c8135186b863478a\",\"license\":\"MIT\"},\"contracts/interfaces/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc34a0fc0edc354e31790feb123bc93302e8b21765768e546b633fb168469cb8\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x721e647998bd10326c34bbca3d952379a62266832bfdb21b18adbce0e1afde13\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xc7d2396c5481131099cdbc8138b2c4df45b5150edc983a78b5fd01acb1197cf2\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x702257f24af80a77b86990f29d8fc193413a5c3b9ddf8ac8f9f841199e78eef5\",\"license\":\"MIT\"},\"contracts/libraries/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport '../interfaces/IBEP20.sol';\\nimport './SafeMath.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(value, 'SafeBEP20: decreased allowance below zero');\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ef26b7f4bf9d8ad7661dff713779c3a3f34cc713790eb2e717d3dd31a1fede9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1de2a24b6da5a4b2164df9a9fe8d0c16362fcb7e2aa3ddd283133da0d8d39c1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060095560c8600b55612648600c553480156200002157600080fd5b506040516200293738038062002937833981810160405260808110156200004757600080fd5b508051602082015160408301516060909301519192909160006200006a6200024f565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b038087166001600160a01b0319928316811784556002805488841690851617815560038054888516908616179055600a869055604080516080810182529283526103e86020808501918252848301898152600060608701818152600780549b8c0181558252965160049a8b027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68881018054928b1692909b169190911790995592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689890155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a88015593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b9096019590955590548151634e71d92d60e01b81529151931694634e71d92d94828201949283900390910190829087803b1580156200020a57600080fd5b505af11580156200021f573d6000803e3d6000fd5b505050506040513d60208110156200023657600080fd5b505160045550504360055550506103e860095562000253565b3390565b6126d480620002636000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80635687c1ab116101255780638d88a90e116100ad578063a44e45471161007c578063a44e4547146105c9578063c13cb084146105d1578063d49e77cd146105d9578063e2bbb158146105e1578063f2fde38b146106045761021c565b80638d88a90e146105335780638da5cb5b146105595780638dbb1e3a1461056157806393f1a40b146105845761021c565b806364ed743b116100f457806364ed743b146104d257806366f685ea146104ef578063715018a6146104f757806371812716146104ff5780637cd07e471461052b5761021c565b80635687c1ab1461048f57806361d027b314610497578063630b5ba11461049f57806364482f79146104a75761021c565b80633f7b06d8116101a857806348cd4cb11161017757806348cd4cb11461041f5780634a3b68cc146104275780634b8c43d01461044d57806351eb05a6146104555780635312ea8e146104725761021c565b80633f7b06d81461039c57806341441d3b146103c2578063441a3e70146103df578063454b0608146104025761021c565b806317caf6f1116101ef57806317caf6f1146102d95780631eaaa045146102e157806323cf3118146103155780633a22df781461033b5780633b0f0f2f1461035a5761021c565b806305831aa214610221578063081e3eda146102555780631058d2811461026f5780631526fe271461028c575b600080fd5b6102536004803603606081101561023757600080fd5b50803590602081013590604001356001600160a01b031661062a565b005b61025d61079f565b60408051918252519081900360200190f35b6102536004803603602081101561028557600080fd5b50356107a5565b6102a9600480360360208110156102a257600080fd5b5035610912565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b61025d610953565b610253600480360360608110156102f757600080fd5b508035906001600160a01b0360208201351690604001351515610959565b6102536004803603602081101561032b57600080fd5b50356001600160a01b0316610adf565b610343610b59565b6040805161ffff9092168252519081900360200190f35b6103806004803603602081101561037057600080fd5b50356001600160a01b0316610b5f565b604080516001600160a01b039092168252519081900360200190f35b61025d600480360360208110156103b257600080fd5b50356001600160a01b0316610b7d565b610253600480360360208110156103d857600080fd5b5035610b8f565b610253600480360360408110156103f557600080fd5b5080359060200135610cb8565b6102536004803603602081101561041857600080fd5b5035610e5d565b61025d6110b9565b6103806004803603602081101561043d57600080fd5b50356001600160a01b03166110bf565b61025d6110da565b6102536004803603602081101561046b57600080fd5b50356110e0565b6102536004803603602081101561048857600080fd5b50356112f4565b61025d61138f565b610380611395565b6102536113a4565b610253600480360360608110156104bd57600080fd5b508035906020810135906040013515156113c7565b610253600480360360208110156104e857600080fd5b50356114a4565b61025d6115ce565b6102536115d4565b61025d6004803603604081101561051557600080fd5b50803590602001356001600160a01b0316611676565b6103806117e6565b6102536004803603602081101561054957600080fd5b50356001600160a01b03166117f5565b610380611862565b61025d6004803603604081101561057757600080fd5b5080359060200135611871565b6105b06004803603604081101561059a57600080fd5b50803590602001356001600160a01b0316611884565b6040805192835260208301919091528051918290030190f35b6103806118a8565b61025d6118b7565b6103806118bd565b610253600480360360408110156105f757600080fd5b50803590602001356118cc565b6102536004803603602081101561061a57600080fd5b50356001600160a01b0316611a2a565b82610676576040805162461bcd60e51b81526020600482015260176024820152766465706f7369742044494e4f206279207374616b696e6760481b604482015290519081900360640190fd5b60006007848154811061068557fe5b600091825260208083208784526008825260408085203386529092529220600490910290910191506106b6856110e0565b80541561070b5760006106f782600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b90611ae4565b90611b26565b90508015610709576107093382611b68565b505b83156107415761071b3384611ba0565b8154610732906001600160a01b0316333087611c5e565b805461073e9085611cb8565b81555b6003820154815461075c9164e8d4a51000916106eb91611a8b565b6001820155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b60075490565b600060076000815481106107b557fe5b600091825260208083203384527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c79091526040909220805460049092029092019250831115610840576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b61084a60006110e0565b600061087882600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b9050801561088a5761088a3382611b68565b83156108b457815461089c9085611b26565b825582546108b4906001600160a01b03163386611d12565b600383015482546108cf9164e8d4a51000916106eb91611a8b565b600183015560408051858152905160009133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b6007818154811061091f57fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60095481565b610961611d64565b6000546001600160a01b039081169116146109b1576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b80156109bf576109bf6113a4565b6000600a5443116109d257600a546109d4565b435b6009549091506109e49085611cb8565b600955604080516080810182526001600160a01b0385811682526020820187815292820184815260006060840181815260078054600181018255925293517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600490920291820180546001600160a01b031916919094161790925592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a830155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b90910155610ad9611d68565b50505050565b610ae7611d64565b6000546001600160a01b03908116911614610b37576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6107d081565b6001600160a01b039081166000908152600d60205260409020541690565b600e6020526000908152604090205481565b60006007600081548110610b9f57fe5b600091825260208083203384527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c790915260408320600490920201925090610be6906110e0565b805415610c2f576000610c1b82600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b90508015610c2d57610c2d3382611b68565b505b8215610c5b578154610c4c906001600160a01b0316333086611c5e565b8054610c589084611cb8565b81555b60038201548154610c769164e8d4a51000916106eb91611a8b565b600182015560408051848152905160009133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050565b81610d0a576040805162461bcd60e51b815260206004820152601a60248201527f77697468647261772044494e4f20627920756e7374616b696e67000000000000604482015290519081900360640190fd5b600060078381548110610d1957fe5b600091825260208083208684526008825260408085203386529092529220805460049092029092019250831115610d8c576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610d95846110e0565b6000610dc382600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b90508015610dd557610dd53382611b68565b8315610dff578154610de79085611b26565b82558254610dff906001600160a01b03163386611d12565b60038301548254610e1a9164e8d4a51000916106eb91611a8b565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b6006546001600160a01b0316610eb1576040805162461bcd60e51b815260206004820152601460248201527336b4b3b930ba329d1037379036b4b3b930ba37b960611b604482015290519081900360640190fd5b600060078281548110610ec057fe5b600091825260208083206004928302018054604080516370a0823160e01b81523095810195909552519195506001600160a01b0316939284926370a0823192602480840193829003018186803b158015610f1957600080fd5b505afa158015610f2d573d6000803e3d6000fd5b505050506040513d6020811015610f4357600080fd5b5051600654909150610f62906001600160a01b03848116911683611e2d565b6006546040805163ce5494bb60e01b81526001600160a01b0385811660048301529151600093929092169163ce5494bb9160248082019260209290919082900301818787803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050506040513d6020811015610fde57600080fd5b5051604080516370a0823160e01b815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d602081101561105457600080fd5b50518214611098576040805162461bcd60e51b815260206004820152600c60248201526b1b5a59dc985d194e8818985960a21b604482015290519081900360640190fd5b83546001600160a01b0319166001600160a01b039190911617909255505050565b600a5481565b600d602052600090815260409020546001600160a01b031681565b60055481565b43600554101561118c5761118461110260055443611b2690919063ffffffff16565b600260009054906101000a90046001600160a01b03166001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b505050506040513d602081101561117c57600080fd5b505190611ae4565b600455436005555b60006007828154811061119b57fe5b90600052602060002090600402019050806002015443116111bc57506112f1565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b50519050806112465750436002909101556112f1565b6000611256836002015443611871565b905060006112836009546106eb866001015461127d60045487611a8b90919063ffffffff16565b90611a8b565b6003549091506112a6906001600160a01b03166112a183600a611ae4565b611f40565b6112bb6112b482600a611ae4565b8290611b26565b90506112de6112d3846106eb8464e8d4a51000611a8b565b600386015490611cb8565b6003850155505043600290920191909155505b50565b60006007828154811061130357fe5b60009182526020808320858452600882526040808520338087529352909320805460049093029093018054909450611348926001600160a01b03919091169190611d12565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001909101555050565b60045481565b6002546001600160a01b031681565b60075460005b818110156113c3576113bb816110e0565b6001016113aa565b5050565b6113cf611d64565b6000546001600160a01b0390811691161461141f576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b801561142d5761142d6113a4565b60006007848154811061143c57fe5b9060005260206000209060040201600101549050826007858154811061145e57fe5b906000526020600020906004020160010181905550828114610ad9576114998361149383600954611b2690919063ffffffff16565b90611cb8565b600955610ad9611d68565b6114ac611d64565b6000546001600160a01b039081169116146114fc576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b6107d081111561153d5760405162461bcd60e51b815260040180806020018281038252603a8152602001806125ef603a913960400191505060405180910390fd5b600b5481141561157e5760405162461bcd60e51b81526004018080602001828103825260288152602001806126296028913960400191505060405180910390fd5b600b805490829055612710829003600c55604080518281526020810184905281517f3282b692bfebf5f35b198a229212cf532c72099026ab54c4b8665382d1086b3f929181900390910190a15050565b600b5481565b6115dc611d64565b6000546001600160a01b0390811691161461162c576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000806007848154811061168657fe5b600091825260208083208784526008825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561170457600080fd5b505afa158015611718573d6000803e3d6000fd5b505050506040513d602081101561172e57600080fd5b505160028501549091504311801561174557508015155b156117a557600061175a856002015443611871565b905060006117816009546106eb886001015461127d60045487611a8b90919063ffffffff16565b90506117a0611799846106eb8464e8d4a51000611a8b565b8590611cb8565b935050505b6117d96127106106eb600c5461127d87600101546106f164e8d4a510006106eb8a8c60000154611a8b90919063ffffffff16565b9450505050505b92915050565b6006546001600160a01b031681565b6003546001600160a01b03163314611840576040805162461bcd60e51b81526020600482015260096024820152686465763a207775743f60b81b604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600061187d8284611b26565b9392505050565b60086020908152600092835260408084209091529082529020805460019091015482565b6001546001600160a01b031681565b600c5481565b6003546001600160a01b031681565b81611918576040805162461bcd60e51b81526020600482015260176024820152766465706f7369742044494e4f206279207374616b696e6760481b604482015290519081900360640190fd5b60006007838154811061192757fe5b60009182526020808320868452600882526040808520338652909252922060049091029091019150611958846110e0565b8054156119a157600061198d82600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b9050801561199f5761199f3382611b68565b505b82156119cd5781546119be906001600160a01b0316333086611c5e565b80546119ca9084611cb8565b81555b600382015481546119e89164e8d4a51000916106eb91611a8b565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b611a32611d64565b6000546001600160a01b03908116911614611a82576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b6112f1816120d0565b600082611a9a575060006117e0565b82820282848281611aa757fe5b041461187d5760405162461bcd60e51b81526004018080602001828103825260218152602001806126516021913960400191505060405180910390fd5b600061187d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612170565b600061187d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612212565b6000611b856127106106eb600c5485611a8b90919063ffffffff16565b9050611b918382611f40565b611b9b838361226c565b505050565b6001600160a01b038281166000908152600d602052604090205416158015611bd057506001600160a01b03811615155b8015611bee5750816001600160a01b0316816001600160a01b031614155b156113c3576001600160a01b038281166000818152600d6020908152604080832080546001600160a01b0319169587169586179055848352600e90915280822080546001019055517f9d05414fb79fac216c15606de5cc06664e91a254e4d5f57664d5f1beaf7fb7ef9190a35050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610ad9908590612330565b60008282018381101561187d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611b9b908490612330565b3390565b600754600060015b82811015611db357611da960078281548110611d8857fe5b90600052602060002090600402016001015483611cb890919063ffffffff16565b9150600101611d70565b5080156113c357611dc5816003611ae4565b9050611dff816114936007600081548110611ddc57fe5b906000526020600020906004020160010154600954611b2690919063ffffffff16565b600981905550806007600081548110611e1457fe5b9060005260206000209060040201600101819055505050565b801580611eb3575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611e8557600080fd5b505afa158015611e99573d6000803e3d6000fd5b505050506040513d6020811015611eaf57600080fd5b5051155b611eee5760405162461bcd60e51b81526004018080602001828103825260368152602001806126726036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611b9b908490612330565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611f8b57600080fd5b505afa158015611f9f573d6000803e3d6000fd5b505050506040513d6020811015611fb557600080fd5b5051905080821115612049576001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561201757600080fd5b505af115801561202b573d6000803e3d6000fd5b505050506040513d602081101561204157600080fd5b50611b9b9050565b6001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561209f57600080fd5b505af11580156120b3573d6000803e3d6000fd5b505050506040513d60208110156120c957600080fd5b5050505050565b6001600160a01b0381166121155760405162461bcd60e51b81526004018080602001828103825260268152602001806125c96026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081836121fc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121c15781810151838201526020016121a9565b50505050905090810190601f1680156121ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161220857fe5b0495945050505050565b600081848411156122645760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156121c15781810151838201526020016121a9565b505050900390565b600061227783610b5f565b90506001600160a01b038116158015906122a35750826001600160a01b0316816001600160a01b031614155b80156122b157506000600b54115b15611b9b5760006122d36127106106eb600b5486611a8b90919063ffffffff16565b90506122df8282611f40565b816001600160a01b0316846001600160a01b03167f0a721ab4682ceb61c7e4d264ef879fc419a6d764b136e7d96ef54b2053c75673836040518082815260200191505060405180910390a350505050565b6060612385826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123e19092919063ffffffff16565b805190915015611b9b578080602001905160208110156123a457600080fd5b5051611b9b5760405162461bcd60e51b815260040180806020018281038252602a81526020018061259f602a913960400191505060405180910390fd5b60606123f084846000856123f8565b949350505050565b606061240385612565565b612454576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106124935780518252601f199092019160209182019101612474565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146124f5576040519150601f19603f3d011682016040523d82523d6000602084013e6124fa565b606091505b5091509150811561250e5791506123f09050565b80511561251e5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156121c15781810151838201526020016121a9565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906123f057505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373757064617465526566657272616c426f6e757342703a20696e76616c696420726566657272616c20626f6e757320626173697320706f696e7473757064617465526566657272616c426f6e757342703a2073616d6520626f6e757320627020736574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80635687c1ab116101255780638d88a90e116100ad578063a44e45471161007c578063a44e4547146105c9578063c13cb084146105d1578063d49e77cd146105d9578063e2bbb158146105e1578063f2fde38b146106045761021c565b80638d88a90e146105335780638da5cb5b146105595780638dbb1e3a1461056157806393f1a40b146105845761021c565b806364ed743b116100f457806364ed743b146104d257806366f685ea146104ef578063715018a6146104f757806371812716146104ff5780637cd07e471461052b5761021c565b80635687c1ab1461048f57806361d027b314610497578063630b5ba11461049f57806364482f79146104a75761021c565b80633f7b06d8116101a857806348cd4cb11161017757806348cd4cb11461041f5780634a3b68cc146104275780634b8c43d01461044d57806351eb05a6146104555780635312ea8e146104725761021c565b80633f7b06d81461039c57806341441d3b146103c2578063441a3e70146103df578063454b0608146104025761021c565b806317caf6f1116101ef57806317caf6f1146102d95780631eaaa045146102e157806323cf3118146103155780633a22df781461033b5780633b0f0f2f1461035a5761021c565b806305831aa214610221578063081e3eda146102555780631058d2811461026f5780631526fe271461028c575b600080fd5b6102536004803603606081101561023757600080fd5b50803590602081013590604001356001600160a01b031661062a565b005b61025d61079f565b60408051918252519081900360200190f35b6102536004803603602081101561028557600080fd5b50356107a5565b6102a9600480360360208110156102a257600080fd5b5035610912565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b61025d610953565b610253600480360360608110156102f757600080fd5b508035906001600160a01b0360208201351690604001351515610959565b6102536004803603602081101561032b57600080fd5b50356001600160a01b0316610adf565b610343610b59565b6040805161ffff9092168252519081900360200190f35b6103806004803603602081101561037057600080fd5b50356001600160a01b0316610b5f565b604080516001600160a01b039092168252519081900360200190f35b61025d600480360360208110156103b257600080fd5b50356001600160a01b0316610b7d565b610253600480360360208110156103d857600080fd5b5035610b8f565b610253600480360360408110156103f557600080fd5b5080359060200135610cb8565b6102536004803603602081101561041857600080fd5b5035610e5d565b61025d6110b9565b6103806004803603602081101561043d57600080fd5b50356001600160a01b03166110bf565b61025d6110da565b6102536004803603602081101561046b57600080fd5b50356110e0565b6102536004803603602081101561048857600080fd5b50356112f4565b61025d61138f565b610380611395565b6102536113a4565b610253600480360360608110156104bd57600080fd5b508035906020810135906040013515156113c7565b610253600480360360208110156104e857600080fd5b50356114a4565b61025d6115ce565b6102536115d4565b61025d6004803603604081101561051557600080fd5b50803590602001356001600160a01b0316611676565b6103806117e6565b6102536004803603602081101561054957600080fd5b50356001600160a01b03166117f5565b610380611862565b61025d6004803603604081101561057757600080fd5b5080359060200135611871565b6105b06004803603604081101561059a57600080fd5b50803590602001356001600160a01b0316611884565b6040805192835260208301919091528051918290030190f35b6103806118a8565b61025d6118b7565b6103806118bd565b610253600480360360408110156105f757600080fd5b50803590602001356118cc565b6102536004803603602081101561061a57600080fd5b50356001600160a01b0316611a2a565b82610676576040805162461bcd60e51b81526020600482015260176024820152766465706f7369742044494e4f206279207374616b696e6760481b604482015290519081900360640190fd5b60006007848154811061068557fe5b600091825260208083208784526008825260408085203386529092529220600490910290910191506106b6856110e0565b80541561070b5760006106f782600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b90611ae4565b90611b26565b90508015610709576107093382611b68565b505b83156107415761071b3384611ba0565b8154610732906001600160a01b0316333087611c5e565b805461073e9085611cb8565b81555b6003820154815461075c9164e8d4a51000916106eb91611a8b565b6001820155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b60075490565b600060076000815481106107b557fe5b600091825260208083203384527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c79091526040909220805460049092029092019250831115610840576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b61084a60006110e0565b600061087882600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b9050801561088a5761088a3382611b68565b83156108b457815461089c9085611b26565b825582546108b4906001600160a01b03163386611d12565b600383015482546108cf9164e8d4a51000916106eb91611a8b565b600183015560408051858152905160009133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b6007818154811061091f57fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60095481565b610961611d64565b6000546001600160a01b039081169116146109b1576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b80156109bf576109bf6113a4565b6000600a5443116109d257600a546109d4565b435b6009549091506109e49085611cb8565b600955604080516080810182526001600160a01b0385811682526020820187815292820184815260006060840181815260078054600181018255925293517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600490920291820180546001600160a01b031916919094161790925592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a830155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b90910155610ad9611d68565b50505050565b610ae7611d64565b6000546001600160a01b03908116911614610b37576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6107d081565b6001600160a01b039081166000908152600d60205260409020541690565b600e6020526000908152604090205481565b60006007600081548110610b9f57fe5b600091825260208083203384527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c790915260408320600490920201925090610be6906110e0565b805415610c2f576000610c1b82600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b90508015610c2d57610c2d3382611b68565b505b8215610c5b578154610c4c906001600160a01b0316333086611c5e565b8054610c589084611cb8565b81555b60038201548154610c769164e8d4a51000916106eb91611a8b565b600182015560408051848152905160009133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050565b81610d0a576040805162461bcd60e51b815260206004820152601a60248201527f77697468647261772044494e4f20627920756e7374616b696e67000000000000604482015290519081900360640190fd5b600060078381548110610d1957fe5b600091825260208083208684526008825260408085203386529092529220805460049092029092019250831115610d8c576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610d95846110e0565b6000610dc382600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b90508015610dd557610dd53382611b68565b8315610dff578154610de79085611b26565b82558254610dff906001600160a01b03163386611d12565b60038301548254610e1a9164e8d4a51000916106eb91611a8b565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b6006546001600160a01b0316610eb1576040805162461bcd60e51b815260206004820152601460248201527336b4b3b930ba329d1037379036b4b3b930ba37b960611b604482015290519081900360640190fd5b600060078281548110610ec057fe5b600091825260208083206004928302018054604080516370a0823160e01b81523095810195909552519195506001600160a01b0316939284926370a0823192602480840193829003018186803b158015610f1957600080fd5b505afa158015610f2d573d6000803e3d6000fd5b505050506040513d6020811015610f4357600080fd5b5051600654909150610f62906001600160a01b03848116911683611e2d565b6006546040805163ce5494bb60e01b81526001600160a01b0385811660048301529151600093929092169163ce5494bb9160248082019260209290919082900301818787803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050506040513d6020811015610fde57600080fd5b5051604080516370a0823160e01b815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d602081101561105457600080fd5b50518214611098576040805162461bcd60e51b815260206004820152600c60248201526b1b5a59dc985d194e8818985960a21b604482015290519081900360640190fd5b83546001600160a01b0319166001600160a01b039190911617909255505050565b600a5481565b600d602052600090815260409020546001600160a01b031681565b60055481565b43600554101561118c5761118461110260055443611b2690919063ffffffff16565b600260009054906101000a90046001600160a01b03166001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b505050506040513d602081101561117c57600080fd5b505190611ae4565b600455436005555b60006007828154811061119b57fe5b90600052602060002090600402019050806002015443116111bc57506112f1565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b50519050806112465750436002909101556112f1565b6000611256836002015443611871565b905060006112836009546106eb866001015461127d60045487611a8b90919063ffffffff16565b90611a8b565b6003549091506112a6906001600160a01b03166112a183600a611ae4565b611f40565b6112bb6112b482600a611ae4565b8290611b26565b90506112de6112d3846106eb8464e8d4a51000611a8b565b600386015490611cb8565b6003850155505043600290920191909155505b50565b60006007828154811061130357fe5b60009182526020808320858452600882526040808520338087529352909320805460049093029093018054909450611348926001600160a01b03919091169190611d12565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001909101555050565b60045481565b6002546001600160a01b031681565b60075460005b818110156113c3576113bb816110e0565b6001016113aa565b5050565b6113cf611d64565b6000546001600160a01b0390811691161461141f576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b801561142d5761142d6113a4565b60006007848154811061143c57fe5b9060005260206000209060040201600101549050826007858154811061145e57fe5b906000526020600020906004020160010181905550828114610ad9576114998361149383600954611b2690919063ffffffff16565b90611cb8565b600955610ad9611d68565b6114ac611d64565b6000546001600160a01b039081169116146114fc576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b6107d081111561153d5760405162461bcd60e51b815260040180806020018281038252603a8152602001806125ef603a913960400191505060405180910390fd5b600b5481141561157e5760405162461bcd60e51b81526004018080602001828103825260288152602001806126296028913960400191505060405180910390fd5b600b805490829055612710829003600c55604080518281526020810184905281517f3282b692bfebf5f35b198a229212cf532c72099026ab54c4b8665382d1086b3f929181900390910190a15050565b600b5481565b6115dc611d64565b6000546001600160a01b0390811691161461162c576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000806007848154811061168657fe5b600091825260208083208784526008825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561170457600080fd5b505afa158015611718573d6000803e3d6000fd5b505050506040513d602081101561172e57600080fd5b505160028501549091504311801561174557508015155b156117a557600061175a856002015443611871565b905060006117816009546106eb886001015461127d60045487611a8b90919063ffffffff16565b90506117a0611799846106eb8464e8d4a51000611a8b565b8590611cb8565b935050505b6117d96127106106eb600c5461127d87600101546106f164e8d4a510006106eb8a8c60000154611a8b90919063ffffffff16565b9450505050505b92915050565b6006546001600160a01b031681565b6003546001600160a01b03163314611840576040805162461bcd60e51b81526020600482015260096024820152686465763a207775743f60b81b604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600061187d8284611b26565b9392505050565b60086020908152600092835260408084209091529082529020805460019091015482565b6001546001600160a01b031681565b600c5481565b6003546001600160a01b031681565b81611918576040805162461bcd60e51b81526020600482015260176024820152766465706f7369742044494e4f206279207374616b696e6760481b604482015290519081900360640190fd5b60006007838154811061192757fe5b60009182526020808320868452600882526040808520338652909252922060049091029091019150611958846110e0565b8054156119a157600061198d82600101546106f164e8d4a510006106eb87600301548760000154611a8b90919063ffffffff16565b9050801561199f5761199f3382611b68565b505b82156119cd5781546119be906001600160a01b0316333086611c5e565b80546119ca9084611cb8565b81555b600382015481546119e89164e8d4a51000916106eb91611a8b565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b611a32611d64565b6000546001600160a01b03908116911614611a82576040805162461bcd60e51b815260206004820181905260248201526000805160206126a8833981519152604482015290519081900360640190fd5b6112f1816120d0565b600082611a9a575060006117e0565b82820282848281611aa757fe5b041461187d5760405162461bcd60e51b81526004018080602001828103825260218152602001806126516021913960400191505060405180910390fd5b600061187d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612170565b600061187d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612212565b6000611b856127106106eb600c5485611a8b90919063ffffffff16565b9050611b918382611f40565b611b9b838361226c565b505050565b6001600160a01b038281166000908152600d602052604090205416158015611bd057506001600160a01b03811615155b8015611bee5750816001600160a01b0316816001600160a01b031614155b156113c3576001600160a01b038281166000818152600d6020908152604080832080546001600160a01b0319169587169586179055848352600e90915280822080546001019055517f9d05414fb79fac216c15606de5cc06664e91a254e4d5f57664d5f1beaf7fb7ef9190a35050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610ad9908590612330565b60008282018381101561187d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611b9b908490612330565b3390565b600754600060015b82811015611db357611da960078281548110611d8857fe5b90600052602060002090600402016001015483611cb890919063ffffffff16565b9150600101611d70565b5080156113c357611dc5816003611ae4565b9050611dff816114936007600081548110611ddc57fe5b906000526020600020906004020160010154600954611b2690919063ffffffff16565b600981905550806007600081548110611e1457fe5b9060005260206000209060040201600101819055505050565b801580611eb3575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611e8557600080fd5b505afa158015611e99573d6000803e3d6000fd5b505050506040513d6020811015611eaf57600080fd5b5051155b611eee5760405162461bcd60e51b81526004018080602001828103825260368152602001806126726036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611b9b908490612330565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611f8b57600080fd5b505afa158015611f9f573d6000803e3d6000fd5b505050506040513d6020811015611fb557600080fd5b5051905080821115612049576001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561201757600080fd5b505af115801561202b573d6000803e3d6000fd5b505050506040513d602081101561204157600080fd5b50611b9b9050565b6001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561209f57600080fd5b505af11580156120b3573d6000803e3d6000fd5b505050506040513d60208110156120c957600080fd5b5050505050565b6001600160a01b0381166121155760405162461bcd60e51b81526004018080602001828103825260268152602001806125c96026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081836121fc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121c15781810151838201526020016121a9565b50505050905090810190601f1680156121ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161220857fe5b0495945050505050565b600081848411156122645760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156121c15781810151838201526020016121a9565b505050900390565b600061227783610b5f565b90506001600160a01b038116158015906122a35750826001600160a01b0316816001600160a01b031614155b80156122b157506000600b54115b15611b9b5760006122d36127106106eb600b5486611a8b90919063ffffffff16565b90506122df8282611f40565b816001600160a01b0316846001600160a01b03167f0a721ab4682ceb61c7e4d264ef879fc419a6d764b136e7d96ef54b2053c75673836040518082815260200191505060405180910390a350505050565b6060612385826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123e19092919063ffffffff16565b805190915015611b9b578080602001905160208110156123a457600080fd5b5051611b9b5760405162461bcd60e51b815260040180806020018281038252602a81526020018061259f602a913960400191505060405180910390fd5b60606123f084846000856123f8565b949350505050565b606061240385612565565b612454576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106124935780518252601f199092019160209182019101612474565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146124f5576040519150601f19603f3d011682016040523d82523d6000602084013e6124fa565b606091505b5091509150811561250e5791506123f09050565b80511561251e5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156121c15781810151838201526020016121a9565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906123f057505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373757064617465526566657272616c426f6e757342703a20696e76616c696420726566657272616c20626f6e757320626173697320706f696e7473757064617465526566657272616c426f6e757342703a2073616d6520626f6e757320627020736574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9113,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 433,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "dino",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBEP20)7050"
      },
      {
        "astId": 435,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDinoTreasury)409"
      },
      {
        "astId": 437,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "devaddr",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 439,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "dinoPerBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 441,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "lastClaimDinoBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 443,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "migrator",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMigratorDens)403"
      },
      {
        "astId": 446,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolInfo)431_storage)dyn_storage"
      },
      {
        "astId": 452,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)422_storage))"
      },
      {
        "astId": 455,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 457,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "startBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 463,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "refBonusBP",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 466,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "accBP",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 470,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "referrers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 474,
        "contract": "contracts/DinoDens.sol:DinoDens",
        "label": "referredCount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)431_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)431_storage",
        "encoding": "dynamic_array",
        "label": "struct DinoDens.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBEP20)7050": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_contract(IDinoTreasury)409": {
        "encoding": "inplace",
        "label": "contract IDinoTreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IMigratorDens)403": {
        "encoding": "inplace",
        "label": "contract IMigratorDens",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(UserInfo)422_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DinoDens.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)422_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)422_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct DinoDens.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)422_storage)"
      },
      "t_struct(PoolInfo)431_storage": {
        "encoding": "inplace",
        "label": "struct DinoDens.PoolInfo",
        "members": [
          {
            "astId": 424,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBEP20)7050"
          },
          {
            "astId": 426,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 428,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 430,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "accDinoPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)422_storage": {
        "encoding": "inplace",
        "label": "struct DinoDens.UserInfo",
        "members": [
          {
            "astId": 419,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 421,
            "contract": "contracts/DinoDens.sol:DinoDens",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}