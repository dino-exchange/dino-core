{
  "language": "Solidity",
  "sources": {
    "contracts/BnbPricePrediction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\n\nimport './libraries/SafeMath.sol';\nimport './libraries/Ownable.sol';\nimport './libraries/Pausable.sol';\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ncontract BnbPricePrediction is Ownable, Pausable {\n    using SafeMath for uint256;\n\n    struct Round {\n        uint256 epoch;\n        uint256 startBlock;\n        uint256 lockBlock;\n        uint256 endBlock;\n        int256 lockPrice;\n        int256 closePrice;\n        uint256 totalAmount;\n        uint256 bullAmount;\n        uint256 bearAmount;\n        uint256 rewardBaseCalAmount;\n        uint256 rewardAmount;\n        bool oracleCalled;\n    }\n\n    enum Position {Bull, Bear}\n\n    struct BetInfo {\n        Position position;\n        uint256 amount;\n        bool claimed; // default false\n    }\n\n    mapping(uint256 => Round) public rounds;\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\n    mapping(address => uint256[]) public userRounds;\n    uint256 public currentEpoch;\n    uint256 public intervalBlocks;\n    uint256 public bufferBlocks;\n    address public adminAddress;\n    address public operatorAddress;\n    uint256 public treasuryAmount;\n    AggregatorV3Interface internal oracle;\n    uint256 public oracleLatestRoundId;\n\n    uint256 public constant TOTAL_RATE = 100; // 100%\n    uint256 public rewardRate = 90; // 90%\n    uint256 public treasuryRate = 10; // 10%\n    uint256 public minBetAmount;\n    uint256 public oracleUpdateAllowance; // seconds\n\n    bool public genesisStartOnce = false;\n    bool public genesisLockOnce = false;\n\n    event StartRound(uint256 indexed epoch, uint256 blockNumber);\n    event LockRound(uint256 indexed epoch, uint256 blockNumber, int256 price);\n    event EndRound(uint256 indexed epoch, uint256 blockNumber, int256 price);\n    event BetBull(address indexed sender, uint256 indexed currentEpoch, uint256 amount);\n    event BetBear(address indexed sender, uint256 indexed currentEpoch, uint256 amount);\n    event Claim(address indexed sender, uint256 indexed currentEpoch, uint256 amount);\n    event ClaimTreasury(uint256 amount);\n    event RatesUpdated(uint256 indexed epoch, uint256 rewardRate, uint256 treasuryRate);\n    event MinBetAmountUpdated(uint256 indexed epoch, uint256 minBetAmount);\n    event RewardsCalculated(\n        uint256 indexed epoch,\n        uint256 rewardBaseCalAmount,\n        uint256 rewardAmount,\n        uint256 treasuryAmount\n    );\n    event Pause(uint256 epoch);\n    event Unpause(uint256 epoch);\n\n    constructor(\n        AggregatorV3Interface _oracle,\n        address _adminAddress,\n        address _operatorAddress,\n        uint256 _intervalBlocks,\n        uint256 _bufferBlocks,\n        uint256 _minBetAmount,\n        uint256 _oracleUpdateAllowance\n    ) public {\n        oracle = _oracle;\n        adminAddress = _adminAddress;\n        operatorAddress = _operatorAddress;\n        intervalBlocks = _intervalBlocks;\n        bufferBlocks = _bufferBlocks;\n        minBetAmount = _minBetAmount;\n        oracleUpdateAllowance = _oracleUpdateAllowance;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == adminAddress, 'admin: wut?');\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(msg.sender == operatorAddress, 'operator: wut?');\n        _;\n    }\n\n    modifier onlyAdminOrOperator() {\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, 'admin | operator: wut?');\n        _;\n    }\n\n    modifier notContract() {\n        require(!_isContract(msg.sender), 'contract not allowed');\n        require(msg.sender == tx.origin, 'proxy contract not allowed');\n        _;\n    }\n\n    /**\n     * @dev set admin address\n     * callable by owner\n     */\n    function setAdmin(address _adminAddress) external onlyOwner {\n        require(_adminAddress != address(0), 'Cannot be zero address');\n        adminAddress = _adminAddress;\n    }\n\n    /**\n     * @dev set operator address\n     * callable by admin\n     */\n    function setOperator(address _operatorAddress) external onlyAdmin {\n        require(_operatorAddress != address(0), 'Cannot be zero address');\n        operatorAddress = _operatorAddress;\n    }\n\n    /**\n     * @dev set interval blocks\n     * callable by admin\n     */\n    function setIntervalBlocks(uint256 _intervalBlocks) external onlyAdmin {\n        intervalBlocks = _intervalBlocks;\n    }\n\n    /**\n     * @dev set buffer blocks\n     * callable by admin\n     */\n    function setBufferBlocks(uint256 _bufferBlocks) external onlyAdmin {\n        require(_bufferBlocks <= intervalBlocks, 'Cannot be more than intervalBlocks');\n        bufferBlocks = _bufferBlocks;\n    }\n\n    /**\n     * @dev set Oracle address\n     * callable by admin\n     */\n    function setOracle(address _oracle) external onlyAdmin {\n        require(_oracle != address(0), 'Cannot be zero address');\n        oracle = AggregatorV3Interface(_oracle);\n    }\n\n    /**\n     * @dev set oracle update allowance\n     * callable by admin\n     */\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external onlyAdmin {\n        oracleUpdateAllowance = _oracleUpdateAllowance;\n    }\n\n    /**\n     * @dev set reward rate\n     * callable by admin\n     */\n    function setRewardRate(uint256 _rewardRate) external onlyAdmin {\n        require(_rewardRate <= TOTAL_RATE, 'rewardRate cannot be more than 100%');\n        rewardRate = _rewardRate;\n        treasuryRate = TOTAL_RATE.sub(_rewardRate);\n\n        emit RatesUpdated(currentEpoch, rewardRate, treasuryRate);\n    }\n\n    /**\n     * @dev set treasury rate\n     * callable by admin\n     */\n    function setTreasuryRate(uint256 _treasuryRate) external onlyAdmin {\n        require(_treasuryRate <= TOTAL_RATE, 'treasuryRate cannot be more than 100%');\n        rewardRate = TOTAL_RATE.sub(_treasuryRate);\n        treasuryRate = _treasuryRate;\n\n        emit RatesUpdated(currentEpoch, rewardRate, treasuryRate);\n    }\n\n    /**\n     * @dev set minBetAmount\n     * callable by admin\n     */\n    function setMinBetAmount(uint256 _minBetAmount) external onlyAdmin {\n        minBetAmount = _minBetAmount;\n\n        emit MinBetAmountUpdated(currentEpoch, minBetAmount);\n    }\n\n    /**\n     * @dev Start genesis round\n     */\n    function genesisStartRound() external onlyOperator whenNotPaused {\n        require(!genesisStartOnce, 'Can only run genesisStartRound once');\n\n        currentEpoch = currentEpoch + 1;\n        _startRound(currentEpoch);\n        genesisStartOnce = true;\n    }\n\n    /**\n     * @dev Lock genesis round\n     */\n    function genesisLockRound() external onlyOperator whenNotPaused {\n        require(genesisStartOnce, 'Can only run after genesisStartRound is triggered');\n        require(!genesisLockOnce, 'Can only run genesisLockRound once');\n        require(\n            block.number <= rounds[currentEpoch].lockBlock.add(bufferBlocks),\n            'Can only lock round within bufferBlocks'\n        );\n\n        int256 currentPrice = _getPriceFromOracle();\n        _safeLockRound(currentEpoch, currentPrice);\n\n        currentEpoch = currentEpoch + 1;\n        _startRound(currentEpoch);\n        genesisLockOnce = true;\n    }\n\n    function shouldExecuteRound() public view returns (bool) {\n        return block.number >= rounds[currentEpoch].lockBlock;\n    }\n\n    function currentPriceFromOracle() public view returns (int256) {\n        ( , int256 price, , , ) = oracle.latestRoundData();\n        return price;\n    }\n\n    /**\n     * @dev Start the next round n, lock price for round n-1, end round n-2\n     */\n    function executeRound() external onlyOperator whenNotPaused {\n        require(\n            genesisStartOnce && genesisLockOnce,\n            'Can only run after genesisStartRound and genesisLockRound is triggered'\n        );\n\n        int256 currentPrice = _getPriceFromOracle();\n        // CurrentEpoch refers to previous round (n-1)\n        _safeLockRound(currentEpoch, currentPrice);\n        _safeEndRound(currentEpoch - 1, currentPrice);\n        _calculateRewards(currentEpoch - 1);\n\n        // Increment currentEpoch to current round (n)\n        currentEpoch = currentEpoch + 1;\n        _safeStartRound(currentEpoch);\n    }\n\n    /**\n     * @dev Bet bear position\n     */\n    function betBear() external payable whenNotPaused notContract {\n        require(_bettable(currentEpoch), 'Round not bettable');\n        require(msg.value >= minBetAmount, 'Bet amount must be greater than minBetAmount');\n        require(ledger[currentEpoch][msg.sender].amount == 0, 'Can only bet once per round');\n\n        // Update round data\n        uint256 amount = msg.value;\n        Round storage round = rounds[currentEpoch];\n        round.totalAmount = round.totalAmount.add(amount);\n        round.bearAmount = round.bearAmount.add(amount);\n\n        // Update user data\n        BetInfo storage betInfo = ledger[currentEpoch][msg.sender];\n        betInfo.position = Position.Bear;\n        betInfo.amount = amount;\n        userRounds[msg.sender].push(currentEpoch);\n\n        emit BetBear(msg.sender, currentEpoch, amount);\n    }\n\n    /**\n     * @dev Bet bull position\n     */\n    function betBull() external payable whenNotPaused notContract {\n        require(_bettable(currentEpoch), 'Round not bettable');\n        require(msg.value >= minBetAmount, 'Bet amount must be greater than minBetAmount');\n        require(ledger[currentEpoch][msg.sender].amount == 0, 'Can only bet once per round');\n\n        // Update round data\n        uint256 amount = msg.value;\n        Round storage round = rounds[currentEpoch];\n        round.totalAmount = round.totalAmount.add(amount);\n        round.bullAmount = round.bullAmount.add(amount);\n\n        // Update user data\n        BetInfo storage betInfo = ledger[currentEpoch][msg.sender];\n        betInfo.position = Position.Bull;\n        betInfo.amount = amount;\n        userRounds[msg.sender].push(currentEpoch);\n\n        emit BetBull(msg.sender, currentEpoch, amount);\n    }\n\n    /**\n     * @dev Claim reward\n     */\n    function claim(uint256 epoch) external notContract {\n        require(rounds[epoch].startBlock != 0, 'Round has not started');\n        require(block.number > rounds[epoch].endBlock, 'Round has not ended');\n        require(!ledger[epoch][msg.sender].claimed, 'Rewards claimed');\n\n        uint256 reward;\n        // Round valid, claim rewards\n        if (rounds[epoch].oracleCalled) {\n            require(claimable(epoch, msg.sender), 'Not eligible for claim');\n            Round memory round = rounds[epoch];\n            reward = ledger[epoch][msg.sender].amount.mul(round.rewardAmount).div(round.rewardBaseCalAmount);\n        }\n        // Round invalid, refund bet amount\n        else {\n            require(refundable(epoch, msg.sender), 'Not eligible for refund');\n            reward = ledger[epoch][msg.sender].amount;\n        }\n\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\n        betInfo.claimed = true;\n        _safeTransferBNB(address(msg.sender), reward);\n\n        emit Claim(msg.sender, epoch, reward);\n    }\n\n    /**\n     * @dev Claim all rewards in treasury\n     * callable by admin\n     */\n    function claimTreasury() external onlyAdmin {\n        uint256 currentTreasuryAmount = treasuryAmount;\n        treasuryAmount = 0;\n        _safeTransferBNB(adminAddress, currentTreasuryAmount);\n\n        emit ClaimTreasury(currentTreasuryAmount);\n    }\n\n    /**\n     * @dev Return round epochs that a user has participated\n     */\n    function getUserRounds(\n        address user,\n        uint256 cursor,\n        uint256 size\n    ) external view returns (uint256[] memory, uint256) {\n        uint256 length = size;\n        if (length > userRounds[user].length - cursor) {\n            length = userRounds[user].length - cursor;\n        }\n\n        uint256[] memory values = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            values[i] = userRounds[user][cursor + i];\n        }\n\n        return (values, cursor + length);\n    }\n\n    /**\n     * @dev called by the admin to pause, triggers stopped state\n     */\n    function pause() public onlyAdminOrOperator whenNotPaused {\n        _pause();\n\n        emit Pause(currentEpoch);\n    }\n\n    /**\n     * @dev called by the admin to unpause, returns to normal state\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\n     */\n    function unpause() public onlyAdmin whenPaused {\n        genesisStartOnce = false;\n        genesisLockOnce = false;\n        _unpause();\n\n        emit Unpause(currentEpoch);\n    }\n\n    /**\n     * @dev Get the claimable stats of specific epoch and user account\n     */\n    function claimable(uint256 epoch, address user) public view returns (bool) {\n        BetInfo memory betInfo = ledger[epoch][user];\n        Round memory round = rounds[epoch];\n        if (round.lockPrice == round.closePrice) {\n            return false;\n        }\n        return\n            round.oracleCalled &&\n            ((round.closePrice > round.lockPrice && betInfo.position == Position.Bull) ||\n                (round.closePrice < round.lockPrice && betInfo.position == Position.Bear));\n    }\n\n    /**\n     * @dev Get the refundable stats of specific epoch and user account\n     */\n    function refundable(uint256 epoch, address user) public view returns (bool) {\n        BetInfo memory betInfo = ledger[epoch][user];\n        Round memory round = rounds[epoch];\n        return !round.oracleCalled && block.number > round.endBlock.add(bufferBlocks) && betInfo.amount != 0;\n    }\n\n    /**\n     * @dev Start round\n     * Previous round n-2 must end\n     */\n    function _safeStartRound(uint256 epoch) internal {\n        require(genesisStartOnce, 'Can only run after genesisStartRound is triggered');\n        require(rounds[epoch - 2].endBlock != 0, 'Can only start round after round n-2 has ended');\n        require(block.number >= rounds[epoch - 2].endBlock, 'Can only start new round after round n-2 endBlock');\n        _startRound(epoch);\n    }\n\n    function _startRound(uint256 epoch) internal {\n        Round storage round = rounds[epoch];\n        round.startBlock = block.number;\n        round.lockBlock = block.number.add(intervalBlocks);\n        round.endBlock = block.number.add(intervalBlocks * 2);\n        round.epoch = epoch;\n        round.totalAmount = 0;\n\n        emit StartRound(epoch, block.number);\n    }\n\n    /**\n     * @dev Lock round\n     */\n    function _safeLockRound(uint256 epoch, int256 price) internal {\n        require(rounds[epoch].startBlock != 0, 'Can only lock round after round has started');\n        require(block.number >= rounds[epoch].lockBlock, 'Can only lock round after lockBlock');\n        require(block.number <= rounds[epoch].lockBlock.add(bufferBlocks), 'Can only lock round within bufferBlocks');\n        _lockRound(epoch, price);\n    }\n\n    function _lockRound(uint256 epoch, int256 price) internal {\n        Round storage round = rounds[epoch];\n        round.lockPrice = price;\n\n        emit LockRound(epoch, block.number, round.lockPrice);\n    }\n\n    /**\n     * @dev End round\n     */\n    function _safeEndRound(uint256 epoch, int256 price) internal {\n        require(rounds[epoch].lockBlock != 0, 'Can only end round after round has locked');\n        require(block.number >= rounds[epoch].endBlock, 'Can only end round after endBlock');\n        require(block.number <= rounds[epoch].endBlock.add(bufferBlocks), 'Can only end round within bufferBlocks');\n        _endRound(epoch, price);\n    }\n\n    function _endRound(uint256 epoch, int256 price) internal {\n        Round storage round = rounds[epoch];\n        round.closePrice = price;\n        round.oracleCalled = true;\n\n        emit EndRound(epoch, block.number, round.closePrice);\n    }\n\n    /**\n     * @dev Calculate rewards for round\n     */\n    function _calculateRewards(uint256 epoch) internal {\n        require(rewardRate.add(treasuryRate) == TOTAL_RATE, 'rewardRate and treasuryRate must add up to TOTAL_RATE');\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, 'Rewards calculated');\n        Round storage round = rounds[epoch];\n        uint256 rewardBaseCalAmount;\n        uint256 rewardAmount;\n        uint256 treasuryAmt;\n        // Bull wins\n        if (round.closePrice > round.lockPrice) {\n            rewardBaseCalAmount = round.bullAmount;\n            rewardAmount = round.totalAmount.mul(rewardRate).div(TOTAL_RATE);\n            treasuryAmt = round.totalAmount.mul(treasuryRate).div(TOTAL_RATE);\n        }\n        // Bear wins\n        else if (round.closePrice < round.lockPrice) {\n            rewardBaseCalAmount = round.bearAmount;\n            rewardAmount = round.totalAmount.mul(rewardRate).div(TOTAL_RATE);\n            treasuryAmt = round.totalAmount.mul(treasuryRate).div(TOTAL_RATE);\n        }\n        // House wins\n        else {\n            rewardBaseCalAmount = 0;\n            rewardAmount = 0;\n            treasuryAmt = round.totalAmount;\n        }\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\n        round.rewardAmount = rewardAmount;\n\n        // Add to treasury\n        treasuryAmount = treasuryAmount.add(treasuryAmt);\n\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\n    }\n\n    /**\n     * @dev Get latest recorded price from oracle\n     * If it falls below allowed buffer or has not updated, it would be invalid\n     */\n    function _getPriceFromOracle() internal returns (int256) {\n        uint256 leastAllowedTimestamp = block.timestamp.add(oracleUpdateAllowance);\n        (uint80 roundId, int256 price, , uint256 timestamp, ) = oracle.latestRoundData();\n        require(timestamp <= leastAllowedTimestamp, 'Oracle update exceeded max timestamp allowance');\n        require(roundId > oracleLatestRoundId, 'Oracle update roundId must be larger than oracleLatestRoundId');\n        oracleLatestRoundId = uint256(roundId);\n        return price;\n    }\n\n    function _safeTransferBNB(address to, uint256 value) internal {\n        (bool success, ) = to.call{gas: 23000, value: value}('');\n        require(success, 'TransferHelper: BNB_TRANSFER_FAILED');\n    }\n\n    function _isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Determine if a round is valid for receiving bets\n     * Round must have started and locked\n     * Current block must be within startBlock and endBlock\n     */\n    function _bettable(uint256 epoch) internal view returns (bool) {\n        return\n            rounds[epoch].startBlock != 0 &&\n            rounds[epoch].lockBlock != 0 &&\n            block.number > rounds[epoch].startBlock &&\n            block.number < rounds[epoch].lockBlock;\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, 'SafeMath: addition overflow');\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, 'SafeMath: subtraction overflow');\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, 'SafeMath: multiplication overflow');\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, 'SafeMath: division by zero');\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, 'SafeMath: modulo by zero');\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\nimport './Context.sol';\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/libraries/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.8.0;\n\nimport './Context.sol';\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), 'Pausable: paused');\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), 'Pausable: not paused');\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/libraries/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/DinoVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\n\nimport './libraries/SafeBEP20.sol';\nimport './libraries/SafeMath.sol';\nimport './libraries/Ownable.sol';\nimport './libraries/Pausable.sol';\nimport './interfaces/IBEP20.sol';\n\ninterface IDinoTreasury {\n    function claim() external returns (uint256);\n}\n\ncontract DinoVault is Ownable, Pausable {\n    using SafeBEP20 for IBEP20;\n    using SafeMath for uint256;\n\n    struct UserAutoInfo {\n        uint256 shares; // number of shares for a user\n        uint256 lastDepositedTime; // keeps track of deposited time for potential penalty\n        uint256 dinoAtLastUserAction; // keeps track of dino deposited at the last user action\n        uint256 lastUserActionTime; // keeps track of the last user action time\n    }\n\n    struct UserManualInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    // For manual pool\n    mapping(address => UserManualInfo) public userManualInfo;\n\n    uint256 public dinoPerBlock; // DINO tokens created per block.\n    uint256 public lastClaimDinoBlock; // Last block number that dens claims DINO tokens.\n    uint256 lastRewardBlock; // Last block number that DINOs distribution occurs.\n    uint256 accDinoPerShare; // Accumulated DINOs per share, times 1e12. See below.\n    uint256 public startBlock; // The block number when DINO mining starts.\n\n    // For auto pool\n    mapping(address => UserAutoInfo) public userAutoInfo;\n\n    uint256 public totalShares;\n    uint256 public lastHarvestedTime;\n    address public admin;\n    address public feeTo;\n\n    uint256 public constant MAX_PERFORMANCE_FEE = 500; // 5%\n    uint256 public constant MAX_CALL_FEE = 100; // 1%\n    uint256 public constant MAX_WITHDRAW_FEE = 100; // 1%\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 72 hours; // 3 days\n\n    uint256 public performanceFee = 100; // 1%\n    uint256 public callFee = 25; // 0.25%\n    uint256 public withdrawFee = 20; // 0.2%\n    uint256 public withdrawFeePeriod = 48 hours; // 2 days\n\n    event DepositAutoPool(address indexed sender, uint256 amount, uint256 shares, uint256 lastDepositedTime);\n    event WithdrawAutoPool(address indexed sender, uint256 amount, uint256 shares);\n    event HarvestAutoPool(address indexed sender, uint256 performanceFee, uint256 callFee);\n    event DepositManualPool(address indexed user, uint256 amount);\n    event WithdrawManualPool(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event Pause();\n    event Unpause();\n\n    IBEP20 public token; // Dino token\n    IDinoTreasury public treasury; // The treasury contract\n    uint256 public totalPoolBalance;\n    uint256 public autoPoolPending;\n\n    /**\n     * @notice Constructor\n     * @param _token: Dino token contract\n     * @param _treasury: Dino treasury contract\n     * @param _startBlock: start staking block\n     * @param _feeTo: address to collects fees\n     */\n    constructor(\n        IBEP20 _token,\n        IDinoTreasury _treasury,\n        uint256 _startBlock,\n        address _feeTo\n    ) public {\n        token = _token;\n        treasury = _treasury;\n        startBlock = _startBlock;\n        admin = msg.sender;\n        feeTo = _feeTo;\n\n        dinoPerBlock = treasury.claim();\n        lastClaimDinoBlock = block.number;\n    }\n\n    /**\n     * @notice Checks if the msg.sender is the admin address\n     */\n    modifier onlyAdmin() {\n        require(msg.sender == admin, 'admin: wut?');\n        _;\n    }\n\n    /**\n     * @notice Checks if the msg.sender is a contract or a proxy\n     */\n    modifier notContract() {\n        require(!_isContract(msg.sender), 'contract not allowed');\n        require(msg.sender == tx.origin, 'proxy contract not allowed');\n        _;\n    }\n\n    // Update reward variables of the manual pool to be up-to-date.\n    function updateManualPool() public {\n        if (lastClaimDinoBlock < block.number) {\n            dinoPerBlock = treasury.claim().div(block.number.sub(lastClaimDinoBlock));\n            lastClaimDinoBlock = block.number;\n        }\n        if (block.number <= lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = totalPoolBalance;\n        if (lpSupply == 0) {\n            lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = block.number.sub(lastRewardBlock);\n        uint256 dinoReward = multiplier.mul(dinoPerBlock);\n        accDinoPerShare = accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\n        lastRewardBlock = block.number;\n    }\n\n    // View function to see pending DINOs on frontend.\n    function pendingManual(address _user) public view returns (uint256) {\n        UserManualInfo storage user = userManualInfo[_user];\n        uint256 _accDinoPerShare = accDinoPerShare;\n        uint256 lpSupply = totalPoolBalance;\n        if (block.number > lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = block.number.sub(lastRewardBlock);\n            uint256 dinoReward = multiplier.mul(dinoPerBlock);\n            _accDinoPerShare = _accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(_accDinoPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Stake DINO tokens to DinoDens\n    function depositManual(uint256 _amount) public {\n        UserManualInfo storage user = userManualInfo[msg.sender];\n        updateManualPool();\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt);\n            if (pending > 0) {\n                _safeDinoTransfer(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            token.safeTransferFrom(address(msg.sender), address(this), _amount);\n            totalPoolBalance = totalPoolBalance.add(_amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(accDinoPerShare).div(1e12);\n\n        emit DepositManualPool(msg.sender, _amount);\n    }\n\n    // Withdraw DINO tokens from STAKING.\n    function withdrawManual(uint256 _amount) public {\n        UserManualInfo storage user = userManualInfo[msg.sender];\n        require(user.amount >= _amount, 'withdraw: not good');\n        updateManualPool();\n        uint256 pending = user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt);\n        if (pending > 0) {\n            _safeDinoTransfer(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            totalPoolBalance = totalPoolBalance.sub(_amount);\n            user.amount = user.amount.sub(_amount);\n            token.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(accDinoPerShare).div(1e12);\n\n        emit WithdrawManualPool(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Deposits funds into the Dino Vault\n     * @dev Only possible when contract not paused.\n     * @param _amount: number of tokens to deposit (in DINO)\n     */\n    function depositAuto(uint256 _amount) external whenNotPaused notContract {\n        require(_amount > 0, 'Nothing to deposit');\n\n        uint256 pool = balanceOf();\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        autoPoolPending = autoPoolPending.add(_amount);\n        uint256 currentShares = 0;\n        if (totalShares != 0) {\n            currentShares = (_amount.mul(totalShares)).div(pool);\n        } else {\n            currentShares = _amount;\n        }\n        UserAutoInfo storage user = userAutoInfo[msg.sender];\n\n        user.shares = user.shares.add(currentShares);\n        user.lastDepositedTime = block.timestamp;\n\n        totalShares = totalShares.add(currentShares);\n\n        user.dinoAtLastUserAction = user.shares.mul(balanceOf()).div(totalShares);\n        user.lastUserActionTime = block.timestamp;\n\n        _earn();\n\n        emit DepositAutoPool(msg.sender, _amount, currentShares, block.timestamp);\n    }\n\n    /**\n     * @notice Withdraws all funds for a user\n     */\n    function withdrawAll() external notContract {\n        withdraw(userAutoInfo[msg.sender].shares);\n    }\n\n    /**\n     * @notice Reinvests DINO tokens into DinoDens\n     * @dev Only possible when contract not paused.\n     */\n    function harvest() external notContract whenNotPaused {\n        // Harvest from manual pool\n        UserManualInfo storage user = userManualInfo[address(this)];\n        updateManualPool();\n        uint256 pending = user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt);\n        if (pending > 0) {\n            autoPoolPending = autoPoolPending.add(pending);\n        }\n        user.rewardDebt = user.amount.mul(accDinoPerShare).div(1e12);\n\n        uint256 bal = available();\n        uint256 currentPerformanceFee = bal.mul(performanceFee).div(10000);\n        token.safeTransfer(feeTo, currentPerformanceFee);\n        autoPoolPending = autoPoolPending.sub(currentPerformanceFee);\n\n        uint256 currentCallFee = bal.mul(callFee).div(10000);\n        token.safeTransfer(msg.sender, currentCallFee);\n        autoPoolPending = autoPoolPending.sub(currentCallFee);\n        \n        _earn();\n\n        lastHarvestedTime = block.timestamp;\n\n        emit HarvestAutoPool(msg.sender, currentPerformanceFee, currentCallFee);\n    }\n\n    /**\n     * @notice Sets admin address\n     * @dev Only callable by the contract owner.\n     */\n    function setAdmin(address _admin) external onlyOwner {\n        require(_admin != address(0), 'Cannot be zero address');\n        admin = _admin;\n    }\n\n    /**\n     * @notice Sets feeTo address\n     * @dev Only callable by the contract owner.\n     */\n    function setFeeTo(address _feeTo) external onlyOwner {\n        require(_feeTo != address(0), 'Cannot be zero address');\n        feeTo = _feeTo;\n    }\n\n    /**\n     * @notice Sets treasury address\n     * @dev Only callable by the contract owner.\n     */\n    function setTreasury(IDinoTreasury _treasury) external onlyOwner {\n        require(address(_treasury) != address(0), 'Cannot be zero address');\n        treasury = _treasury;\n    }\n\n    /**\n     * @notice Sets token address\n     * @dev Only callable by the contract owner.\n     */\n    function setToken(IBEP20 _token) external onlyOwner {\n        require(address(_token) != address(0), 'Cannot be zero address');\n        token = _token;\n    }\n\n    /**\n     * @notice Sets performance fee\n     * @dev Only callable by the contract admin.\n     */\n    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {\n        require(_performanceFee <= MAX_PERFORMANCE_FEE, 'performanceFee cannot be more than MAX_PERFORMANCE_FEE');\n        performanceFee = _performanceFee;\n    }\n\n    /**\n     * @notice Sets call fee\n     * @dev Only callable by the contract admin.\n     */\n    function setCallFee(uint256 _callFee) external onlyAdmin {\n        require(_callFee <= MAX_CALL_FEE, 'callFee cannot be more than MAX_CALL_FEE');\n        callFee = _callFee;\n    }\n\n    /**\n     * @notice Sets withdraw fee\n     * @dev Only callable by the contract admin.\n     */\n    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, 'withdrawFee cannot be more than MAX_WITHDRAW_FEE');\n        withdrawFee = _withdrawFee;\n    }\n\n    /**\n     * @notice Sets withdraw fee period\n     * @dev Only callable by the contract admin.\n     */\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyAdmin {\n        require(\n            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,\n            'withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD'\n        );\n        withdrawFeePeriod = _withdrawFeePeriod;\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public {\n        UserManualInfo storage user = userManualInfo[msg.sender];\n        token.safeTransfer(address(msg.sender), user.amount);\n        totalPoolBalance = totalPoolBalance.sub(user.amount);\n        emit EmergencyWithdraw(msg.sender, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    /**\n     * @notice Withdraw unexpected tokens sent to the Dino Vault\n     */\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\n        require(_token != address(token), 'Token cannot be same as deposit token');\n\n        uint256 amount = IBEP20(_token).balanceOf(address(this));\n        IBEP20(_token).safeTransfer(msg.sender, amount);\n    }\n\n    /**\n     * @notice Triggers stopped state\n     * @dev Only possible when contract not paused.\n     */\n    function pause() external onlyAdmin whenNotPaused {\n        _pause();\n        emit Pause();\n    }\n\n    /**\n     * @notice Returns to normal state\n     * @dev Only possible when contract is paused.\n     */\n    function unpause() external onlyAdmin whenPaused {\n        _unpause();\n        emit Unpause();\n    }\n\n    /**\n     * @notice Calculates the expected harvest reward from third party\n     * @return Expected reward to collect in DINO\n     */\n    function calculateHarvestDinoRewards() external view returns (uint256) {\n        uint256 amount = pendingManual(address(this));\n        amount = amount.add(available());\n        uint256 currentCallFee = amount.mul(callFee).div(10000);\n\n        return currentCallFee;\n    }\n\n    /**\n     * @notice Calculates the total pending rewards that can be restaked\n     * @return Returns total pending dino rewards\n     */\n    function calculateTotalPendingDinoRewards() external view returns (uint256) {\n        uint256 amount = pendingManual(address(this));\n        amount = amount.add(available());\n\n        return amount;\n    }\n\n    /**\n     * @notice Calculates the price per share\n     */\n    function getPricePerFullShare() external view returns (uint256) {\n        return totalShares == 0 ? 1e18 : balanceOf().mul(1e18).div(totalShares);\n    }\n\n    /**\n     * @notice Withdraws from funds from the Dino Vault\n     * @param _shares: Number of shares to withdraw\n     */\n    function withdraw(uint256 _shares) public notContract {\n        UserAutoInfo storage user = userAutoInfo[msg.sender];\n        require(_shares > 0, 'Nothing to withdraw');\n        require(_shares <= user.shares, 'Withdraw amount exceeds balance');\n\n        uint256 currentAmount = (balanceOf().mul(_shares)).div(totalShares);\n        user.shares = user.shares.sub(_shares);\n        totalShares = totalShares.sub(_shares);\n\n        uint256 bal = available();\n        if (bal < currentAmount) {\n            uint256 balWithdraw = currentAmount.sub(bal);\n            // Withdraw from manual pool\n            UserManualInfo storage pool = userManualInfo[address(this)];\n            require(pool.amount >= balWithdraw, 'withdraw: not good');\n            updateManualPool();\n            uint256 pending = pool.amount.mul(accDinoPerShare).div(1e12).sub(pool.rewardDebt);\n            if (pending > 0) {\n                autoPoolPending = autoPoolPending.add(pending);\n            }\n            totalPoolBalance = totalPoolBalance.sub(balWithdraw);\n            autoPoolPending = autoPoolPending.add(balWithdraw);\n            pool.amount = pool.amount.sub(balWithdraw);\n            pool.rewardDebt = pool.amount.mul(accDinoPerShare).div(1e12);\n\n            uint256 balAfter = available();\n            uint256 diff = balAfter.sub(bal);\n            if (diff < balWithdraw) {\n                currentAmount = bal.add(diff);\n            }\n        }\n\n        if (block.timestamp < user.lastDepositedTime.add(withdrawFeePeriod)) {\n            uint256 currentWithdrawFee = currentAmount.mul(withdrawFee).div(10000);\n            token.safeTransfer(feeTo, currentWithdrawFee);\n            autoPoolPending = autoPoolPending.sub(currentWithdrawFee);\n            currentAmount = currentAmount.sub(currentWithdrawFee);\n        }\n\n        if (user.shares > 0) {\n            user.dinoAtLastUserAction = user.shares.mul(balanceOf()).div(totalShares);\n        } else {\n            user.dinoAtLastUserAction = 0;\n        }\n\n        user.lastUserActionTime = block.timestamp;\n\n        token.safeTransfer(msg.sender, currentAmount);\n        autoPoolPending = autoPoolPending.sub(currentAmount);\n\n        emit WithdrawAutoPool(msg.sender, currentAmount, _shares);\n    }\n\n    // Safe dino transfer function, just in case if rounding error causes pool to not have enough DINOs.\n    function _safeDinoTransfer(address _to, uint256 _amount) internal {\n        uint256 dinoBal = token.balanceOf(address(this));\n        if (_amount > dinoBal) {\n            token.transfer(_to, dinoBal);\n        } else {\n            token.transfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @notice Custom logic for how much the vault allows to be borrowed\n     * @dev The contract puts 100% of the tokens to work.\n     */\n    function available() public view returns (uint256) {\n        return autoPoolPending;\n    }\n\n    /**\n     * @notice Calculates the total underlying tokens\n     * @dev It includes tokens held by the contract and held in MasterChef\n     */\n    function balanceOf() public view returns (uint256) {\n        UserManualInfo storage pool = userManualInfo[address(this)];\n        return pool.amount.add(autoPoolPending);\n    }\n\n    /**\n     * @notice Deposits tokens into DinoDens to earn staking rewards\n     */\n    function _earn() internal {\n        uint256 bal = available();\n        if (bal > 0) {\n            UserManualInfo storage user = userManualInfo[address(this)];\n            updateManualPool();\n            if (user.amount > 0) {\n                uint256 pending = user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt);\n                if (pending > 0) {\n                    autoPoolPending = autoPoolPending.add(pending);\n                }\n            }\n            totalPoolBalance = totalPoolBalance.add(bal);\n            autoPoolPending = autoPoolPending.sub(bal);\n            user.amount = user.amount.add(bal);\n            user.rewardDebt = user.amount.mul(accDinoPerShare).div(1e12);\n        }\n    }\n\n    /**\n     * @notice Checks if address is a contract\n     * @dev It prevents contract from being targetted\n     */\n    function _isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n}\n"
    },
    "contracts/libraries/SafeBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\nimport '../interfaces/IBEP20.sol';\nimport './SafeMath.sol';\nimport './Address.sol';\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            'SafeBEP20: approve from non-zero to non-zero allowance'\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance =\n            token.allowance(address(this), spender).sub(value, 'SafeBEP20: decreased allowance below zero');\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the BEP20 standard as defined in the EIP.\n */\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/libraries/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, 'Address: insufficient balance');\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}('');\n        require(success, 'Address: unable to send value, recipient may have reverted');\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, 'Address: low-level call failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), 'Address: call to non-contract');\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/DinoTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\n\nimport './interfaces/IBEP20.sol';\nimport './libraries/Ownable.sol';\nimport './libraries/SafeMath.sol';\n\ncontract DinoTreasury is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public constant reductionInterval = 864_000; // ~30 days\n    uint256 public constant reductionRate = 3; // 3%\n\n    // Info of each fund.\n    struct FundInfo {\n        address recipient; // Address of recipient contract.\n        uint256 allocPoint; // How many allocation points assigned to this fund.\n        uint256 lastRewardBlock; // Last block number that DINOs distribution occurs.\n        uint256 accReward; // Accumulated DINOs rewarded.\n        uint256 usedReward; // Accumulated DINOs withdrawed.\n    }\n\n    // The DINO TOKEN!\n    IBEP20 public dino;\n    // Info of each fund.\n    FundInfo[] public fundInfo;\n    mapping(address => uint256) public recipientToPid;\n\n    // Total allocation points. Must be the sum of all allocation points in all funds.\n    uint256 public totalAllocPoint = 0;\n    // The block number when DINO mining starts.\n    uint256 public startBlock;\n\n    constructor(IBEP20 _dino, uint256 _startBlock) public {\n        dino = _dino;\n        startBlock = _startBlock;\n        fundInfo.push(\n            FundInfo({recipient: address(0), allocPoint: 0, lastRewardBlock: 0, accReward: 0, usedReward: 0})\n        );\n    }\n\n    // Add a new reward to the fund. Can only be called by the owner.\n    function add(uint256 _allocPoint, address _recipient) public onlyOwner {\n        require(recipientToPid[_recipient] == 0, 'fund exists');\n        massUpdateFunds();\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        recipientToPid[_recipient] = fundInfo.length;\n        fundInfo.push(\n            FundInfo({\n                recipient: _recipient,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accReward: 0,\n                usedReward: 0\n            })\n        );\n    }\n\n    // Update the given fund's DINO allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\n        massUpdateFunds();\n        uint256 prevAllocPoint = fundInfo[_pid].allocPoint;\n        fundInfo[_pid].allocPoint = _allocPoint;\n        if (prevAllocPoint != _allocPoint) {\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\n        }\n    }\n\n    function claim() external returns (uint256) {\n        uint256 pid = recipientToPid[msg.sender];\n        if (pid <= 0) return 0; // fund not found\n        updateFund(pid);\n\n        FundInfo storage fund = fundInfo[pid];\n        if (fund.accReward > fund.usedReward) {\n            uint256 amount = fund.accReward - fund.usedReward;\n            uint256 dinoBal = dino.balanceOf(address(this));\n            if (amount > dinoBal) amount = dinoBal;\n            dino.transfer(msg.sender, amount);\n            fund.usedReward = fund.usedReward.add(amount);\n            return amount;\n        }\n        return 0;\n    }\n\n    // Update reward variables for all funds. Be careful of gas spending!\n    function massUpdateFunds() internal {\n        uint256 length = fundInfo.length;\n        for (uint256 pid = 1; pid < length; ++pid) {\n            updateFund(pid);\n        }\n    }\n\n    // Update reward variables of the given fund to be up-to-date.\n    function updateFund(uint256 _pid) internal {\n        FundInfo storage fund = fundInfo[_pid];\n        if (block.number <= fund.lastRewardBlock) {\n            return;\n        }\n\n        uint256 dinoReward =\n            getMultiplier(fund.lastRewardBlock, block.number).mul(fund.allocPoint).div(totalAllocPoint);\n        fund.accReward = fund.accReward.add(dinoReward);\n        fund.lastRewardBlock = block.number;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        uint256 multiplier = 0;\n        uint256 nextRewardBlock = _from;\n        uint256 nextReduction = nextReductionBlock(nextRewardBlock);\n        uint256 blockCount = (_to > nextReduction ? nextReduction : _to) - nextRewardBlock;\n        while (blockCount > 0) {\n            uint256 rewardPerBlock = dinoRewardAtBlock(nextRewardBlock);\n            multiplier = multiplier.add(blockCount.mul(rewardPerBlock));\n            nextRewardBlock = (_to > nextReduction ? nextReduction : _to);\n            nextReduction = nextReductionBlock(nextRewardBlock);\n            blockCount = (_to > nextReduction ? nextReduction : _to) - nextRewardBlock;\n        }\n        return multiplier;\n    }\n\n    // Number of DINO tokens rewarded per block.\n    function dinoRewardAtBlock(uint256 _blockNumber) public view returns (uint256) {\n        if (_blockNumber < startBlock) return 0;\n        uint256 reducedCount = _blockNumber.sub(startBlock).div(reductionInterval);\n        uint256 dinoPerBlock = 6e18;\n        for (uint256 i = 0; i < reducedCount; ++i) {\n            dinoPerBlock = dinoPerBlock.mul(97).div(100);\n        }\n        return dinoPerBlock;\n    }\n\n    function nextReductionBlock(uint256 _blockNumber) public view returns (uint256) {\n        if (_blockNumber < startBlock) return startBlock;\n        return _blockNumber.add(reductionInterval.sub(_blockNumber.sub(startBlock).mod(reductionInterval)));\n    }\n}\n"
    },
    "contracts/libraries/BEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.8.0;\n\nimport './Context.sol';\nimport './SafeMath.sol';\nimport '../interfaces/IBEP20.sol';\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\ncontract BEP20 is Context, IBEP20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {BEP20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IBEP20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IBEP20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IBEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IBEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), 'BEP20: transfer from the zero address');\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'BEP20: mint to the zero address');\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'BEP20: burn from the zero address');\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), 'BEP20: approve from the zero address');\n        require(spender != address(0), 'BEP20: approve to the zero address');\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/DinoDens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\n\nimport './interfaces/IBEP20.sol';\nimport './libraries/SafeMath.sol';\nimport './libraries/SafeBEP20.sol';\nimport './libraries/Ownable.sol';\n\ninterface IMigratorDens {\n    // Take the current LP token address and return the new LP token address.\n    // Migrator should have full access to the caller's LP token.\n    function migrate(IBEP20 token) external returns (IBEP20);\n}\n\ninterface IDinoTreasury {\n    function claim() external returns (uint256);\n}\n\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once DINO is sufficiently\n// distributed and the community can show to govern itself.\n//\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract DinoDens is Ownable {\n    using SafeMath for uint256;\n    using SafeBEP20 for IBEP20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of DINOs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accDinoPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accDinoPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IBEP20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. DINOs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that DINOs distribution occurs.\n        uint256 accDinoPerShare; // Accumulated DINOs per share, times 1e12. See below.\n    }\n\n    // The DINO TOKEN!\n    IBEP20 public dino;\n    // The treasury contract\n    IDinoTreasury public treasury;\n    // DINO tokens created per block.\n    uint256 public dinoPerBlock;\n    // Last block number that dens claims DINO tokens.\n    uint256 public lastClaimDinoBlock;\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\n    IMigratorDens public migrator;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when DINO mining starts.\n    uint256 public startBlock;\n\n    // Max referral commission rate: 20%.\n    uint16 public constant MAXIMUM_REFERRAL_BP = 2000;\n    // Referral Bonus in basis points. Initially set to 2%\n    uint256 public refBonusBP = 200;\n    uint256 public accBP = 9800;\n    // Referral Mapping\n    mapping(address => address) public referrers; // account_address -> referrer_address\n    mapping(address => uint256) public referredCount; // referrer_address -> num_of_referred\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event Referral(address indexed _referrer, address indexed _user);\n    event ReferralPaid(address indexed _user, address indexed _userTo, uint256 _reward);\n    event ReferralBonusBpChanged(uint256 _oldBp, uint256 _newBp);\n\n    constructor(\n        IBEP20 _dino,\n        IDinoTreasury _treasury,\n        uint256 _startBlock\n    ) public {\n        dino = _dino;\n        treasury = _treasury;\n        startBlock = _startBlock;\n\n        // staking pool\n        poolInfo.push(PoolInfo({lpToken: _dino, allocPoint: 0, lastRewardBlock: startBlock, accDinoPerShare: 0}));\n        dinoPerBlock = treasury.claim();\n        lastClaimDinoBlock = block.number;\n        totalAllocPoint = 0;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IBEP20 _lpToken,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accDinoPerShare: 0})\n        );\n    }\n\n    // Update the given pool's DINO allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n        if (prevAllocPoint != _allocPoint) {\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\n        }\n    }\n\n    // Set the migrator contract. Can only be called by the owner.\n    function setMigrator(IMigratorDens _migrator) public onlyOwner {\n        migrator = _migrator;\n    }\n\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\n    function migrate(uint256 _pid) public {\n        require(address(migrator) != address(0), 'migrate: no migrator');\n        PoolInfo storage pool = poolInfo[_pid];\n        IBEP20 lpToken = pool.lpToken;\n        uint256 bal = lpToken.balanceOf(address(this));\n        lpToken.safeApprove(address(migrator), bal);\n        IBEP20 newLpToken = migrator.migrate(lpToken);\n        require(bal == newLpToken.balanceOf(address(this)), 'migrate: bad');\n        pool.lpToken = newLpToken;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending DINOs on frontend.\n    function pendingDino(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accDinoPerShare = pool.accDinoPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 dinoReward = multiplier.mul(dinoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accDinoPerShare = accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt).mul(accBP).div(10000);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        if (lastClaimDinoBlock < block.number) {\n            dinoPerBlock = treasury.claim().div(block.number.sub(lastClaimDinoBlock));\n            lastClaimDinoBlock = block.number;\n        }\n\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 dinoReward = multiplier.mul(dinoPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        pool.accDinoPerShare = pool.accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to DinoDens for DINO allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        require(_pid != 0, 'deposit DINO by staking');\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\n            if (pending > 0) {\n                sendReward(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Deposit LP tokens to DinoDens for DINO allocation with referral.\n    function depositWithReferrer(\n        uint256 _pid,\n        uint256 _amount,\n        address _referrer\n    ) public {\n        require(_pid != 0, 'deposit DINO by staking');\n        require(_referrer == address(_referrer), 'deposit: Invalid referrer address');\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\n            if (pending > 0) {\n                sendReward(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            setReferral(msg.sender, _referrer);\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from DinoDens.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        require(_pid != 0, 'withdraw DINO by unstaking');\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, 'withdraw: not good');\n\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\n        if (pending > 0) {\n            sendReward(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Stake DINO tokens to DinoDens\n    function enterStaking(uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[0][msg.sender];\n        updatePool(0);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\n            if (pending > 0) {\n                sendReward(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\n\n        emit Deposit(msg.sender, 0, _amount);\n    }\n\n    // Withdraw DINO tokens from STAKING.\n    function leaveStaking(uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[0][msg.sender];\n        require(user.amount >= _amount, 'withdraw: not good');\n        updatePool(0);\n        uint256 pending = user.amount.mul(pool.accDinoPerShare).div(1e12).sub(user.rewardDebt);\n        if (pending > 0) {\n            sendReward(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accDinoPerShare).div(1e12);\n\n        emit Withdraw(msg.sender, 0, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // Safe dino transfer function, just in case if rounding error causes pool to not have enough DINOs.\n    function safeDinoTransfer(address _to, uint256 _amount) internal {\n        uint256 dinoBal = dino.balanceOf(address(this));\n        if (_amount > dinoBal) {\n            dino.transfer(_to, dinoBal);\n        } else {\n            dino.transfer(_to, _amount);\n        }\n    }\n\n    // Set Referral Address for a user\n    function setReferral(address _user, address _referrer) internal {\n        if (\n            _referrer == address(_referrer) &&\n            referrers[_user] == address(0) &&\n            _referrer != address(0) &&\n            _referrer != _user\n        ) {\n            referrers[_user] = _referrer;\n            referredCount[_referrer] += 1;\n            emit Referral(_user, _referrer);\n        }\n    }\n\n    // Get Referral Address for a Account\n    function getReferral(address _user) public view returns (address) {\n        return referrers[_user];\n    }\n\n    // Send reward to Account and the referrer if needed\n    function sendReward(address _user, uint256 _pending) internal {\n        uint256 accEarned = _pending.mul(accBP).div(10000);\n        safeDinoTransfer(_user, accEarned);\n        payReferralCommission(_user, _pending);\n    }\n\n    // Pay referral commission to the referrer who referred this user.\n    function payReferralCommission(address _user, uint256 _pending) internal {\n        address referrer = getReferral(_user);\n        if (referrer != address(0) && referrer != _user && refBonusBP > 0) {\n            uint256 refBonusEarned = _pending.mul(refBonusBP).div(10000);\n            safeDinoTransfer(referrer, refBonusEarned);\n            emit ReferralPaid(_user, referrer, refBonusEarned);\n        }\n    }\n\n    // Referral Bonus in basis points.\n    // Initially set to 2%, this this the ability to increase or decrease the Bonus percentage based on\n    // community voting and feedback.\n    function updateReferralBonusBp(uint256 _newRefBonusBp) public onlyOwner {\n        require(_newRefBonusBp <= MAXIMUM_REFERRAL_BP, 'updateReferralBonusBp: invalid referral bonus basis points');\n        require(_newRefBonusBp != refBonusBP, 'updateReferralBonusBp: same bonus bp set');\n        uint256 previousRefBonusBP = refBonusBP;\n        refBonusBP = _newRefBonusBp;\n        accBP = 10000 - refBonusBP;\n        emit ReferralBonusBpChanged(previousRefBonusBP, _newRefBonusBp);\n    }\n}\n"
    },
    "contracts/DinoToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\n\nimport './libraries/BEP20.sol';\n\n// Dino Token with Governance.\ncontract DinoToken is BEP20('Dino Token', 'DINO') {\n    // Copied and modified from YAM code:\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n    // Which is copied and modified from COMPOUND:\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n    /// @dev A record of each accounts delegate\n    mapping(address => address) internal _delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH =\n        keccak256('Delegation(address delegatee,uint256 nonce,uint256 expiry)');\n\n    /// @notice A record of states for signing / validating signatures\n    mapping(address => uint256) public nonces;\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    constructor() public {\n        // 200 million DINO\n        _mint(msg.sender, uint256(200000000) * uint256(10)**decimals());\n    }\n\n    /// @notice Creates `_amount` token to `_to`.\n    function _mint(address _to, uint256 _amount) internal override {\n        super._mint(_to, _amount);\n        _moveDelegates(address(0), _delegates[_to], _amount);\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator) external view returns (address) {\n        return _delegates[delegator];\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 domainSeparator =\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\n\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), 'DINO::delegateBySig: invalid signature');\n        require(nonce == nonces[signatory]++, 'DINO::delegateBySig: invalid nonce');\n        require(now <= expiry, 'DINO::delegateBySig: signature expired');\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint256) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\n        require(blockNumber < block.number, 'DINO::getPriorVotes: not yet determined');\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying DINOs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal {\n        uint32 blockNumber = safe32(block.number, 'DINO::_writeCheckpoint: block number exceeds 32 bits');\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function getChainId() internal pure returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n"
    },
    "contracts/libraries/DinoLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport '../interfaces/IDinoPair.sol';\nimport './SafeMath.sol';\n\nlibrary DinoLibrary {\n    using SafeMath for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'DinoLibrary: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'DinoLibrary: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encodePacked(token0, token1)),\n                        hex'd5030a2cb58a788a4f1a0a5394ae8b55a5b87cd7f5c265332a669ed501aec279' // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        pairFor(factory, tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IDinoPair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, 'DinoLibrary: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'DinoLibrary: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, 'DinoLibrary: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'DinoLibrary: INSUFFICIENT_LIQUIDITY');\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, 'DinoLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'DinoLibrary: INSUFFICIENT_LIQUIDITY');\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, 'DinoLibrary: INVALID_PATH');\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, 'DinoLibrary: INVALID_PATH');\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDinoPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IDinoPair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/DinoPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\npragma experimental ABIEncoderV2;\n\nimport './libraries/SafeMath.sol';\nimport './libraries/UQ112x112.sol';\nimport './interfaces/IBEP20.sol';\nimport './interfaces/IDinoPair.sol';\nimport './interfaces/IDinoFactory.sol';\nimport './interfaces/IDinoCallee.sol';\nimport './DinoBEP20.sol';\n\ncontract DinoPair is DinoBEP20 {\n    using SafeMath for uint256;\n    using UQ112x112 for uint224;\n\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n    uint256 public constant MAX_PRICE_HISTORY = 10000;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint256 public price0CumulativeLast;\n    uint256 public price1CumulativeLast;\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    struct PriceLog {\n        uint256 price0Cumulative;\n        uint256 price1Cumulative;\n        uint32 timestamp;\n    }\n\n    PriceLog[] public priceLog;\n    uint256 public priceLogNextIndex;\n\n    uint256 private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, 'Dino: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function getReserves()\n        public\n        view\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        )\n    {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Dino: TRANSFER_FAILED');\n    }\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    constructor() public {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, 'Dino: FORBIDDEN'); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(\n        uint256 balance0,\n        uint256 balance1,\n        uint112 _reserve0,\n        uint112 _reserve1\n    ) private {\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Dino: OVERFLOW');\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n            _appendPriceLog(price0CumulativeLast, price1CumulativeLast, blockTimestamp);\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n        address feeTo = IDinoFactory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint256 _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint256 rootK = SafeMath.sqrt(uint256(_reserve0).mul(_reserve1));\n                uint256 rootKLast = SafeMath.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint256 denominator = rootK.mul(2).add(rootKLast);\n                    uint256 liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint256 liquidity) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        uint256 balance0 = IBEP20(token0).balanceOf(address(this));\n        uint256 balance1 = IBEP20(token1).balanceOf(address(this));\n        uint256 amount0 = balance0.sub(_reserve0);\n        uint256 amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = SafeMath.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = SafeMath.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, 'Dino: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        uint256 balance0 = IBEP20(_token0).balanceOf(address(this));\n        uint256 balance1 = IBEP20(_token1).balanceOf(address(this));\n        uint256 liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'Dino: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IBEP20(_token0).balanceOf(address(this));\n        balance1 = IBEP20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'Dino: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Dino: INSUFFICIENT_LIQUIDITY');\n\n        uint256 balance0;\n        uint256 balance1;\n        {\n            // scope for _token{0,1}, avoids stack too deep errors\n            address _token0 = token0;\n            address _token1 = token1;\n            require(to != _token0 && to != _token1, 'Dino: INVALID_TO');\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n            if (data.length > 0) IDinoCallee(to).dinoCall(msg.sender, amount0Out, amount1Out, data);\n            balance0 = IBEP20(_token0).balanceOf(address(this));\n            balance1 = IBEP20(_token1).balanceOf(address(this));\n        }\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Dino: INSUFFICIENT_INPUT_AMOUNT');\n        {\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n            require(\n                balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2),\n                'Dino: K'\n            );\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IBEP20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IBEP20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IBEP20(token0).balanceOf(address(this)), IBEP20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n\n    function _appendPriceLog(\n        uint256 price0Cumulative,\n        uint256 price1Cumulative,\n        uint32 blockTimestamp\n    ) private {\n        if (priceLog.length < MAX_PRICE_HISTORY) {\n            priceLog.push(PriceLog(price0Cumulative, price1Cumulative, blockTimestamp));\n        } else {\n            priceLog[priceLogNextIndex] = PriceLog(price0Cumulative, price1Cumulative, blockTimestamp);\n        }\n\n        if (++priceLogNextIndex >= MAX_PRICE_HISTORY) {\n            priceLogNextIndex = 0;\n        }\n    }\n\n    function priceLogLength() external view returns (uint256 length) {\n        return priceLog.length;\n    }\n}\n"
    },
    "contracts/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "contracts/interfaces/IDinoFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IDinoFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IDinoCallee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IDinoCallee {\n    function dinoCall(\n        address sender,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/DinoBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\n\nimport './interfaces/IDinoBEP20.sol';\nimport './libraries/SafeMath.sol';\n\ncontract DinoBEP20 {\n    using SafeMath for uint256;\n\n    string public constant name = 'Dino LPs';\n    string public constant symbol = 'Dino-LP';\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint256) public nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() public {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint256 value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint256 value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint256 value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool) {\n        if (allowance[from][msg.sender] != uint256(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, 'Dino: EXPIRED');\n        bytes32 digest =\n            keccak256(\n                abi.encodePacked(\n                    '\\x19\\x01',\n                    DOMAIN_SEPARATOR,\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Dino: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/interfaces/IDinoBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IDinoBEP20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/test/MockBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport '../DinoBEP20.sol';\n\ncontract MockBEP20 is DinoBEP20 {\n    constructor(uint256 _totalSupply) public {\n        _mint(msg.sender, _totalSupply);\n    }\n}\n"
    },
    "contracts/DinoRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\n\nimport './interfaces/IDinoFactory.sol';\nimport './interfaces/IDinoRouter.sol';\nimport './libraries/TransferHelper.sol';\nimport './libraries/DinoLibrary.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IBEP20.sol';\nimport './interfaces/IWBNB.sol';\n\ncontract DinoRouter is IDinoRouter {\n    using SafeMath for uint256;\n\n    address public immutable override factory;\n    address public immutable override WBNB;\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, 'DinoRouter: EXPIRED');\n        _;\n    }\n\n    constructor(address _factory, address _WBNB) public {\n        factory = _factory;\n        WBNB = _WBNB;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WBNB); // only accept BNB via fallback from the WBNB contract\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) internal virtual returns (uint256 amountA, uint256 amountB) {\n        // create the pair if it doesn't exist yet\n        if (IDinoFactory(factory).getPair(tokenA, tokenB) == address(0)) {\n            IDinoFactory(factory).createPair(tokenA, tokenB);\n        }\n        (uint256 reserveA, uint256 reserveB) = DinoLibrary.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint256 amountBOptimal = DinoLibrary.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'DinoRouter: INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal = DinoLibrary.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'DinoRouter: INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        address pair = DinoLibrary.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = IDinoPair(pair).mint(to);\n    }\n\n    function addLiquidityBNB(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        virtual\n        override\n        ensure(deadline)\n        returns (\n            uint256 amountToken,\n            uint256 amountBNB,\n            uint256 liquidity\n        )\n    {\n        (amountToken, amountBNB) = _addLiquidity(\n            token,\n            WBNB,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountBNBMin\n        );\n        address pair = DinoLibrary.pairFor(factory, token, WBNB);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWBNB(WBNB).deposit{value: amountBNB}();\n        assert(IWBNB(WBNB).transfer(pair, amountBNB));\n        liquidity = IDinoPair(pair).mint(to);\n        // refund dust bnb, if any\n        if (msg.value > amountBNB) TransferHelper.safeTransferBNB(msg.sender, msg.value - amountBNB);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\n        address pair = DinoLibrary.pairFor(factory, tokenA, tokenB);\n        IDinoPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        (uint256 amount0, uint256 amount1) = IDinoPair(pair).burn(to);\n        (address token0, ) = DinoLibrary.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'DinoRouter: INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'DinoRouter: INSUFFICIENT_B_AMOUNT');\n    }\n\n    function removeLiquidityBNB(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountBNB) {\n        (amountToken, amountBNB) = removeLiquidity(\n            token,\n            WBNB,\n            liquidity,\n            amountTokenMin,\n            amountBNBMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, amountToken);\n        IWBNB(WBNB).withdraw(amountBNB);\n        TransferHelper.safeTransferBNB(to, amountBNB);\n    }\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountA, uint256 amountB) {\n        address pair = DinoLibrary.pairFor(factory, tokenA, tokenB);\n        uint256 value = approveMax ? uint256(-1) : liquidity;\n        IDinoPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n    }\n\n    function removeLiquidityBNBWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountToken, uint256 amountBNB) {\n        address pair = DinoLibrary.pairFor(factory, token, WBNB);\n        uint256 value = approveMax ? uint256(-1) : liquidity;\n        IDinoPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountToken, amountBNB) = removeLiquidityBNB(token, liquidity, amountTokenMin, amountBNBMin, to, deadline);\n    }\n\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityBNBSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountBNB) {\n        (, amountBNB) = removeLiquidity(token, WBNB, liquidity, amountTokenMin, amountBNBMin, address(this), deadline);\n        TransferHelper.safeTransfer(token, to, IBEP20(token).balanceOf(address(this)));\n        IWBNB(WBNB).withdraw(amountBNB);\n        TransferHelper.safeTransferBNB(to, amountBNB);\n    }\n\n    function removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountBNB) {\n        address pair = DinoLibrary.pairFor(factory, token, WBNB);\n        uint256 value = approveMax ? uint256(-1) : liquidity;\n        IDinoPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        amountBNB = removeLiquidityBNBSupportingFeeOnTransferTokens(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountBNBMin,\n            to,\n            deadline\n        );\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = DinoLibrary.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) =\n                input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\n            address to = i < path.length - 2 ? DinoLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            IDinoPair(DinoLibrary.pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = DinoLibrary.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'DinoRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            DinoLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = DinoLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'DinoRouter: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            DinoLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapExactBNBForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[0] == WBNB, 'DinoRouter: INVALID_PATH');\n        amounts = DinoLibrary.getAmountsOut(factory, msg.value, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'DinoRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWBNB(WBNB).deposit{value: amounts[0]}();\n        assert(IWBNB(WBNB).transfer(DinoLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactBNB(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WBNB, 'DinoRouter: INVALID_PATH');\n        amounts = DinoLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'DinoRouter: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            DinoLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferBNB(to, amounts[amounts.length - 1]);\n    }\n\n    function swapExactTokensForBNB(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WBNB, 'DinoRouter: INVALID_PATH');\n        amounts = DinoLibrary.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'DinoRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            DinoLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferBNB(to, amounts[amounts.length - 1]);\n    }\n\n    function swapBNBForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[0] == WBNB, 'DinoRouter: INVALID_PATH');\n        amounts = DinoLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, 'DinoRouter: EXCESSIVE_INPUT_AMOUNT');\n        IWBNB(WBNB).deposit{value: amounts[0]}();\n        assert(IWBNB(WBNB).transfer(DinoLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        // refund dust bnb, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferBNB(msg.sender, msg.value - amounts[0]);\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = DinoLibrary.sortTokens(input, output);\n            IDinoPair pair = IDinoPair(DinoLibrary.pairFor(factory, input, output));\n            uint256 amountInput;\n            uint256 amountOutput;\n            {\n                // scope to avoid stack too deep errors\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) =\n                    input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n                amountInput = IBEP20(input).balanceOf(address(pair)).sub(reserveInput);\n                amountOutput = DinoLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            (uint256 amount0Out, uint256 amount1Out) =\n                input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n            address to = i < path.length - 2 ? DinoLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) {\n        TransferHelper.safeTransferFrom(path[0], msg.sender, DinoLibrary.pairFor(factory, path[0], path[1]), amountIn);\n        uint256 balanceBefore = IBEP20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IBEP20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'DinoRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n\n    function swapExactBNBForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) {\n        require(path[0] == WBNB, 'DinoRouter: INVALID_PATH');\n        uint256 amountIn = msg.value;\n        IWBNB(WBNB).deposit{value: amountIn}();\n        assert(IWBNB(WBNB).transfer(DinoLibrary.pairFor(factory, path[0], path[1]), amountIn));\n        uint256 balanceBefore = IBEP20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IBEP20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'DinoRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n\n    function swapExactTokensForBNBSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) {\n        require(path[path.length - 1] == WBNB, 'DinoRouter: INVALID_PATH');\n        TransferHelper.safeTransferFrom(path[0], msg.sender, DinoLibrary.pairFor(factory, path[0], path[1]), amountIn);\n        _swapSupportingFeeOnTransferTokens(path, address(this));\n        uint256 amountOut = IBEP20(WBNB).balanceOf(address(this));\n        require(amountOut >= amountOutMin, 'DinoRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWBNB(WBNB).withdraw(amountOut);\n        TransferHelper.safeTransferBNB(to, amountOut);\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) public pure virtual override returns (uint256 amountB) {\n        return DinoLibrary.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure virtual override returns (uint256 amountOut) {\n        return DinoLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure virtual override returns (uint256 amountIn) {\n        return DinoLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory amounts)\n    {\n        return DinoLibrary.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint256 amountOut, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory amounts)\n    {\n        return DinoLibrary.getAmountsIn(factory, amountOut, path);\n    }\n}\n"
    },
    "contracts/interfaces/IDinoRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IDinoRouter {\n    function factory() external pure returns (address);\n\n    function WBNB() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityBNB(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountBNB,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityBNB(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountBNB);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityBNBWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountBNB);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactBNBForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactBNB(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForBNB(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapBNBForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function removeLiquidityBNBSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountBNB);\n\n    function removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountBNB);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactBNBForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForBNBSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending BNB that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferBNB(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper: BNB_TRANSFER_FAILED');\n    }\n}\n"
    },
    "contracts/interfaces/IWBNB.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IWBNB {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/DinoFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.6.12;\n\nimport './interfaces/IDinoFactory.sol';\nimport './DinoPair.sol';\n\ncontract DinoFactory is IDinoFactory {\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(DinoPair).creationCode));\n\n    address public override feeTo;\n    address public override feeToSetter;\n\n    mapping(address => mapping(address => address)) public override getPair;\n    address[] public override allPairs;\n\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    constructor(address _feeToSetter) public {\n        feeToSetter = _feeToSetter;\n    }\n\n    function allPairsLength() external view override returns (uint256) {\n        return allPairs.length;\n    }\n\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n        require(tokenA != tokenB, 'Dino: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'Dino: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'Dino: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(DinoPair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IDinoPair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, 'Dino: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external override {\n        require(msg.sender == feeToSetter, 'Dino: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n}\n"
    },
    "contracts/contrib/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\n// Copyright 2020 Compound Labs, Inc.\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Ctrl+f for XXX to see all the modifications.\n\n// XXX: pragma solidity ^0.5.16;\npragma solidity >=0.6.0;\n\n// XXX: import \"./SafeMath.sol\";\nimport '../libraries/SafeMath.sol';\n\ncontract Timelock {\n    using SafeMath for uint256;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant MINIMUM_DELAY = 2 days;\n    uint256 public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint256 public delay;\n    bool public admin_initialized;\n\n    mapping(bytes32 => bool) public queuedTransactions;\n\n    constructor(address admin_, uint256 delay_) public {\n        require(delay_ >= MINIMUM_DELAY, 'Timelock::constructor: Delay must exceed minimum delay.');\n        require(delay_ <= MAXIMUM_DELAY, 'Timelock::constructor: Delay must not exceed maximum delay.');\n\n        admin = admin_;\n        delay = delay_;\n        admin_initialized = false;\n    }\n\n    // XXX: function() external payable { }\n    receive() external payable {}\n\n    function setDelay(uint256 delay_) public {\n        require(msg.sender == address(this), 'Timelock::setDelay: Call must come from Timelock.');\n        require(delay_ >= MINIMUM_DELAY, 'Timelock::setDelay: Delay must exceed minimum delay.');\n        require(delay_ <= MAXIMUM_DELAY, 'Timelock::setDelay: Delay must not exceed maximum delay.');\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, 'Timelock::acceptAdmin: Call must come from pendingAdmin.');\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        // allows one time setting of admin for deployment purposes\n        if (admin_initialized) {\n            require(msg.sender == address(this), 'Timelock::setPendingAdmin: Call must come from Timelock.');\n        } else {\n            require(msg.sender == admin, 'Timelock::setPendingAdmin: First call must come from admin.');\n            admin_initialized = true;\n        }\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public returns (bytes32) {\n        require(msg.sender == admin, 'Timelock::queueTransaction: Call must come from admin.');\n        require(\n            eta >= getBlockTimestamp().add(delay),\n            'Timelock::queueTransaction: Estimated execution block must satisfy delay.'\n        );\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public {\n        require(msg.sender == admin, 'Timelock::cancelTransaction: Call must come from admin.');\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public payable returns (bytes memory) {\n        require(msg.sender == admin, 'Timelock::executeTransaction: Call must come from admin.');\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), 'Timelock::executeTransaction: Transaction is stale.');\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, 'Timelock::executeTransaction: Transaction execution reverted.');\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint256) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}