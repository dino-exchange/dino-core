{
  "address": "0x2AEcfB9a21A21CA0538A9bDf1a5a6b9830ACB7c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBEP20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IDinoDens",
          "name": "_dens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastDepositedTime",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "callFee",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CALL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERFORMANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAW_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAW_FEE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "available",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateHarvestDinoRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateTotalPendingDinoRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dens",
      "outputs": [
        {
          "internalType": "contract IDinoDens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvestedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_callFee",
          "type": "uint256"
        }
      ],
      "name": "setCallFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFeePeriod",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFeePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dinoAtLastUserAction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUserActionTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ba4bcb2c0b81f56f7f5508af9e21a10f6ac46a4b7d97a0b1638f861019eb742",
  "receipt": {
    "to": null,
    "from": "0x4C37848BC193995a3Cdf280919a42bD899464a2D",
    "contractAddress": "0x2AEcfB9a21A21CA0538A9bDf1a5a6b9830ACB7c1",
    "transactionIndex": 1,
    "gasUsed": "2336962",
    "logsBloom": "0x
    "blockHash": "0x884ef59a67c22531dae0e11a60ff04fe09c1c54b9d34771059d4c176fcec65d4",
    "transactionHash": "0x2ba4bcb2c0b81f56f7f5508af9e21a10f6ac46a4b7d97a0b1638f861019eb742",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9916660,
        "transactionHash": "0x2ba4bcb2c0b81f56f7f5508af9e21a10f6ac46a4b7d97a0b1638f861019eb742",
        "address": "0x2AEcfB9a21A21CA0538A9bDf1a5a6b9830ACB7c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c37848bc193995a3cdf280919a42bd899464a2d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x884ef59a67c22531dae0e11a60ff04fe09c1c54b9d34771059d4c176fcec65d4"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9916660,
        "transactionHash": "0x2ba4bcb2c0b81f56f7f5508af9e21a10f6ac46a4b7d97a0b1638f861019eb742",
        "address": "0xFfBbEAE934549ce6E420ede7dBc91036d19E95E0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002aecfb9a21a21ca0538a9bdf1a5a6b9830acb7c1",
          "0x0000000000000000000000007d9d4e883daee6a23da96ad148dc996194d7dd68"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x884ef59a67c22531dae0e11a60ff04fe09c1c54b9d34771059d4c176fcec65d4"
      }
    ],
    "blockNumber": 9916660,
    "cumulativeGasUsed": "2357962",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFfBbEAE934549ce6E420ede7dBc91036d19E95E0",
    "0x7d9d4e883DaEe6a23DA96Ad148dC996194D7dD68",
    "0x6AaC2b4761599412986078103cd6E342d96F17A2",
    "0x8ad04AC7f6211ea3E4155E5C2dDCE64Ae6b6d5c0"
  ],
  "solcInputHash": "09df086e15422a8c3d37c475cd44a761",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IDinoDens\",\"name\":\"_dens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callFee\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CALL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateHarvestDinoRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalPendingDinoRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dens\",\"outputs\":[{\"internalType\":\"contract IDinoDens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_callFee\",\"type\":\"uint256\"}],\"name\":\"setCallFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dinoAtLastUserAction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUserActionTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"available()\":{\"details\":\"The contract puts 100% of the tokens to work.\"},\"balanceOf()\":{\"details\":\"It includes tokens held by the contract and held in DinoDens\"},\"calculateHarvestDinoRewards()\":{\"returns\":{\"_0\":\"Expected reward to collect in DINO\"}},\"calculateTotalPendingDinoRewards()\":{\"returns\":{\"_0\":\"Returns total pending dino rewards\"}},\"constructor\":{\"params\":{\"_admin\":\": address of the admin\",\"_dens\":\": DinoDens contract\",\"_token\":\": Dino token contract\",\"_treasury\":\": address of the treasury (collects fees)\"}},\"deposit(uint256)\":{\"details\":\"Only possible when contract not paused.\",\"params\":{\"_amount\":\": number of tokens to deposit (in DINO)\"}},\"emergencyWithdraw()\":{\"details\":\"EMERGENCY ONLY. Only callable by the contract admin.\"},\"harvest()\":{\"details\":\"Only possible when contract not paused.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only possible when contract not paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAdmin(address)\":{\"details\":\"Only callable by the contract owner.\"},\"setCallFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setPerformanceFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setTreasury(address)\":{\"details\":\"Only callable by the contract owner.\"},\"setWithdrawFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setWithdrawFeePeriod(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only possible when contract is paused.\"},\"withdraw(uint256)\":{\"params\":{\"_shares\":\": Number of shares to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"available()\":{\"notice\":\"Custom logic for how much the vault allows to be borrowed\"},\"balanceOf()\":{\"notice\":\"Calculates the total underlying tokens\"},\"calculateHarvestDinoRewards()\":{\"notice\":\"Calculates the expected harvest reward from third party\"},\"calculateTotalPendingDinoRewards()\":{\"notice\":\"Calculates the total pending rewards that can be restaked\"},\"constructor\":\"Constructor\",\"deposit(uint256)\":{\"notice\":\"Deposits funds into the Dino Vault\"},\"emergencyWithdraw()\":{\"notice\":\"Withdraws from DinoDens to Vault without caring about rewards.\"},\"getPricePerFullShare()\":{\"notice\":\"Calculates the price per share\"},\"harvest()\":{\"notice\":\"Reinvests DINO tokens into DinoDens\"},\"inCaseTokensGetStuck(address)\":{\"notice\":\"Withdraw unexpected tokens sent to the Dino Vault\"},\"pause()\":{\"notice\":\"Triggers stopped state\"},\"setAdmin(address)\":{\"notice\":\"Sets admin address\"},\"setCallFee(uint256)\":{\"notice\":\"Sets call fee\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets performance fee\"},\"setTreasury(address)\":{\"notice\":\"Sets treasury address\"},\"setWithdrawFee(uint256)\":{\"notice\":\"Sets withdraw fee\"},\"setWithdrawFeePeriod(uint256)\":{\"notice\":\"Sets withdraw fee period\"},\"unpause()\":{\"notice\":\"Returns to normal state\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws from funds from the Dino Vault\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds for a user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DinoVault.sol\":\"DinoVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DinoVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.12;\\n\\nimport './libraries/SafeBEP20.sol';\\nimport './libraries/SafeMath.sol';\\nimport './libraries/Ownable.sol';\\nimport './libraries/Pausable.sol';\\nimport './interfaces/IBEP20.sol';\\nimport './interfaces/IDinoDens.sol';\\n\\ncontract DinoVault is Ownable, Pausable {\\n    using SafeBEP20 for IBEP20;\\n    using SafeMath for uint256;\\n\\n    struct UserInfo {\\n        uint256 shares; // number of shares for a user\\n        uint256 lastDepositedTime; // keeps track of deposited time for potential penalty\\n        uint256 dinoAtLastUserAction; // keeps track of dino deposited at the last user action\\n        uint256 lastUserActionTime; // keeps track of the last user action time\\n    }\\n\\n    IBEP20 public immutable token; // Dino token\\n\\n    IDinoDens public immutable dens;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public totalShares;\\n    uint256 public lastHarvestedTime;\\n    address public admin;\\n    address public treasury;\\n\\n    uint256 public constant MAX_PERFORMANCE_FEE = 500; // 5%\\n    uint256 public constant MAX_CALL_FEE = 100; // 1%\\n    uint256 public constant MAX_WITHDRAW_FEE = 100; // 1%\\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 72 hours; // 3 days\\n\\n    uint256 public performanceFee = 200; // 2%\\n    uint256 public callFee = 25; // 0.25%\\n    uint256 public withdrawFee = 10; // 0.1%\\n    uint256 public withdrawFeePeriod = 72 hours; // 3 days\\n\\n    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 lastDepositedTime);\\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\\n    event Harvest(address indexed sender, uint256 performanceFee, uint256 callFee);\\n    event Pause();\\n    event Unpause();\\n\\n    /**\\n     * @notice Constructor\\n     * @param _token: Dino token contract\\n     * @param _dens: DinoDens contract\\n     * @param _admin: address of the admin\\n     * @param _treasury: address of the treasury (collects fees)\\n     */\\n    constructor(\\n        IBEP20 _token,\\n        IDinoDens _dens,\\n        address _admin,\\n        address _treasury\\n    ) public {\\n        token = _token;\\n        dens = _dens;\\n        admin = _admin;\\n        treasury = _treasury;\\n\\n        // Infinite approve\\n        IBEP20(_token).safeApprove(address(_dens), uint256(-1));\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"admin: wut?\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is a contract or a proxy\\n     */\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), \\\"contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposits funds into the Dino Vault\\n     * @dev Only possible when contract not paused.\\n     * @param _amount: number of tokens to deposit (in DINO)\\n     */\\n    function deposit(uint256 _amount) external whenNotPaused notContract {\\n        require(_amount > 0, \\\"Nothing to deposit\\\");\\n\\n        uint256 pool = balanceOf();\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 currentShares = 0;\\n        if (totalShares != 0) {\\n            currentShares = (_amount.mul(totalShares)).div(pool);\\n        } else {\\n            currentShares = _amount;\\n        }\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        user.shares = user.shares.add(currentShares);\\n        user.lastDepositedTime = block.timestamp;\\n\\n        totalShares = totalShares.add(currentShares);\\n\\n        user.dinoAtLastUserAction = user.shares.mul(balanceOf()).div(totalShares);\\n        user.lastUserActionTime = block.timestamp;\\n\\n        _earn();\\n\\n        emit Deposit(msg.sender, _amount, currentShares, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds for a user\\n     */\\n    function withdrawAll() external notContract {\\n        withdraw(userInfo[msg.sender].shares);\\n    }\\n\\n    /**\\n     * @notice Reinvests DINO tokens into DinoDens\\n     * @dev Only possible when contract not paused.\\n     */\\n    function harvest() external notContract whenNotPaused {\\n        IDinoDens(dens).leaveStaking(0);\\n\\n        uint256 bal = available();\\n        uint256 currentPerformanceFee = bal.mul(performanceFee).div(10000);\\n        token.safeTransfer(treasury, currentPerformanceFee);\\n\\n        uint256 currentCallFee = bal.mul(callFee).div(10000);\\n        token.safeTransfer(msg.sender, currentCallFee);\\n\\n        _earn();\\n\\n        lastHarvestedTime = block.timestamp;\\n\\n        emit Harvest(msg.sender, currentPerformanceFee, currentCallFee);\\n    }\\n\\n    /**\\n     * @notice Sets admin address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setAdmin(address _admin) external onlyOwner {\\n        require(_admin != address(0), \\\"Cannot be zero address\\\");\\n        admin = _admin;\\n    }\\n\\n    /**\\n     * @notice Sets treasury address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"Cannot be zero address\\\");\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Sets performance fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {\\n        require(_performanceFee <= MAX_PERFORMANCE_FEE, \\\"performanceFee cannot be more than MAX_PERFORMANCE_FEE\\\");\\n        performanceFee = _performanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets call fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setCallFee(uint256 _callFee) external onlyAdmin {\\n        require(_callFee <= MAX_CALL_FEE, \\\"callFee cannot be more than MAX_CALL_FEE\\\");\\n        callFee = _callFee;\\n    }\\n\\n    /**\\n     * @notice Sets withdraw fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {\\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, \\\"withdrawFee cannot be more than MAX_WITHDRAW_FEE\\\");\\n        withdrawFee = _withdrawFee;\\n    }\\n\\n    /**\\n     * @notice Sets withdraw fee period\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyAdmin {\\n        require(\\n            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,\\n            \\\"withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD\\\"\\n        );\\n        withdrawFeePeriod = _withdrawFeePeriod;\\n    }\\n\\n    /**\\n     * @notice Withdraws from DinoDens to Vault without caring about rewards.\\n     * @dev EMERGENCY ONLY. Only callable by the contract admin.\\n     */\\n    function emergencyWithdraw() external onlyAdmin {\\n        IDinoDens(dens).emergencyWithdraw(0);\\n    }\\n\\n    /**\\n     * @notice Withdraw unexpected tokens sent to the Dino Vault\\n     */\\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\\n        require(_token != address(token), \\\"Token cannot be same as deposit token\\\");\\n\\n        uint256 amount = IBEP20(_token).balanceOf(address(this));\\n        IBEP20(_token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() external onlyAdmin whenNotPaused {\\n        _pause();\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() external onlyAdmin whenPaused {\\n        _unpause();\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @notice Calculates the expected harvest reward from third party\\n     * @return Expected reward to collect in DINO\\n     */\\n    function calculateHarvestDinoRewards() external view returns (uint256) {\\n        uint256 amount = IDinoDens(dens).pendingDino(0, address(this));\\n        amount = amount.add(available());\\n        uint256 currentCallFee = amount.mul(callFee).div(10000);\\n\\n        return currentCallFee;\\n    }\\n\\n    /**\\n     * @notice Calculates the total pending rewards that can be restaked\\n     * @return Returns total pending dino rewards\\n     */\\n    function calculateTotalPendingDinoRewards() external view returns (uint256) {\\n        uint256 amount = IDinoDens(dens).pendingDino(0, address(this));\\n        amount = amount.add(available());\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Calculates the price per share\\n     */\\n    function getPricePerFullShare() external view returns (uint256) {\\n        return totalShares == 0 ? 1e18 : balanceOf().mul(1e18).div(totalShares);\\n    }\\n\\n    /**\\n     * @notice Withdraws from funds from the Dino Vault\\n     * @param _shares: Number of shares to withdraw\\n     */\\n    function withdraw(uint256 _shares) public notContract {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(_shares > 0, \\\"Nothing to withdraw\\\");\\n        require(_shares <= user.shares, \\\"Withdraw amount exceeds balance\\\");\\n\\n        uint256 currentAmount = (balanceOf().mul(_shares)).div(totalShares);\\n        user.shares = user.shares.sub(_shares);\\n        totalShares = totalShares.sub(_shares);\\n\\n        uint256 bal = available();\\n        if (bal < currentAmount) {\\n            uint256 balWithdraw = currentAmount.sub(bal);\\n            IDinoDens(dens).leaveStaking(balWithdraw);\\n            uint256 balAfter = available();\\n            uint256 diff = balAfter.sub(bal);\\n            if (diff < balWithdraw) {\\n                currentAmount = bal.add(diff);\\n            }\\n        }\\n\\n        if (block.timestamp < user.lastDepositedTime.add(withdrawFeePeriod)) {\\n            uint256 currentWithdrawFee = currentAmount.mul(withdrawFee).div(10000);\\n            token.safeTransfer(treasury, currentWithdrawFee);\\n            currentAmount = currentAmount.sub(currentWithdrawFee);\\n        }\\n\\n        if (user.shares > 0) {\\n            user.dinoAtLastUserAction = user.shares.mul(balanceOf()).div(totalShares);\\n        } else {\\n            user.dinoAtLastUserAction = 0;\\n        }\\n\\n        user.lastUserActionTime = block.timestamp;\\n\\n        token.safeTransfer(msg.sender, currentAmount);\\n\\n        emit Withdraw(msg.sender, currentAmount, _shares);\\n    }\\n\\n    /**\\n     * @notice Custom logic for how much the vault allows to be borrowed\\n     * @dev The contract puts 100% of the tokens to work.\\n     */\\n    function available() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculates the total underlying tokens\\n     * @dev It includes tokens held by the contract and held in DinoDens\\n     */\\n    function balanceOf() public view returns (uint256) {\\n        (uint256 amount, ) = IDinoDens(dens).userInfo(0, address(this));\\n        return token.balanceOf(address(this)).add(amount);\\n    }\\n\\n    /**\\n     * @notice Deposits tokens into DinoDens to earn staking rewards\\n     */\\n    function _earn() internal {\\n        uint256 bal = available();\\n        if (bal > 0) {\\n            IDinoDens(dens).enterStaking(bal);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if address is a contract\\n     * @dev It prevents contract from being targetted\\n     */\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\",\"keccak256\":\"0xac8c7fc6dbe8b94c93dac10760f290ea97f05a099682da7fcc5cd16f818dde9b\",\"license\":\"MIT\"},\"contracts/interfaces/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc34a0fc0edc354e31790feb123bc93302e8b21765768e546b633fb168469cb8\",\"license\":\"MIT\"},\"contracts/interfaces/IDinoDens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IDinoDens {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function enterStaking(uint256 _amount) external;\\n\\n    function leaveStaking(uint256 _amount) external;\\n\\n    function pendingDino(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\",\"keccak256\":\"0xabb8ec05e196dbdba92b49576bdfd55097e524a6486cfbd9547d4edcb4233141\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x721e647998bd10326c34bbca3d952379a62266832bfdb21b18adbce0e1afde13\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xc7d2396c5481131099cdbc8138b2c4df45b5150edc983a78b5fd01acb1197cf2\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x702257f24af80a77b86990f29d8fc193413a5c3b9ddf8ac8f9f841199e78eef5\",\"license\":\"MIT\"},\"contracts/libraries/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x83e1a871276bd1c3318673ec93aabbb68ca60d27afcff39b03366cf24679a99c\",\"license\":\"MIT\"},\"contracts/libraries/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport '../interfaces/IBEP20.sol';\\nimport './SafeMath.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(value, 'SafeBEP20: decreased allowance below zero');\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ef26b7f4bf9d8ad7661dff713779c3a3f34cc713790eb2e717d3dd31a1fede9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1de2a24b6da5a4b2164df9a9fe8d0c16362fcb7e2aa3ddd283133da0d8d39c1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260c86006556019600755600a6008556203f4806009553480156200002757600080fd5b5060405162002bcd38038062002bcd833981810160405260808110156200004d57600080fd5b508051602082015160408301516060909301519192909160006200007062000139565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001600160601b0319606085811b821660805284901b1660a052600480546001600160a01b038481166001600160a01b0319928316179092556005805484841692169190911790556200012f9085168460001962001b346200013d602090811b91909117901c565b5050505062000528565b3390565b801580620001c7575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156200019757600080fd5b505afa158015620001ac573d6000803e3d6000fd5b505050506040513d6020811015620001c357600080fd5b5051155b620002045760405162461bcd60e51b815260040180806020018281038252603681526020018062002b976036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200025c9185916200026116565b505050565b6060620002bd826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200031d60201b62001c4c179092919060201c565b8051909150156200025c57808060200190516020811015620002de57600080fd5b50516200025c5760405162461bcd60e51b815260040180806020018281038252602a81526020018062002b6d602a913960400191505060405180910390fd5b60606200032e848460008562000336565b949350505050565b60606200034385620004ee565b62000395576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310620003d65780518252601f199092019160209182019101620003b5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146200043a576040519150601f19603f3d011682016040523d82523d6000602084013e6200043f565b606091505b50915091508115620004555791506200032e9050565b805115620004665780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620004b257818101518382015260200162000498565b50505050905090810190601f168015620004e05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906200032e575050151592915050565b60805160601c60a05160601c6125d06200059d6000398061063c52806108cb5280610c6e52806110b6528061123952806116f552806117f15280611eb25250806109c35280610a3f5280610d285280610d7d5280610df3528061117e52806115ec52806118bf5280611b1252506125d06000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638456cb5911610130578063d4b0de2f116100b8578063e941fa781161007c578063e941fa7814610479578063f0f4426014610481578063f2fde38b146104a7578063f851a440146104cd578063fc0c546a146104d557610232565b8063d4b0de2f146102bf578063daf5c4651461043b578063db2e21bc14610443578063def68a9c1461044b578063df10b4e61461047157610232565b806390321e1a116100ff57806390321e1a146103e9578063b60f0531146103f1578063b6ac642a146103f9578063b6b55f2514610416578063bdca91651461043357610232565b80638456cb59146103c9578063853828b6146103d157806387788782146103d95780638da5cb5b146103e157610232565b80634641257d116101be57806370897b231161018257806370897b231461038c578063715018a6146103a9578063722713f7146103b157806377c7b8fc146103b957806381064b81146103c157610232565b80634641257d1461031657806348a0d7541461031e5780635c975abb1461032657806361d027b314610342578063704b6c021461036657610232565b80632cfc5f01116102055780632cfc5f01146102d95780632d034973146102e15780632e1a7d4d146102e95780633a98ef39146103065780633f4ba83a1461030e57610232565b80631959a002146102375780631efac1b81461028357806326465826146102a25780632ad5a53f146102bf575b600080fd5b61025d6004803603602081101561024d57600080fd5b50356001600160a01b03166104dd565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6102a06004803603602081101561029957600080fd5b5035610505565b005b6102a0600480360360208110156102b857600080fd5b5035610599565b6102c761062b565b60408051918252519081900360200190f35b6102c7610630565b6102c7610637565b6102a0600480360360208110156102ff57600080fd5b503561071c565b6102c7610aa6565b6102a0610aac565b6102a0610b7c565b6102c7610def565b61032e610e8f565b604080519115158252519081900360200190f35b61034a610e9f565b604080516001600160a01b039092168252519081900360200190f35b6102a06004803603602081101561037c57600080fd5b50356001600160a01b0316610eae565b6102a0600480360360208110156103a257600080fd5b5035610f7c565b6102a061100f565b6102c76110b1565b6102c76111fd565b61034a611237565b6102a061125b565b6102a0611328565b6102c76113e6565b61034a6113ec565b6102c76113fb565b6102c7611401565b6102a06004803603602081101561040f57600080fd5b5035611407565b6102a06004803603602081101561042c57600080fd5b5035611499565b6102c76116ea565b6102c76116f0565b6102a06117a2565b6102a06004803603602081101561046157600080fd5b50356001600160a01b0316611870565b6102c76119c3565b6102c76119c9565b6102a06004803603602081101561049757600080fd5b50356001600160a01b03166119cf565b6102a0600480360360208110156104bd57600080fd5b50356001600160a01b0316611a9d565b61034a611b01565b61034a611b10565b6001602081905260009182526040909120805491810154600282015460039092015490919084565b6004546001600160a01b03163314610552576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6203f4808111156105945760405162461bcd60e51b815260040180806020018281038252603d815260200180612557603d913960400191505060405180910390fd5b600955565b6004546001600160a01b031633146105e6576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b60648111156106265760405162461bcd60e51b81526004018080602001828103825260288152602001806124826028913960400191505060405180910390fd5b600755565b606481565b6203f48081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663718127166000306040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b1580156106b057600080fd5b505afa1580156106c4573d6000803e3d6000fd5b505050506040513d60208110156106da57600080fd5b505190506106f06106e9610def565b8290611c63565b9050600061071561271061070f60075485611cc690919063ffffffff16565b90611d1f565b9250505090565b61072533611d61565b1561076e576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b3332146107bf576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b33600090815260016020526040902081610816576040805162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b604482015290519081900360640190fd5b805482111561086c576040805162461bcd60e51b815260206004820152601f60248201527f576974686472617720616d6f756e7420657863656564732062616c616e636500604482015290519081900360640190fd5b600061088660025461070f856108806110b1565b90611cc6565b82549091506108959084611d67565b82556002546108a49084611d67565b60025560006108b1610def565b90508181101561097a5760006108c78383611d67565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631058d281826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561092f57600080fd5b505af1158015610943573d6000803e3d6000fd5b505050506000610951610def565b9050600061095f8285611d67565b905082811015610976576109738482611c63565b94505b5050505b600954600184015461098b91611c63565b4210156109fa5760006109af61271061070f60085486611cc690919063ffffffff16565b6005549091506109ec906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611da9565b6109f68382611d67565b9250505b825415610a2457610a1a60025461070f610a126110b1565b865490611cc6565b6002840155610a2c565b600060028401555b426003840155610a666001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384611da9565b6040805183815260208101869052815133927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568928290030190a250505050565b60025481565b6004546001600160a01b03163314610af9576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b610b01610e8f565b610b49576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b610b51611dfb565b6040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b610b8533611d61565b15610bce576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214610c1f576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b610c27610e8f565b15610c6c576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631058d28160006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610cd357600080fd5b505af1158015610ce7573d6000803e3d6000fd5b505050506000610cf5610def565b90506000610d1461271061070f60065485611cc690919063ffffffff16565b600554909150610d51906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611da9565b6000610d6e61271061070f60075486611cc690919063ffffffff16565b9050610da46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611da9565b610dac611e9e565b426003556040805183815260208101839052815133927f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954928290030190a2505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e5e57600080fd5b505afa158015610e72573d6000803e3d6000fd5b505050506040513d6020811015610e8857600080fd5b5051905090565b600054600160a01b900460ff1690565b6005546001600160a01b031681565b610eb6611f31565b6000546001600160a01b03908116911614610f06576040805162461bcd60e51b81526020600482018190526024820152600080516020612537833981519152604482015290519081900360640190fd5b6001600160a01b038116610f5a576040805162461bcd60e51b815260206004820152601660248201527543616e6e6f74206265207a65726f206164647265737360501b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610fc9576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6101f481111561100a5760405162461bcd60e51b81526004018080602001828103825260368152602001806124aa6036913960400191505060405180910390fd5b600655565b611017611f31565b6000546001600160a01b03908116911614611067576040805162461bcd60e51b81526020600482018190526024820152600080516020612537833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b6000306040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050604080518083038186803b15801561112957600080fd5b505afa15801561113d573d6000803e3d6000fd5b505050506040513d604081101561115357600080fd5b5051604080516370a0823160e01b815230600482015290519192506111f79183916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b1580156111c557600080fd5b505afa1580156111d9573d6000803e3d6000fd5b505050506040513d60208110156111ef57600080fd5b505190611c63565b91505090565b60006002546000146112285761122360025461070f670de0b6b3a76400006108806110b1565b611232565b670de0b6b3a76400005b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004546001600160a01b031633146112a8576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6112b0610e8f565b156112f5576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6112fd611f35565b6040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b61133133611d61565b1561137a576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b3332146113cb576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b336000908152600160205260409020546113e49061071c565b565b60065481565b6000546001600160a01b031690565b60075481565b60035481565b6004546001600160a01b03163314611454576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b60648111156114945760405162461bcd60e51b81526004018080602001828103825260308152602001806125946030913960400191505060405180910390fd5b600855565b6114a1610e8f565b156114e6576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6114ef33611d61565b15611538576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214611589576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b600081116115d3576040805162461bcd60e51b8152602060048201526012602482015271139bdd1a1a5b99c81d1bc819195c1bdcda5d60721b604482015290519081900360640190fd5b60006115dd6110b1565b90506116146001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611fbe565b6000600254600014611640576116398261070f60025486611cc690919063ffffffff16565b9050611643565b50815b336000908152600160205260409020805461165e9083611c63565b81554260018201556002546116739083611c63565b600281905561168f9061070f6116876110b1565b845490611cc6565b60028201554260038201556116a2611e9e565b60408051858152602081018490524281830152905133917f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e919081900360600190a250505050565b6101f481565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663718127166000306040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b15801561176957600080fd5b505afa15801561177d573d6000803e3d6000fd5b505050506040513d602081101561179357600080fd5b505190506111f76106e9610def565b6004546001600160a01b031633146117ef576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635312ea8e60006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561185657600080fd5b505af115801561186a573d6000803e3d6000fd5b50505050565b6004546001600160a01b031633146118bd576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561192e5760405162461bcd60e51b815260040180806020018281038252602581526020018061245d6025913960400191505060405180910390fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d60208110156119a757600080fd5b505190506119bf6001600160a01b0383163383611da9565b5050565b60095481565b60085481565b6119d7611f31565b6000546001600160a01b03908116911614611a27576040805162461bcd60e51b81526020600482018190526024820152600080516020612537833981519152604482015290519081900360640190fd5b6001600160a01b038116611a7b576040805162461bcd60e51b815260206004820152601660248201527543616e6e6f74206265207a65726f206164647265737360501b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b611aa5611f31565b6000546001600160a01b03908116911614611af5576040805162461bcd60e51b81526020600482018190526024820152600080516020612537833981519152604482015290519081900360640190fd5b611afe81612018565b50565b6004546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b801580611bba575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611b8c57600080fd5b505afa158015611ba0573d6000803e3d6000fd5b505050506040513d6020811015611bb657600080fd5b5051155b611bf55760405162461bcd60e51b81526004018080602001828103825260368152602001806125016036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611c479084906120b8565b505050565b6060611c5b8484600085612169565b949350505050565b600082820183811015611cbd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600082611cd557506000611cc0565b82820282848281611ce257fe5b0414611cbd5760405162461bcd60e51b81526004018080602001828103825260218152602001806124e06021913960400191505060405180910390fd5b6000611cbd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612314565b3b151590565b6000611cbd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612379565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611c479084906120b8565b611e03610e8f565b611e4b576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e81611f31565b604080516001600160a01b039092168252519081900360200190a1565b6000611ea8610def565b90508015611afe577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341441d3b826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611f1657600080fd5b505af1158015611f2a573d6000803e3d6000fd5b5050505050565b3390565b611f3d610e8f565b15611f82576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e81611f31565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261186a9085906120b8565b6001600160a01b03811661205d5760405162461bcd60e51b81526004018080602001828103825260268152602001806124376026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b606061210d826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c4c9092919063ffffffff16565b805190915015611c475780806020019051602081101561212c57600080fd5b5051611c475760405162461bcd60e51b815260040180806020018281038252602a81526020018061240d602a913960400191505060405180910390fd5b6060612174856123d3565b6121c5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106122045780518252601f1990920191602091820191016121e5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612266576040519150601f19603f3d011682016040523d82523d6000602084013e61226b565b606091505b5091509150811561227f579150611c5b9050565b80511561228f5780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122d95781810151838201526020016122c1565b50505050905090810190601f1680156123065780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b600081836123635760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156122d95781810151838201526020016122c1565b50600083858161236f57fe5b0495945050505050565b600081848411156123cb5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156122d95781810151838201526020016122c1565b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611c5b57505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373546f6b656e2063616e6e6f742062652073616d65206173206465706f73697420746f6b656e63616c6c4665652063616e6e6f74206265206d6f7265207468616e204d41585f43414c4c5f464545706572666f726d616e63654665652063616e6e6f74206265206d6f7265207468616e204d41585f504552464f524d414e43455f464545536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727769746864726177466565506572696f642063616e6e6f74206265206d6f7265207468616e204d41585f57495448445241575f4645455f504552494f4477697468647261774665652063616e6e6f74206265206d6f7265207468616e204d41585f57495448445241575f464545a164736f6c634300060c000a5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565645361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638456cb5911610130578063d4b0de2f116100b8578063e941fa781161007c578063e941fa7814610479578063f0f4426014610481578063f2fde38b146104a7578063f851a440146104cd578063fc0c546a146104d557610232565b8063d4b0de2f146102bf578063daf5c4651461043b578063db2e21bc14610443578063def68a9c1461044b578063df10b4e61461047157610232565b806390321e1a116100ff57806390321e1a146103e9578063b60f0531146103f1578063b6ac642a146103f9578063b6b55f2514610416578063bdca91651461043357610232565b80638456cb59146103c9578063853828b6146103d157806387788782146103d95780638da5cb5b146103e157610232565b80634641257d116101be57806370897b231161018257806370897b231461038c578063715018a6146103a9578063722713f7146103b157806377c7b8fc146103b957806381064b81146103c157610232565b80634641257d1461031657806348a0d7541461031e5780635c975abb1461032657806361d027b314610342578063704b6c021461036657610232565b80632cfc5f01116102055780632cfc5f01146102d95780632d034973146102e15780632e1a7d4d146102e95780633a98ef39146103065780633f4ba83a1461030e57610232565b80631959a002146102375780631efac1b81461028357806326465826146102a25780632ad5a53f146102bf575b600080fd5b61025d6004803603602081101561024d57600080fd5b50356001600160a01b03166104dd565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6102a06004803603602081101561029957600080fd5b5035610505565b005b6102a0600480360360208110156102b857600080fd5b5035610599565b6102c761062b565b60408051918252519081900360200190f35b6102c7610630565b6102c7610637565b6102a0600480360360208110156102ff57600080fd5b503561071c565b6102c7610aa6565b6102a0610aac565b6102a0610b7c565b6102c7610def565b61032e610e8f565b604080519115158252519081900360200190f35b61034a610e9f565b604080516001600160a01b039092168252519081900360200190f35b6102a06004803603602081101561037c57600080fd5b50356001600160a01b0316610eae565b6102a0600480360360208110156103a257600080fd5b5035610f7c565b6102a061100f565b6102c76110b1565b6102c76111fd565b61034a611237565b6102a061125b565b6102a0611328565b6102c76113e6565b61034a6113ec565b6102c76113fb565b6102c7611401565b6102a06004803603602081101561040f57600080fd5b5035611407565b6102a06004803603602081101561042c57600080fd5b5035611499565b6102c76116ea565b6102c76116f0565b6102a06117a2565b6102a06004803603602081101561046157600080fd5b50356001600160a01b0316611870565b6102c76119c3565b6102c76119c9565b6102a06004803603602081101561049757600080fd5b50356001600160a01b03166119cf565b6102a0600480360360208110156104bd57600080fd5b50356001600160a01b0316611a9d565b61034a611b01565b61034a611b10565b6001602081905260009182526040909120805491810154600282015460039092015490919084565b6004546001600160a01b03163314610552576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6203f4808111156105945760405162461bcd60e51b815260040180806020018281038252603d815260200180612557603d913960400191505060405180910390fd5b600955565b6004546001600160a01b031633146105e6576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b60648111156106265760405162461bcd60e51b81526004018080602001828103825260288152602001806124826028913960400191505060405180910390fd5b600755565b606481565b6203f48081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663718127166000306040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b1580156106b057600080fd5b505afa1580156106c4573d6000803e3d6000fd5b505050506040513d60208110156106da57600080fd5b505190506106f06106e9610def565b8290611c63565b9050600061071561271061070f60075485611cc690919063ffffffff16565b90611d1f565b9250505090565b61072533611d61565b1561076e576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b3332146107bf576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b33600090815260016020526040902081610816576040805162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b604482015290519081900360640190fd5b805482111561086c576040805162461bcd60e51b815260206004820152601f60248201527f576974686472617720616d6f756e7420657863656564732062616c616e636500604482015290519081900360640190fd5b600061088660025461070f856108806110b1565b90611cc6565b82549091506108959084611d67565b82556002546108a49084611d67565b60025560006108b1610def565b90508181101561097a5760006108c78383611d67565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631058d281826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561092f57600080fd5b505af1158015610943573d6000803e3d6000fd5b505050506000610951610def565b9050600061095f8285611d67565b905082811015610976576109738482611c63565b94505b5050505b600954600184015461098b91611c63565b4210156109fa5760006109af61271061070f60085486611cc690919063ffffffff16565b6005549091506109ec906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611da9565b6109f68382611d67565b9250505b825415610a2457610a1a60025461070f610a126110b1565b865490611cc6565b6002840155610a2c565b600060028401555b426003840155610a666001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384611da9565b6040805183815260208101869052815133927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568928290030190a250505050565b60025481565b6004546001600160a01b03163314610af9576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b610b01610e8f565b610b49576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b610b51611dfb565b6040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b610b8533611d61565b15610bce576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214610c1f576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b610c27610e8f565b15610c6c576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631058d28160006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610cd357600080fd5b505af1158015610ce7573d6000803e3d6000fd5b505050506000610cf5610def565b90506000610d1461271061070f60065485611cc690919063ffffffff16565b600554909150610d51906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611da9565b6000610d6e61271061070f60075486611cc690919063ffffffff16565b9050610da46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611da9565b610dac611e9e565b426003556040805183815260208101839052815133927f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954928290030190a2505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e5e57600080fd5b505afa158015610e72573d6000803e3d6000fd5b505050506040513d6020811015610e8857600080fd5b5051905090565b600054600160a01b900460ff1690565b6005546001600160a01b031681565b610eb6611f31565b6000546001600160a01b03908116911614610f06576040805162461bcd60e51b81526020600482018190526024820152600080516020612537833981519152604482015290519081900360640190fd5b6001600160a01b038116610f5a576040805162461bcd60e51b815260206004820152601660248201527543616e6e6f74206265207a65726f206164647265737360501b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610fc9576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6101f481111561100a5760405162461bcd60e51b81526004018080602001828103825260368152602001806124aa6036913960400191505060405180910390fd5b600655565b611017611f31565b6000546001600160a01b03908116911614611067576040805162461bcd60e51b81526020600482018190526024820152600080516020612537833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b6000306040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050604080518083038186803b15801561112957600080fd5b505afa15801561113d573d6000803e3d6000fd5b505050506040513d604081101561115357600080fd5b5051604080516370a0823160e01b815230600482015290519192506111f79183916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b1580156111c557600080fd5b505afa1580156111d9573d6000803e3d6000fd5b505050506040513d60208110156111ef57600080fd5b505190611c63565b91505090565b60006002546000146112285761122360025461070f670de0b6b3a76400006108806110b1565b611232565b670de0b6b3a76400005b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004546001600160a01b031633146112a8576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6112b0610e8f565b156112f5576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6112fd611f35565b6040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b61133133611d61565b1561137a576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b3332146113cb576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b336000908152600160205260409020546113e49061071c565b565b60065481565b6000546001600160a01b031690565b60075481565b60035481565b6004546001600160a01b03163314611454576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b60648111156114945760405162461bcd60e51b81526004018080602001828103825260308152602001806125946030913960400191505060405180910390fd5b600855565b6114a1610e8f565b156114e6576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6114ef33611d61565b15611538576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214611589576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b600081116115d3576040805162461bcd60e51b8152602060048201526012602482015271139bdd1a1a5b99c81d1bc819195c1bdcda5d60721b604482015290519081900360640190fd5b60006115dd6110b1565b90506116146001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611fbe565b6000600254600014611640576116398261070f60025486611cc690919063ffffffff16565b9050611643565b50815b336000908152600160205260409020805461165e9083611c63565b81554260018201556002546116739083611c63565b600281905561168f9061070f6116876110b1565b845490611cc6565b60028201554260038201556116a2611e9e565b60408051858152602081018490524281830152905133917f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e919081900360600190a250505050565b6101f481565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663718127166000306040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b15801561176957600080fd5b505afa15801561177d573d6000803e3d6000fd5b505050506040513d602081101561179357600080fd5b505190506111f76106e9610def565b6004546001600160a01b031633146117ef576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635312ea8e60006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561185657600080fd5b505af115801561186a573d6000803e3d6000fd5b50505050565b6004546001600160a01b031633146118bd576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561192e5760405162461bcd60e51b815260040180806020018281038252602581526020018061245d6025913960400191505060405180910390fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d60208110156119a757600080fd5b505190506119bf6001600160a01b0383163383611da9565b5050565b60095481565b60085481565b6119d7611f31565b6000546001600160a01b03908116911614611a27576040805162461bcd60e51b81526020600482018190526024820152600080516020612537833981519152604482015290519081900360640190fd5b6001600160a01b038116611a7b576040805162461bcd60e51b815260206004820152601660248201527543616e6e6f74206265207a65726f206164647265737360501b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b611aa5611f31565b6000546001600160a01b03908116911614611af5576040805162461bcd60e51b81526020600482018190526024820152600080516020612537833981519152604482015290519081900360640190fd5b611afe81612018565b50565b6004546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b801580611bba575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611b8c57600080fd5b505afa158015611ba0573d6000803e3d6000fd5b505050506040513d6020811015611bb657600080fd5b5051155b611bf55760405162461bcd60e51b81526004018080602001828103825260368152602001806125016036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611c479084906120b8565b505050565b6060611c5b8484600085612169565b949350505050565b600082820183811015611cbd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600082611cd557506000611cc0565b82820282848281611ce257fe5b0414611cbd5760405162461bcd60e51b81526004018080602001828103825260218152602001806124e06021913960400191505060405180910390fd5b6000611cbd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612314565b3b151590565b6000611cbd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612379565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611c479084906120b8565b611e03610e8f565b611e4b576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e81611f31565b604080516001600160a01b039092168252519081900360200190a1565b6000611ea8610def565b90508015611afe577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341441d3b826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611f1657600080fd5b505af1158015611f2a573d6000803e3d6000fd5b5050505050565b3390565b611f3d610e8f565b15611f82576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e81611f31565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261186a9085906120b8565b6001600160a01b03811661205d5760405162461bcd60e51b81526004018080602001828103825260268152602001806124376026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b606061210d826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c4c9092919063ffffffff16565b805190915015611c475780806020019051602081101561212c57600080fd5b5051611c475760405162461bcd60e51b815260040180806020018281038252602a81526020018061240d602a913960400191505060405180910390fd5b6060612174856123d3565b6121c5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106122045780518252601f1990920191602091820191016121e5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612266576040519150601f19603f3d011682016040523d82523d6000602084013e61226b565b606091505b5091509150811561227f579150611c5b9050565b80511561228f5780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122d95781810151838201526020016122c1565b50505050905090810190601f1680156123065780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b600081836123635760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156122d95781810151838201526020016122c1565b50600083858161236f57fe5b0495945050505050565b600081848411156123cb5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156122d95781810151838201526020016122c1565b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611c5b57505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373546f6b656e2063616e6e6f742062652073616d65206173206465706f73697420746f6b656e63616c6c4665652063616e6e6f74206265206d6f7265207468616e204d41585f43414c4c5f464545706572666f726d616e63654665652063616e6e6f74206265206d6f7265207468616e204d41585f504552464f524d414e43455f464545536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727769746864726177466565506572696f642063616e6e6f74206265206d6f7265207468616e204d41585f57495448445241575f4645455f504552494f4477697468647261774665652063616e6e6f74206265206d6f7265207468616e204d41585f57495448445241575f464545a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "available()": {
        "details": "The contract puts 100% of the tokens to work."
      },
      "balanceOf()": {
        "details": "It includes tokens held by the contract and held in DinoDens"
      },
      "calculateHarvestDinoRewards()": {
        "returns": {
          "_0": "Expected reward to collect in DINO"
        }
      },
      "calculateTotalPendingDinoRewards()": {
        "returns": {
          "_0": "Returns total pending dino rewards"
        }
      },
      "constructor": {
        "params": {
          "_admin": ": address of the admin",
          "_dens": ": DinoDens contract",
          "_token": ": Dino token contract",
          "_treasury": ": address of the treasury (collects fees)"
        }
      },
      "deposit(uint256)": {
        "details": "Only possible when contract not paused.",
        "params": {
          "_amount": ": number of tokens to deposit (in DINO)"
        }
      },
      "emergencyWithdraw()": {
        "details": "EMERGENCY ONLY. Only callable by the contract admin."
      },
      "harvest()": {
        "details": "Only possible when contract not paused."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only possible when contract not paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAdmin(address)": {
        "details": "Only callable by the contract owner."
      },
      "setCallFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setPerformanceFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setTreasury(address)": {
        "details": "Only callable by the contract owner."
      },
      "setWithdrawFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setWithdrawFeePeriod(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only possible when contract is paused."
      },
      "withdraw(uint256)": {
        "params": {
          "_shares": ": Number of shares to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "available()": {
        "notice": "Custom logic for how much the vault allows to be borrowed"
      },
      "balanceOf()": {
        "notice": "Calculates the total underlying tokens"
      },
      "calculateHarvestDinoRewards()": {
        "notice": "Calculates the expected harvest reward from third party"
      },
      "calculateTotalPendingDinoRewards()": {
        "notice": "Calculates the total pending rewards that can be restaked"
      },
      "constructor": "Constructor",
      "deposit(uint256)": {
        "notice": "Deposits funds into the Dino Vault"
      },
      "emergencyWithdraw()": {
        "notice": "Withdraws from DinoDens to Vault without caring about rewards."
      },
      "getPricePerFullShare()": {
        "notice": "Calculates the price per share"
      },
      "harvest()": {
        "notice": "Reinvests DINO tokens into DinoDens"
      },
      "inCaseTokensGetStuck(address)": {
        "notice": "Withdraw unexpected tokens sent to the Dino Vault"
      },
      "pause()": {
        "notice": "Triggers stopped state"
      },
      "setAdmin(address)": {
        "notice": "Sets admin address"
      },
      "setCallFee(uint256)": {
        "notice": "Sets call fee"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets performance fee"
      },
      "setTreasury(address)": {
        "notice": "Sets treasury address"
      },
      "setWithdrawFee(uint256)": {
        "notice": "Sets withdraw fee"
      },
      "setWithdrawFeePeriod(uint256)": {
        "notice": "Sets withdraw fee period"
      },
      "unpause()": {
        "notice": "Returns to normal state"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws from funds from the Dino Vault"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds for a user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10091,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10221,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6487,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "userInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UserInfo)6479_storage)"
      },
      {
        "astId": 6489,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "totalShares",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6491,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "lastHarvestedTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6493,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "admin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6495,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6510,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6513,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "callFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6516,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6519,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "withdrawFeePeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)6479_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DinoVault.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6479_storage"
      },
      "t_struct(UserInfo)6479_storage": {
        "encoding": "inplace",
        "label": "struct DinoVault.UserInfo",
        "members": [
          {
            "astId": 6472,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6474,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "lastDepositedTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6476,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "dinoAtLastUserAction",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6478,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "lastUserActionTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}