{
  "address": "0xe4810439544BF53DF01c3aA66E9064c494bB6DCf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBEP20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IDinoTreasury",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastDepositedTime",
          "type": "uint256"
        }
      ],
      "name": "DepositAutoPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositManualPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "callFee",
          "type": "uint256"
        }
      ],
      "name": "HarvestAutoPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAutoPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawManualPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CALL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERFORMANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAW_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAW_FEE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoPoolPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "available",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateHarvestDinoRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateTotalPendingDinoRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositAuto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositManual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dinoPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastClaimDinoBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvestedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingManual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_callFee",
          "type": "uint256"
        }
      ],
      "name": "setCallFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFeePeriod",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFeePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPoolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract IDinoTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateManualPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userAutoInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dinoAtLastUserAction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUserActionTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userManualInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawManual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3697d1b40f4ea423f64b9ecb0547858518a818cf0d20b849e030454544bd7658",
  "receipt": {
    "to": null,
    "from": "0x4C37848BC193995a3Cdf280919a42bD899464a2D",
    "contractAddress": "0xe4810439544BF53DF01c3aA66E9064c494bB6DCf",
    "transactionIndex": 1,
    "gasUsed": "2587958",
    "logsBloom": "0x
    "blockHash": "0x1b1ae1f2808b078dd9cc96721ad46e25b5ac6d3fe0ae24eabf5de74cdab66f17",
    "transactionHash": "0x3697d1b40f4ea423f64b9ecb0547858518a818cf0d20b849e030454544bd7658",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9982988,
        "transactionHash": "0x3697d1b40f4ea423f64b9ecb0547858518a818cf0d20b849e030454544bd7658",
        "address": "0xe4810439544BF53DF01c3aA66E9064c494bB6DCf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c37848bc193995a3cdf280919a42bd899464a2d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1b1ae1f2808b078dd9cc96721ad46e25b5ac6d3fe0ae24eabf5de74cdab66f17"
      }
    ],
    "blockNumber": 9982988,
    "cumulativeGasUsed": "2631910",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFfBbEAE934549ce6E420ede7dBc91036d19E95E0",
    "0xEB3F32D3ad04F21202EC50D90904A76d7a666f97",
    9025730,
    "0x6AaC2b4761599412986078103cd6E342d96F17A2"
  ],
  "solcInputHash": "5dc2656e5ec7e00fb3d58fb312165c78",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IDinoTreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"name\":\"DepositAutoPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositManualPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callFee\",\"type\":\"uint256\"}],\"name\":\"HarvestAutoPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"WithdrawAutoPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawManualPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CALL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoPoolPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateHarvestDinoRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalPendingDinoRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dinoPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimDinoBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingManual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_callFee\",\"type\":\"uint256\"}],\"name\":\"setCallFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract IDinoTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateManualPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAutoInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dinoAtLastUserAction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUserActionTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userManualInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"available()\":{\"details\":\"The contract puts 100% of the tokens to work.\"},\"balanceOf()\":{\"details\":\"It includes tokens held by the contract and held in MasterChef\"},\"calculateHarvestDinoRewards()\":{\"returns\":{\"_0\":\"Expected reward to collect in DINO\"}},\"calculateTotalPendingDinoRewards()\":{\"returns\":{\"_0\":\"Returns total pending dino rewards\"}},\"constructor\":{\"params\":{\"_feeTo\":\": address to collects fees\",\"_startBlock\":\": start staking block\",\"_token\":\": Dino token contract\",\"_treasury\":\": Dino treasury contract\"}},\"depositAuto(uint256)\":{\"details\":\"Only possible when contract not paused.\",\"params\":{\"_amount\":\": number of tokens to deposit (in DINO)\"}},\"harvest()\":{\"details\":\"Only possible when contract not paused.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only possible when contract not paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAdmin(address)\":{\"details\":\"Only callable by the contract owner.\"},\"setCallFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setFeeTo(address)\":{\"details\":\"Only callable by the contract owner.\"},\"setPerformanceFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setWithdrawFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setWithdrawFeePeriod(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only possible when contract is paused.\"},\"withdraw(uint256)\":{\"params\":{\"_shares\":\": Number of shares to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"available()\":{\"notice\":\"Custom logic for how much the vault allows to be borrowed\"},\"balanceOf()\":{\"notice\":\"Calculates the total underlying tokens\"},\"calculateHarvestDinoRewards()\":{\"notice\":\"Calculates the expected harvest reward from third party\"},\"calculateTotalPendingDinoRewards()\":{\"notice\":\"Calculates the total pending rewards that can be restaked\"},\"constructor\":\"Constructor\",\"depositAuto(uint256)\":{\"notice\":\"Deposits funds into the Dino Vault\"},\"getPricePerFullShare()\":{\"notice\":\"Calculates the price per share\"},\"harvest()\":{\"notice\":\"Reinvests DINO tokens into DinoDens\"},\"inCaseTokensGetStuck(address)\":{\"notice\":\"Withdraw unexpected tokens sent to the Dino Vault\"},\"pause()\":{\"notice\":\"Triggers stopped state\"},\"setAdmin(address)\":{\"notice\":\"Sets admin address\"},\"setCallFee(uint256)\":{\"notice\":\"Sets call fee\"},\"setFeeTo(address)\":{\"notice\":\"Sets feeTo address\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets performance fee\"},\"setWithdrawFee(uint256)\":{\"notice\":\"Sets withdraw fee\"},\"setWithdrawFeePeriod(uint256)\":{\"notice\":\"Sets withdraw fee period\"},\"unpause()\":{\"notice\":\"Returns to normal state\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws from funds from the Dino Vault\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds for a user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DinoVault.sol\":\"DinoVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DinoVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.12;\\n\\nimport './libraries/SafeBEP20.sol';\\nimport './libraries/SafeMath.sol';\\nimport './libraries/Ownable.sol';\\nimport './libraries/Pausable.sol';\\nimport './interfaces/IBEP20.sol';\\n\\ninterface IDinoTreasury {\\n    function claim() external returns (uint256);\\n}\\n\\ncontract DinoVault is Ownable, Pausable {\\n    using SafeBEP20 for IBEP20;\\n    using SafeMath for uint256;\\n\\n    struct UserAutoInfo {\\n        uint256 shares; // number of shares for a user\\n        uint256 lastDepositedTime; // keeps track of deposited time for potential penalty\\n        uint256 dinoAtLastUserAction; // keeps track of dino deposited at the last user action\\n        uint256 lastUserActionTime; // keeps track of the last user action time\\n    }\\n\\n    struct UserManualInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    IBEP20 public immutable token; // Dino token\\n    IDinoTreasury public treasury; // The treasury contract\\n\\n    // For manual pool\\n    mapping(address => UserManualInfo) public userManualInfo;\\n\\n    uint256 public dinoPerBlock; // DINO tokens created per block.\\n    uint256 public lastClaimDinoBlock; // Last block number that dens claims DINO tokens.\\n    uint256 lastRewardBlock; // Last block number that DINOs distribution occurs.\\n    uint256 accDinoPerShare; // Accumulated DINOs per share, times 1e12. See below.\\n    uint256 public startBlock; // The block number when DINO mining starts.\\n\\n    // For auto pool\\n    mapping(address => UserAutoInfo) public userAutoInfo;\\n\\n    uint256 public totalShares;\\n    uint256 public lastHarvestedTime;\\n    address public admin;\\n    address public feeTo;\\n\\n    uint256 public constant MAX_PERFORMANCE_FEE = 500; // 5%\\n    uint256 public constant MAX_CALL_FEE = 100; // 1%\\n    uint256 public constant MAX_WITHDRAW_FEE = 100; // 1%\\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 72 hours; // 3 days\\n\\n    uint256 public performanceFee = 200; // 2%\\n    uint256 public callFee = 25; // 0.25%\\n    uint256 public withdrawFee = 10; // 0.1%\\n    uint256 public withdrawFeePeriod = 72 hours; // 3 days\\n\\n    event DepositAutoPool(address indexed sender, uint256 amount, uint256 shares, uint256 lastDepositedTime);\\n    event WithdrawAutoPool(address indexed sender, uint256 amount, uint256 shares);\\n    event HarvestAutoPool(address indexed sender, uint256 performanceFee, uint256 callFee);\\n    event DepositManualPool(address indexed user, uint256 amount);\\n    event WithdrawManualPool(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event Pause();\\n    event Unpause();\\n\\n    uint256 public totalPoolBalance;\\n    uint256 public autoPoolPending;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _token: Dino token contract\\n     * @param _treasury: Dino treasury contract\\n     * @param _startBlock: start staking block\\n     * @param _feeTo: address to collects fees\\n     */\\n    constructor(\\n        IBEP20 _token,\\n        IDinoTreasury _treasury,\\n        uint256 _startBlock,\\n        address _feeTo\\n    ) public {\\n        token = _token;\\n        treasury = _treasury;\\n        startBlock = _startBlock;\\n        admin = msg.sender;\\n        feeTo = _feeTo;\\n\\n        dinoPerBlock = treasury.claim();\\n        lastClaimDinoBlock = block.number;\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, 'admin: wut?');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is a contract or a proxy\\n     */\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), 'contract not allowed');\\n        require(msg.sender == tx.origin, 'proxy contract not allowed');\\n        _;\\n    }\\n\\n    // Update reward variables of the manual pool to be up-to-date.\\n    function updateManualPool() public {\\n        if (lastClaimDinoBlock < block.number) {\\n            dinoPerBlock = treasury.claim().div(block.number.sub(lastClaimDinoBlock));\\n            lastClaimDinoBlock = block.number;\\n        }\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = totalPoolBalance;\\n        if (lpSupply == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = block.number.sub(lastRewardBlock);\\n        uint256 dinoReward = multiplier.mul(dinoPerBlock);\\n        accDinoPerShare = accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\\n        lastRewardBlock = block.number;\\n    }\\n\\n    // View function to see pending DINOs on frontend.\\n    function pendingManual(address _user) public view returns (uint256) {\\n        UserManualInfo storage user = userManualInfo[_user];\\n        uint256 _accDinoPerShare = accDinoPerShare;\\n        uint256 lpSupply = totalPoolBalance;\\n        if (block.number > lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number.sub(lastRewardBlock);\\n            uint256 dinoReward = multiplier.mul(dinoPerBlock);\\n            _accDinoPerShare = _accDinoPerShare.add(dinoReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(_accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Stake DINO tokens to DinoDens\\n    function depositManual(uint256 _amount) public {\\n        UserManualInfo storage user = userManualInfo[msg.sender];\\n        updateManualPool();\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                _safeDinoTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            token.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            totalPoolBalance = totalPoolBalance.add(_amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(accDinoPerShare).div(1e12);\\n\\n        emit DepositManualPool(msg.sender, _amount);\\n    }\\n\\n    // Withdraw DINO tokens from STAKING.\\n    function withdrawManual(uint256 _amount) public {\\n        UserManualInfo storage user = userManualInfo[msg.sender];\\n        require(user.amount >= _amount, 'withdraw: not good');\\n        updateManualPool();\\n        uint256 pending = user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            _safeDinoTransfer(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            totalPoolBalance = totalPoolBalance.sub(_amount);\\n            user.amount = user.amount.sub(_amount);\\n            token.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(accDinoPerShare).div(1e12);\\n\\n        emit WithdrawManualPool(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposits funds into the Dino Vault\\n     * @dev Only possible when contract not paused.\\n     * @param _amount: number of tokens to deposit (in DINO)\\n     */\\n    function depositAuto(uint256 _amount) external whenNotPaused notContract {\\n        require(_amount > 0, 'Nothing to deposit');\\n\\n        uint256 pool = balanceOf();\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        autoPoolPending = autoPoolPending.add(_amount);\\n        uint256 currentShares = 0;\\n        if (totalShares != 0) {\\n            currentShares = (_amount.mul(totalShares)).div(pool);\\n        } else {\\n            currentShares = _amount;\\n        }\\n        UserAutoInfo storage user = userAutoInfo[msg.sender];\\n\\n        user.shares = user.shares.add(currentShares);\\n        user.lastDepositedTime = block.timestamp;\\n\\n        totalShares = totalShares.add(currentShares);\\n\\n        user.dinoAtLastUserAction = user.shares.mul(balanceOf()).div(totalShares);\\n        user.lastUserActionTime = block.timestamp;\\n\\n        _earn();\\n\\n        emit DepositAutoPool(msg.sender, _amount, currentShares, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds for a user\\n     */\\n    function withdrawAll() external notContract {\\n        withdraw(userAutoInfo[msg.sender].shares);\\n    }\\n\\n    /**\\n     * @notice Reinvests DINO tokens into DinoDens\\n     * @dev Only possible when contract not paused.\\n     */\\n    function harvest() external notContract whenNotPaused {\\n        // Harvest from manual pool\\n        UserManualInfo storage user = userManualInfo[address(this)];\\n        updateManualPool();\\n        uint256 pending = user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            autoPoolPending = autoPoolPending.add(pending);\\n        }\\n        user.rewardDebt = user.amount.mul(accDinoPerShare).div(1e12);\\n\\n        uint256 bal = available();\\n        uint256 currentPerformanceFee = bal.mul(performanceFee).div(10000);\\n        token.safeTransfer(feeTo, currentPerformanceFee);\\n        autoPoolPending = autoPoolPending.sub(currentPerformanceFee);\\n\\n        uint256 currentCallFee = bal.mul(callFee).div(10000);\\n        token.safeTransfer(msg.sender, currentCallFee);\\n        autoPoolPending = autoPoolPending.sub(currentCallFee);\\n        \\n        _earn();\\n\\n        lastHarvestedTime = block.timestamp;\\n\\n        emit HarvestAutoPool(msg.sender, currentPerformanceFee, currentCallFee);\\n    }\\n\\n    /**\\n     * @notice Sets admin address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setAdmin(address _admin) external onlyOwner {\\n        require(_admin != address(0), 'Cannot be zero address');\\n        admin = _admin;\\n    }\\n\\n    /**\\n     * @notice Sets feeTo address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setFeeTo(address _feeTo) external onlyOwner {\\n        require(_feeTo != address(0), 'Cannot be zero address');\\n        feeTo = _feeTo;\\n    }\\n\\n    /**\\n     * @notice Sets performance fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {\\n        require(_performanceFee <= MAX_PERFORMANCE_FEE, 'performanceFee cannot be more than MAX_PERFORMANCE_FEE');\\n        performanceFee = _performanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets call fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setCallFee(uint256 _callFee) external onlyAdmin {\\n        require(_callFee <= MAX_CALL_FEE, 'callFee cannot be more than MAX_CALL_FEE');\\n        callFee = _callFee;\\n    }\\n\\n    /**\\n     * @notice Sets withdraw fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {\\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, 'withdrawFee cannot be more than MAX_WITHDRAW_FEE');\\n        withdrawFee = _withdrawFee;\\n    }\\n\\n    /**\\n     * @notice Sets withdraw fee period\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyAdmin {\\n        require(\\n            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,\\n            'withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD'\\n        );\\n        withdrawFeePeriod = _withdrawFeePeriod;\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw() public {\\n        UserManualInfo storage user = userManualInfo[msg.sender];\\n        token.safeTransfer(address(msg.sender), user.amount);\\n        totalPoolBalance = totalPoolBalance.sub(user.amount);\\n        emit EmergencyWithdraw(msg.sender, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    /**\\n     * @notice Withdraw unexpected tokens sent to the Dino Vault\\n     */\\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\\n        require(_token != address(token), 'Token cannot be same as deposit token');\\n\\n        uint256 amount = IBEP20(_token).balanceOf(address(this));\\n        IBEP20(_token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() external onlyAdmin whenNotPaused {\\n        _pause();\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() external onlyAdmin whenPaused {\\n        _unpause();\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @notice Calculates the expected harvest reward from third party\\n     * @return Expected reward to collect in DINO\\n     */\\n    function calculateHarvestDinoRewards() external view returns (uint256) {\\n        uint256 amount = pendingManual(address(this));\\n        amount = amount.add(available());\\n        uint256 currentCallFee = amount.mul(callFee).div(10000);\\n\\n        return currentCallFee;\\n    }\\n\\n    /**\\n     * @notice Calculates the total pending rewards that can be restaked\\n     * @return Returns total pending dino rewards\\n     */\\n    function calculateTotalPendingDinoRewards() external view returns (uint256) {\\n        uint256 amount = pendingManual(address(this));\\n        amount = amount.add(available());\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Calculates the price per share\\n     */\\n    function getPricePerFullShare() external view returns (uint256) {\\n        return totalShares == 0 ? 1e18 : balanceOf().mul(1e18).div(totalShares);\\n    }\\n\\n    /**\\n     * @notice Withdraws from funds from the Dino Vault\\n     * @param _shares: Number of shares to withdraw\\n     */\\n    function withdraw(uint256 _shares) public notContract {\\n        UserAutoInfo storage user = userAutoInfo[msg.sender];\\n        require(_shares > 0, 'Nothing to withdraw');\\n        require(_shares <= user.shares, 'Withdraw amount exceeds balance');\\n\\n        uint256 currentAmount = (balanceOf().mul(_shares)).div(totalShares);\\n        user.shares = user.shares.sub(_shares);\\n        totalShares = totalShares.sub(_shares);\\n\\n        uint256 bal = available();\\n        if (bal < currentAmount) {\\n            uint256 balWithdraw = currentAmount.sub(bal);\\n            // Withdraw from manual pool\\n            UserManualInfo storage pool = userManualInfo[address(this)];\\n            require(pool.amount >= balWithdraw, 'withdraw: not good');\\n            updateManualPool();\\n            uint256 pending = pool.amount.mul(accDinoPerShare).div(1e12).sub(pool.rewardDebt);\\n            if (pending > 0) {\\n                autoPoolPending = autoPoolPending.add(pending);\\n            }\\n            totalPoolBalance = totalPoolBalance.sub(balWithdraw);\\n            autoPoolPending = autoPoolPending.add(balWithdraw);\\n            pool.amount = pool.amount.sub(balWithdraw);\\n            pool.rewardDebt = pool.amount.mul(accDinoPerShare).div(1e12);\\n\\n            uint256 balAfter = available();\\n            uint256 diff = balAfter.sub(bal);\\n            if (diff < balWithdraw) {\\n                currentAmount = bal.add(diff);\\n            }\\n        }\\n\\n        if (block.timestamp < user.lastDepositedTime.add(withdrawFeePeriod)) {\\n            uint256 currentWithdrawFee = currentAmount.mul(withdrawFee).div(10000);\\n            token.safeTransfer(feeTo, currentWithdrawFee);\\n            autoPoolPending = autoPoolPending.sub(currentWithdrawFee);\\n            currentAmount = currentAmount.sub(currentWithdrawFee);\\n        }\\n\\n        if (user.shares > 0) {\\n            user.dinoAtLastUserAction = user.shares.mul(balanceOf()).div(totalShares);\\n        } else {\\n            user.dinoAtLastUserAction = 0;\\n        }\\n\\n        user.lastUserActionTime = block.timestamp;\\n\\n        token.safeTransfer(msg.sender, currentAmount);\\n        autoPoolPending = autoPoolPending.sub(currentAmount);\\n\\n        emit WithdrawAutoPool(msg.sender, currentAmount, _shares);\\n    }\\n\\n    // Safe dino transfer function, just in case if rounding error causes pool to not have enough DINOs.\\n    function _safeDinoTransfer(address _to, uint256 _amount) internal {\\n        uint256 dinoBal = token.balanceOf(address(this));\\n        if (_amount > dinoBal) {\\n            token.transfer(_to, dinoBal);\\n        } else {\\n            token.transfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Custom logic for how much the vault allows to be borrowed\\n     * @dev The contract puts 100% of the tokens to work.\\n     */\\n    function available() public view returns (uint256) {\\n        return autoPoolPending;\\n    }\\n\\n    /**\\n     * @notice Calculates the total underlying tokens\\n     * @dev It includes tokens held by the contract and held in MasterChef\\n     */\\n    function balanceOf() public view returns (uint256) {\\n        UserManualInfo storage pool = userManualInfo[address(this)];\\n        return pool.amount.add(autoPoolPending);\\n    }\\n\\n    /**\\n     * @notice Deposits tokens into DinoDens to earn staking rewards\\n     */\\n    function _earn() internal {\\n        uint256 bal = available();\\n        if (bal > 0) {\\n            UserManualInfo storage user = userManualInfo[address(this)];\\n            updateManualPool();\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accDinoPerShare).div(1e12).sub(user.rewardDebt);\\n                if (pending > 0) {\\n                    autoPoolPending = autoPoolPending.add(pending);\\n                }\\n            }\\n            totalPoolBalance = totalPoolBalance.add(bal);\\n            autoPoolPending = autoPoolPending.sub(bal);\\n            user.amount = user.amount.add(bal);\\n            user.rewardDebt = user.amount.mul(accDinoPerShare).div(1e12);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if address is a contract\\n     * @dev It prevents contract from being targetted\\n     */\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xe27071b39ed26249c13462ab65b7d522b0d623541e15d5be2d0543bfc7a52603\",\"license\":\"MIT\"},\"contracts/interfaces/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc34a0fc0edc354e31790feb123bc93302e8b21765768e546b633fb168469cb8\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x721e647998bd10326c34bbca3d952379a62266832bfdb21b18adbce0e1afde13\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xc7d2396c5481131099cdbc8138b2c4df45b5150edc983a78b5fd01acb1197cf2\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x702257f24af80a77b86990f29d8fc193413a5c3b9ddf8ac8f9f841199e78eef5\",\"license\":\"MIT\"},\"contracts/libraries/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), 'Pausable: paused');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), 'Pausable: not paused');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x7d87f53a725e8b2972fd92347ccf7c29fcd77cb8f995737bc0ecbe6e5b468057\",\"license\":\"MIT\"},\"contracts/libraries/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport '../interfaces/IBEP20.sol';\\nimport './SafeMath.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(value, 'SafeBEP20: decreased allowance below zero');\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ef26b7f4bf9d8ad7661dff713779c3a3f34cc713790eb2e717d3dd31a1fede9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1de2a24b6da5a4b2164df9a9fe8d0c16362fcb7e2aa3ddd283133da0d8d39c1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260c8600d556019600e55600a600f556203f4806010553480156200002757600080fd5b5060405162002bea38038062002bea833981810160405260808110156200004d57600080fd5b508051602082015160408301516060909301519192909160006200007062000196565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191681556001600160601b0319606086901b16608052600180546001600160a01b038681166001600160a01b031992831617928390556007869055600b8054831633179055600c805486831693169290921790915560408051634e71d92d60e01b815290519290911692634e71d92d926004808401936020939083900390910190829087803b1580156200015657600080fd5b505af11580156200016b573d6000803e3d6000fd5b505050506040513d60208110156200018257600080fd5b5051600355505043600455506200019a9050565b3390565b60805160601c6129f6620001f460003980610aa95280610f285280610fb452806112a85280611309528061172252806119bd5280611b2c5280611bff5280611e5252806121e35280612286528061232f52506129f66000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c8063715018a611610167578063b6ac642a116100ce578063df10b4e611610087578063df10b4e6146105ae578063e941fa78146105b6578063f2fde38b146105be578063f46901ed146105e4578063f851a4401461060a578063fc0c546a14610612576102a0565b8063b6ac642a14610553578063bdca916514610570578063d4b0de2f146103a1578063daf5c46514610578578063db2e21bc14610580578063def68a9c14610588576102a0565b8063853828b611610120578063853828b61461050e57806387788782146105165780638da5cb5b1461051e57806390321e1a14610526578063a576bfe21461052e578063b60f05311461054b576102a0565b8063715018a6146104c9578063722713f7146104d157806377c7b8fc146104d95780637c8ed2dc146104e15780637efc0d3d146104fe5780638456cb5914610506576102a0565b80633f4ba83a1161020b5780635687c1ab116101c45780635687c1ab1461040e5780635c975abb1461041657806361d027b3146104325780636bd29d601461043a578063704b6c021461048657806370897b23146104ac576102a0565b80633f4ba83a146103de5780634641257d146103e657806348a0d754146103ee57806348cd4cb1146103f65780634b8c43d0146103fe5780635026d63e14610406576102a0565b80632a94450f1161025d5780632a94450f146103845780632ad5a53f146103a15780632cfc5f01146103a95780632d034973146103b15780632e1a7d4d146103b95780633a98ef39146103d6576102a0565b80630144efab146102a5578063017e7e58146102af5780631773125e146102d35780631c2b670e1461030b5780631efac1b81461034a5780632646582614610367575b600080fd5b6102ad61061a565b005b6102b761074a565b604080516001600160a01b039092168252519081900360200190f35b6102f9600480360360208110156102e957600080fd5b50356001600160a01b0316610759565b60408051918252519081900360200190f35b6103316004803603602081101561032157600080fd5b50356001600160a01b0316610817565b6040805192835260208301919091528051918290030190f35b6102ad6004803603602081101561036057600080fd5b5035610830565b6102ad6004803603602081101561037d57600080fd5b50356108c4565b6102ad6004803603602081101561039a57600080fd5b5035610956565b6102f9610bb6565b6102f9610bbb565b6102f9610bc2565b6102ad600480360360208110156103cf57600080fd5b5035610c08565b6102f961102b565b6102ad611031565b6102ad611101565b6102f961138d565b6102f9611393565b6102f9611399565b6102f961139f565b6102f96113a5565b61041e6113ab565b604080519115158252519081900360200190f35b6102b76113bb565b6104606004803603602081101561045057600080fd5b50356001600160a01b03166113ca565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6102ad6004803603602081101561049c57600080fd5b50356001600160a01b03166113f1565b6102ad600480360360208110156104c257600080fd5b50356114bf565b6102ad611552565b6102f96115f4565b6102f9611617565b6102ad600480360360208110156104f757600080fd5b5035611651565b6102f96117a2565b6102ad6117a8565b6102ad611875565b6102f9611931565b6102b7611937565b6102f9611946565b6102ad6004803603602081101561054457600080fd5b503561194c565b6102f9611a5c565b6102ad6004803603602081101561056957600080fd5b5035611a62565b6102f9611af4565b6102f9611afa565b6102ad611b13565b6102ad6004803603602081101561059e57600080fd5b50356001600160a01b0316611bb0565b6102f9611d03565b6102f9611d09565b6102ad600480360360208110156105d457600080fd5b50356001600160a01b0316611d0f565b6102ad600480360360208110156105fa57600080fd5b50356001600160a01b0316611d73565b6102b7611e41565b6102b7611e50565b4360045410156106c6576106be61063c60045443611e7490919063ffffffff16565b600160009054906101000a90046001600160a01b03166001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b505050506040513d60208110156106b657600080fd5b505190611ebf565b600355436004555b60055443116106d457610748565b601154806106e6575043600555610748565b60006106fd60055443611e7490919063ffffffff16565b9050600061071660035483611f0190919063ffffffff16565b905061073d6107348461072e8464e8d4a51000611f01565b90611ebf565b60065490611f5a565b600655505043600555505b565b600c546001600160a01b031681565b6001600160a01b03811660009081526002602052604081206006546011546005544311801561078757508015155b156107e05760006107a360055443611e7490919063ffffffff16565b905060006107bc60035483611f0190919063ffffffff16565b90506107db6107d48461072e8464e8d4a51000611f01565b8590611f5a565b935050505b61080e836001015461080864e8d4a5100061072e868860000154611f0190919063ffffffff16565b90611e74565b95945050505050565b6002602052600090815260409020805460019091015482565b600b546001600160a01b0316331461087d576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6203f4808111156108bf5760405162461bcd60e51b815260040180806020018281038252603d81526020018061297d603d913960400191505060405180910390fd5b601055565b600b546001600160a01b03163314610911576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b60648111156109515760405162461bcd60e51b81526004018080602001828103825260288152602001806128de6028913960400191505060405180910390fd5b600e55565b61095e6113ab565b156109a3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6109ac33611fb4565b156109f5576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214610a46576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b60008111610a90576040805162461bcd60e51b8152602060048201526012602482015271139bdd1a1a5b99c81d1bc819195c1bdcda5d60721b604482015290519081900360640190fd5b6000610a9a6115f4565b9050610ad16001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611fba565b601254610ade9083611f5a565b60125560095460009015610b0c57610b058261072e60095486611f0190919063ffffffff16565b9050610b0f565b50815b3360009081526008602052604090208054610b2a9083611f5a565b8155426001820155600954610b3f9083611f5a565b6009819055610b5b9061072e610b536115f4565b845490611f01565b6002820155426003820155610b6e61201a565b60408051858152602081018490524281830152905133917ff1c0d97ce9669db583b01fa485915aa17226773687d5e8ed6456e39aa28e3cf6919081900360600190a250505050565b606481565b6203f48081565b600080610bce30610759565b9050610be2610bdb61138d565b8290611f5a565b90506000610c0161271061072e600e5485611f0190919063ffffffff16565b9250505090565b610c1133611fb4565b15610c5a576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214610cab576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b33600090815260086020526040902081610d02576040805162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b604482015290519081900360640190fd5b8054821115610d58576040805162461bcd60e51b815260206004820152601f60248201527f576974686472617720616d6f756e7420657863656564732062616c616e636500604482015290519081900360640190fd5b6000610d7260095461072e85610d6c6115f4565b90611f01565b8254909150610d819084611e74565b8255600954610d909084611e74565b6009556000610d9d61138d565b905081811015610edf576000610db38383611e74565b306000908152600260205260409020805491925090821115610e11576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610e1961061a565b6000610e45826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b90508015610e5e57601254610e5a9082611f5a565b6012555b601154610e6b9084611e74565b601155601254610e7b9084611f5a565b6012558154610e8a9084611e74565b808355600654610ea59164e8d4a510009161072e9190611f01565b60018301556000610eb461138d565b90506000610ec28287611e74565b905084811015610ed957610ed68682611f5a565b96505b50505050505b6010546001840154610ef091611f5a565b421015610f6f576000610f1461271061072e600f5486611f0190919063ffffffff16565b600c54909150610f51906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836120e1565b601254610f5e9082611e74565b601255610f6b8382611e74565b9250505b825415610f9957610f8f60095461072e610f876115f4565b865490611f01565b6002840155610fa1565b600060028401555b426003840155610fdb6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846120e1565b601254610fe89083611e74565b6012556040805183815260208101869052815133927f02000b8c3f21e31b39b25cf786528636af12d4706a0af1f1efd52da23c2f266e928290030190a250505050565b60095481565b600b546001600160a01b0316331461107e576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6110866113ab565b6110ce576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6110d6612138565b6040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b61110a33611fb4565b15611153576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b3332146111a4576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b6111ac6113ab565b156111f1576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b30600090815260026020526040902061120861061a565b6000611234826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b9050801561124d576012546112499082611f5a565b6012555b60065482546112669164e8d4a510009161072e91611f01565b6001830155600061127561138d565b9050600061129461271061072e600d5485611f0190919063ffffffff16565b600c549091506112d1906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836120e1565b6012546112de9082611e74565b601255600e546000906112fa906127109061072e908690611f01565b90506113306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836120e1565b60125461133d9082611e74565b60125561134861201a565b42600a556040805183815260208101839052815133927f7e63228bbc641105e7e49c3a4f49d947f7bbbb6304e3f8776fb9a2554f73cc81928290030190a25050505050565b60125490565b60075481565b60045481565b60115481565b60035481565b600054600160a01b900460ff1690565b6001546001600160a01b031681565b60086020526000908152604090208054600182015460028301546003909301549192909184565b6113f96121db565b6000546001600160a01b03908116911614611449576040805162461bcd60e51b8152602060048201819052602482015260008051602061295d833981519152604482015290519081900360640190fd5b6001600160a01b03811661149d576040805162461bcd60e51b815260206004820152601660248201527543616e6e6f74206265207a65726f206164647265737360501b604482015290519081900360640190fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b0316331461150c576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6101f481111561154d5760405162461bcd60e51b81526004018080602001828103825260368152602001806129066036913960400191505060405180910390fd5b600d55565b61155a6121db565b6000546001600160a01b039081169116146115aa576040805162461bcd60e51b8152602060048201819052602482015260008051602061295d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b306000908152600260205260408120601254815461161191611f5a565b91505090565b60006009546000146116425761163d60095461072e670de0b6b3a7640000610d6c6115f4565b61164c565b670de0b6b3a76400005b905090565b33600090815260026020526040902080548211156116ab576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6116b361061a565b60006116df826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b905080156116f1576116f133826121df565b8215611749576011546117049084611e74565b60115581546117139084611e74565b82556117496001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856120e1565b60065482546117629164e8d4a510009161072e91611f01565b600183015560408051848152905133917fff3e20b0a4bbec23ff51ab3d657428bb23b29af0b9dcd65cbb35cde5053d0113919081900360200190a2505050565b60125481565b600b546001600160a01b031633146117f5576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6117fd6113ab565b15611842576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b61184a6123d5565b6040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b61187e33611fb4565b156118c7576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214611918576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b3360009081526008602052604090205461074890610c08565b600d5481565b6000546001600160a01b031690565b600e5481565b33600090815260026020526040902061196361061a565b8054156119aa576000611996826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b905080156119a8576119a833826121df565b505b8115611a04576119e56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611fba565b6011546119f29083611f5a565b6011558054611a019083611f5a565b81555b6006548154611a1d9164e8d4a510009161072e91611f01565b600182015560408051838152905133917f9eb5819c3f6b7b568bceccc0004e5655d7e03c02b79d8a04aedf4a4eb7409785919081900360200190a25050565b600a5481565b600b546001600160a01b03163314611aaf576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6064811115611aef5760405162461bcd60e51b81526004018080602001828103825260308152602001806129ba6030913960400191505060405180910390fd5b600f55565b6101f481565b600080611b0630610759565b9050611611610bdb61138d565b33600081815260026020526040902080549091611b5b917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691906120e1565b8054601154611b6991611e74565b6011558054604080519182525133917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a26000808255600190910155565b600b546001600160a01b03163314611bfd576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611c6e5760405162461bcd60e51b81526004018080602001828103825260258152602001806128b96025913960400191505060405180910390fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b50519050611cff6001600160a01b03831633836120e1565b5050565b60105481565b600f5481565b611d176121db565b6000546001600160a01b03908116911614611d67576040805162461bcd60e51b8152602060048201819052602482015260008051602061295d833981519152604482015290519081900360640190fd5b611d708161245e565b50565b611d7b6121db565b6000546001600160a01b03908116911614611dcb576040805162461bcd60e51b8152602060048201819052602482015260008051602061295d833981519152604482015290519081900360640190fd5b6001600160a01b038116611e1f576040805162461bcd60e51b815260206004820152601660248201527543616e6e6f74206265207a65726f206164647265737360501b604482015290519081900360640190fd5b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611eb683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124fe565b90505b92915050565b6000611eb683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612595565b600082611f1057506000611eb9565b82820282848281611f1d57fe5b0414611eb65760405162461bcd60e51b815260040180806020018281038252602181526020018061293c6021913960400191505060405180910390fd5b600082820183811015611eb6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526120149085906125fa565b50505050565b600061202461138d565b90508015611d705730600090815260026020526040902061204361061a565b805415612091576000612076826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b9050801561208f5760125461208b9082611f5a565b6012555b505b60115461209e9083611f5a565b6011556012546120ae9083611e74565b60125580546120bd9083611f5a565b8082556006546120d89164e8d4a510009161072e9190611f01565b60019091015550565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526121339084906125fa565b505050565b6121406113ab565b612188576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6121be6121db565b604080516001600160a01b039092168252519081900360200190a1565b3390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561224e57600080fd5b505afa158015612262573d6000803e3d6000fd5b505050506040513d602081101561227857600080fd5b505190508082111561232d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156122fb57600080fd5b505af115801561230f573d6000803e3d6000fd5b505050506040513d602081101561232557600080fd5b506121339050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156123a457600080fd5b505af11580156123b8573d6000803e3d6000fd5b505050506040513d60208110156123ce57600080fd5b5050505050565b6123dd6113ab565b15612422576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121be6121db565b6001600160a01b0381166124a35760405162461bcd60e51b81526004018080602001828103825260268152602001806128936026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000818484111561258d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561255257818101518382015260200161253a565b50505050905090810190601f16801561257f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836125e45760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561255257818101518382015260200161253a565b5060008385816125f057fe5b0495945050505050565b606061264f826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126ab9092919063ffffffff16565b8051909150156121335780806020019051602081101561266e57600080fd5b50516121335760405162461bcd60e51b815260040180806020018281038252602a815260200180612869602a913960400191505060405180910390fd5b60606126ba84846000856126c2565b949350505050565b60606126cd8561282f565b61271e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061275d5780518252601f19909201916020918201910161273e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146127bf576040519150601f19603f3d011682016040523d82523d6000602084013e6127c4565b606091505b509150915081156127d85791506126ba9050565b8051156127e85780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561255257818101518382015260200161253a565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906126ba57505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373546f6b656e2063616e6e6f742062652073616d65206173206465706f73697420746f6b656e63616c6c4665652063616e6e6f74206265206d6f7265207468616e204d41585f43414c4c5f464545706572666f726d616e63654665652063616e6e6f74206265206d6f7265207468616e204d41585f504552464f524d414e43455f464545536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727769746864726177466565506572696f642063616e6e6f74206265206d6f7265207468616e204d41585f57495448445241575f4645455f504552494f4477697468647261774665652063616e6e6f74206265206d6f7265207468616e204d41585f57495448445241575f464545a164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c8063715018a611610167578063b6ac642a116100ce578063df10b4e611610087578063df10b4e6146105ae578063e941fa78146105b6578063f2fde38b146105be578063f46901ed146105e4578063f851a4401461060a578063fc0c546a14610612576102a0565b8063b6ac642a14610553578063bdca916514610570578063d4b0de2f146103a1578063daf5c46514610578578063db2e21bc14610580578063def68a9c14610588576102a0565b8063853828b611610120578063853828b61461050e57806387788782146105165780638da5cb5b1461051e57806390321e1a14610526578063a576bfe21461052e578063b60f05311461054b576102a0565b8063715018a6146104c9578063722713f7146104d157806377c7b8fc146104d95780637c8ed2dc146104e15780637efc0d3d146104fe5780638456cb5914610506576102a0565b80633f4ba83a1161020b5780635687c1ab116101c45780635687c1ab1461040e5780635c975abb1461041657806361d027b3146104325780636bd29d601461043a578063704b6c021461048657806370897b23146104ac576102a0565b80633f4ba83a146103de5780634641257d146103e657806348a0d754146103ee57806348cd4cb1146103f65780634b8c43d0146103fe5780635026d63e14610406576102a0565b80632a94450f1161025d5780632a94450f146103845780632ad5a53f146103a15780632cfc5f01146103a95780632d034973146103b15780632e1a7d4d146103b95780633a98ef39146103d6576102a0565b80630144efab146102a5578063017e7e58146102af5780631773125e146102d35780631c2b670e1461030b5780631efac1b81461034a5780632646582614610367575b600080fd5b6102ad61061a565b005b6102b761074a565b604080516001600160a01b039092168252519081900360200190f35b6102f9600480360360208110156102e957600080fd5b50356001600160a01b0316610759565b60408051918252519081900360200190f35b6103316004803603602081101561032157600080fd5b50356001600160a01b0316610817565b6040805192835260208301919091528051918290030190f35b6102ad6004803603602081101561036057600080fd5b5035610830565b6102ad6004803603602081101561037d57600080fd5b50356108c4565b6102ad6004803603602081101561039a57600080fd5b5035610956565b6102f9610bb6565b6102f9610bbb565b6102f9610bc2565b6102ad600480360360208110156103cf57600080fd5b5035610c08565b6102f961102b565b6102ad611031565b6102ad611101565b6102f961138d565b6102f9611393565b6102f9611399565b6102f961139f565b6102f96113a5565b61041e6113ab565b604080519115158252519081900360200190f35b6102b76113bb565b6104606004803603602081101561045057600080fd5b50356001600160a01b03166113ca565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6102ad6004803603602081101561049c57600080fd5b50356001600160a01b03166113f1565b6102ad600480360360208110156104c257600080fd5b50356114bf565b6102ad611552565b6102f96115f4565b6102f9611617565b6102ad600480360360208110156104f757600080fd5b5035611651565b6102f96117a2565b6102ad6117a8565b6102ad611875565b6102f9611931565b6102b7611937565b6102f9611946565b6102ad6004803603602081101561054457600080fd5b503561194c565b6102f9611a5c565b6102ad6004803603602081101561056957600080fd5b5035611a62565b6102f9611af4565b6102f9611afa565b6102ad611b13565b6102ad6004803603602081101561059e57600080fd5b50356001600160a01b0316611bb0565b6102f9611d03565b6102f9611d09565b6102ad600480360360208110156105d457600080fd5b50356001600160a01b0316611d0f565b6102ad600480360360208110156105fa57600080fd5b50356001600160a01b0316611d73565b6102b7611e41565b6102b7611e50565b4360045410156106c6576106be61063c60045443611e7490919063ffffffff16565b600160009054906101000a90046001600160a01b03166001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b505050506040513d60208110156106b657600080fd5b505190611ebf565b600355436004555b60055443116106d457610748565b601154806106e6575043600555610748565b60006106fd60055443611e7490919063ffffffff16565b9050600061071660035483611f0190919063ffffffff16565b905061073d6107348461072e8464e8d4a51000611f01565b90611ebf565b60065490611f5a565b600655505043600555505b565b600c546001600160a01b031681565b6001600160a01b03811660009081526002602052604081206006546011546005544311801561078757508015155b156107e05760006107a360055443611e7490919063ffffffff16565b905060006107bc60035483611f0190919063ffffffff16565b90506107db6107d48461072e8464e8d4a51000611f01565b8590611f5a565b935050505b61080e836001015461080864e8d4a5100061072e868860000154611f0190919063ffffffff16565b90611e74565b95945050505050565b6002602052600090815260409020805460019091015482565b600b546001600160a01b0316331461087d576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6203f4808111156108bf5760405162461bcd60e51b815260040180806020018281038252603d81526020018061297d603d913960400191505060405180910390fd5b601055565b600b546001600160a01b03163314610911576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b60648111156109515760405162461bcd60e51b81526004018080602001828103825260288152602001806128de6028913960400191505060405180910390fd5b600e55565b61095e6113ab565b156109a3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6109ac33611fb4565b156109f5576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214610a46576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b60008111610a90576040805162461bcd60e51b8152602060048201526012602482015271139bdd1a1a5b99c81d1bc819195c1bdcda5d60721b604482015290519081900360640190fd5b6000610a9a6115f4565b9050610ad16001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611fba565b601254610ade9083611f5a565b60125560095460009015610b0c57610b058261072e60095486611f0190919063ffffffff16565b9050610b0f565b50815b3360009081526008602052604090208054610b2a9083611f5a565b8155426001820155600954610b3f9083611f5a565b6009819055610b5b9061072e610b536115f4565b845490611f01565b6002820155426003820155610b6e61201a565b60408051858152602081018490524281830152905133917ff1c0d97ce9669db583b01fa485915aa17226773687d5e8ed6456e39aa28e3cf6919081900360600190a250505050565b606481565b6203f48081565b600080610bce30610759565b9050610be2610bdb61138d565b8290611f5a565b90506000610c0161271061072e600e5485611f0190919063ffffffff16565b9250505090565b610c1133611fb4565b15610c5a576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214610cab576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b33600090815260086020526040902081610d02576040805162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b604482015290519081900360640190fd5b8054821115610d58576040805162461bcd60e51b815260206004820152601f60248201527f576974686472617720616d6f756e7420657863656564732062616c616e636500604482015290519081900360640190fd5b6000610d7260095461072e85610d6c6115f4565b90611f01565b8254909150610d819084611e74565b8255600954610d909084611e74565b6009556000610d9d61138d565b905081811015610edf576000610db38383611e74565b306000908152600260205260409020805491925090821115610e11576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610e1961061a565b6000610e45826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b90508015610e5e57601254610e5a9082611f5a565b6012555b601154610e6b9084611e74565b601155601254610e7b9084611f5a565b6012558154610e8a9084611e74565b808355600654610ea59164e8d4a510009161072e9190611f01565b60018301556000610eb461138d565b90506000610ec28287611e74565b905084811015610ed957610ed68682611f5a565b96505b50505050505b6010546001840154610ef091611f5a565b421015610f6f576000610f1461271061072e600f5486611f0190919063ffffffff16565b600c54909150610f51906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836120e1565b601254610f5e9082611e74565b601255610f6b8382611e74565b9250505b825415610f9957610f8f60095461072e610f876115f4565b865490611f01565b6002840155610fa1565b600060028401555b426003840155610fdb6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846120e1565b601254610fe89083611e74565b6012556040805183815260208101869052815133927f02000b8c3f21e31b39b25cf786528636af12d4706a0af1f1efd52da23c2f266e928290030190a250505050565b60095481565b600b546001600160a01b0316331461107e576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6110866113ab565b6110ce576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6110d6612138565b6040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b61110a33611fb4565b15611153576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b3332146111a4576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b6111ac6113ab565b156111f1576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b30600090815260026020526040902061120861061a565b6000611234826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b9050801561124d576012546112499082611f5a565b6012555b60065482546112669164e8d4a510009161072e91611f01565b6001830155600061127561138d565b9050600061129461271061072e600d5485611f0190919063ffffffff16565b600c549091506112d1906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836120e1565b6012546112de9082611e74565b601255600e546000906112fa906127109061072e908690611f01565b90506113306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836120e1565b60125461133d9082611e74565b60125561134861201a565b42600a556040805183815260208101839052815133927f7e63228bbc641105e7e49c3a4f49d947f7bbbb6304e3f8776fb9a2554f73cc81928290030190a25050505050565b60125490565b60075481565b60045481565b60115481565b60035481565b600054600160a01b900460ff1690565b6001546001600160a01b031681565b60086020526000908152604090208054600182015460028301546003909301549192909184565b6113f96121db565b6000546001600160a01b03908116911614611449576040805162461bcd60e51b8152602060048201819052602482015260008051602061295d833981519152604482015290519081900360640190fd5b6001600160a01b03811661149d576040805162461bcd60e51b815260206004820152601660248201527543616e6e6f74206265207a65726f206164647265737360501b604482015290519081900360640190fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b0316331461150c576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6101f481111561154d5760405162461bcd60e51b81526004018080602001828103825260368152602001806129066036913960400191505060405180910390fd5b600d55565b61155a6121db565b6000546001600160a01b039081169116146115aa576040805162461bcd60e51b8152602060048201819052602482015260008051602061295d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b306000908152600260205260408120601254815461161191611f5a565b91505090565b60006009546000146116425761163d60095461072e670de0b6b3a7640000610d6c6115f4565b61164c565b670de0b6b3a76400005b905090565b33600090815260026020526040902080548211156116ab576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6116b361061a565b60006116df826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b905080156116f1576116f133826121df565b8215611749576011546117049084611e74565b60115581546117139084611e74565b82556117496001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856120e1565b60065482546117629164e8d4a510009161072e91611f01565b600183015560408051848152905133917fff3e20b0a4bbec23ff51ab3d657428bb23b29af0b9dcd65cbb35cde5053d0113919081900360200190a2505050565b60125481565b600b546001600160a01b031633146117f5576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6117fd6113ab565b15611842576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b61184a6123d5565b6040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b61187e33611fb4565b156118c7576040805162461bcd60e51b815260206004820152601460248201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604482015290519081900360640190fd5b333214611918576040805162461bcd60e51b815260206004820152601a6024820152791c1c9bde1e4818dbdb9d1c9858dd081b9bdd08185b1b1bddd95960321b604482015290519081900360640190fd5b3360009081526008602052604090205461074890610c08565b600d5481565b6000546001600160a01b031690565b600e5481565b33600090815260026020526040902061196361061a565b8054156119aa576000611996826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b905080156119a8576119a833826121df565b505b8115611a04576119e56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611fba565b6011546119f29083611f5a565b6011558054611a019083611f5a565b81555b6006548154611a1d9164e8d4a510009161072e91611f01565b600182015560408051838152905133917f9eb5819c3f6b7b568bceccc0004e5655d7e03c02b79d8a04aedf4a4eb7409785919081900360200190a25050565b600a5481565b600b546001600160a01b03163314611aaf576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b6064811115611aef5760405162461bcd60e51b81526004018080602001828103825260308152602001806129ba6030913960400191505060405180910390fd5b600f55565b6101f481565b600080611b0630610759565b9050611611610bdb61138d565b33600081815260026020526040902080549091611b5b917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691906120e1565b8054601154611b6991611e74565b6011558054604080519182525133917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a26000808255600190910155565b600b546001600160a01b03163314611bfd576040805162461bcd60e51b815260206004820152600b60248201526a61646d696e3a207775743f60a81b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611c6e5760405162461bcd60e51b81526004018080602001828103825260258152602001806128b96025913960400191505060405180910390fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b50519050611cff6001600160a01b03831633836120e1565b5050565b60105481565b600f5481565b611d176121db565b6000546001600160a01b03908116911614611d67576040805162461bcd60e51b8152602060048201819052602482015260008051602061295d833981519152604482015290519081900360640190fd5b611d708161245e565b50565b611d7b6121db565b6000546001600160a01b03908116911614611dcb576040805162461bcd60e51b8152602060048201819052602482015260008051602061295d833981519152604482015290519081900360640190fd5b6001600160a01b038116611e1f576040805162461bcd60e51b815260206004820152601660248201527543616e6e6f74206265207a65726f206164647265737360501b604482015290519081900360640190fd5b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611eb683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124fe565b90505b92915050565b6000611eb683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612595565b600082611f1057506000611eb9565b82820282848281611f1d57fe5b0414611eb65760405162461bcd60e51b815260040180806020018281038252602181526020018061293c6021913960400191505060405180910390fd5b600082820183811015611eb6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526120149085906125fa565b50505050565b600061202461138d565b90508015611d705730600090815260026020526040902061204361061a565b805415612091576000612076826001015461080864e8d4a5100061072e6006548760000154611f0190919063ffffffff16565b9050801561208f5760125461208b9082611f5a565b6012555b505b60115461209e9083611f5a565b6011556012546120ae9083611e74565b60125580546120bd9083611f5a565b8082556006546120d89164e8d4a510009161072e9190611f01565b60019091015550565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526121339084906125fa565b505050565b6121406113ab565b612188576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6121be6121db565b604080516001600160a01b039092168252519081900360200190a1565b3390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561224e57600080fd5b505afa158015612262573d6000803e3d6000fd5b505050506040513d602081101561227857600080fd5b505190508082111561232d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156122fb57600080fd5b505af115801561230f573d6000803e3d6000fd5b505050506040513d602081101561232557600080fd5b506121339050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156123a457600080fd5b505af11580156123b8573d6000803e3d6000fd5b505050506040513d60208110156123ce57600080fd5b5050505050565b6123dd6113ab565b15612422576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121be6121db565b6001600160a01b0381166124a35760405162461bcd60e51b81526004018080602001828103825260268152602001806128936026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000818484111561258d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561255257818101518382015260200161253a565b50505050905090810190601f16801561257f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836125e45760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561255257818101518382015260200161253a565b5060008385816125f057fe5b0495945050505050565b606061264f826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126ab9092919063ffffffff16565b8051909150156121335780806020019051602081101561266e57600080fd5b50516121335760405162461bcd60e51b815260040180806020018281038252602a815260200180612869602a913960400191505060405180910390fd5b60606126ba84846000856126c2565b949350505050565b60606126cd8561282f565b61271e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061275d5780518252601f19909201916020918201910161273e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146127bf576040519150601f19603f3d011682016040523d82523d6000602084013e6127c4565b606091505b509150915081156127d85791506126ba9050565b8051156127e85780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561255257818101518382015260200161253a565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906126ba57505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373546f6b656e2063616e6e6f742062652073616d65206173206465706f73697420746f6b656e63616c6c4665652063616e6e6f74206265206d6f7265207468616e204d41585f43414c4c5f464545706572666f726d616e63654665652063616e6e6f74206265206d6f7265207468616e204d41585f504552464f524d414e43455f464545536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727769746864726177466565506572696f642063616e6e6f74206265206d6f7265207468616e204d41585f57495448445241575f4645455f504552494f4477697468647261774665652063616e6e6f74206265206d6f7265207468616e204d41585f57495448445241575f464545a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "available()": {
        "details": "The contract puts 100% of the tokens to work."
      },
      "balanceOf()": {
        "details": "It includes tokens held by the contract and held in MasterChef"
      },
      "calculateHarvestDinoRewards()": {
        "returns": {
          "_0": "Expected reward to collect in DINO"
        }
      },
      "calculateTotalPendingDinoRewards()": {
        "returns": {
          "_0": "Returns total pending dino rewards"
        }
      },
      "constructor": {
        "params": {
          "_feeTo": ": address to collects fees",
          "_startBlock": ": start staking block",
          "_token": ": Dino token contract",
          "_treasury": ": Dino treasury contract"
        }
      },
      "depositAuto(uint256)": {
        "details": "Only possible when contract not paused.",
        "params": {
          "_amount": ": number of tokens to deposit (in DINO)"
        }
      },
      "harvest()": {
        "details": "Only possible when contract not paused."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only possible when contract not paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAdmin(address)": {
        "details": "Only callable by the contract owner."
      },
      "setCallFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setFeeTo(address)": {
        "details": "Only callable by the contract owner."
      },
      "setPerformanceFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setWithdrawFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setWithdrawFeePeriod(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only possible when contract is paused."
      },
      "withdraw(uint256)": {
        "params": {
          "_shares": ": Number of shares to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "available()": {
        "notice": "Custom logic for how much the vault allows to be borrowed"
      },
      "balanceOf()": {
        "notice": "Calculates the total underlying tokens"
      },
      "calculateHarvestDinoRewards()": {
        "notice": "Calculates the expected harvest reward from third party"
      },
      "calculateTotalPendingDinoRewards()": {
        "notice": "Calculates the total pending rewards that can be restaked"
      },
      "constructor": "Constructor",
      "depositAuto(uint256)": {
        "notice": "Deposits funds into the Dino Vault"
      },
      "getPricePerFullShare()": {
        "notice": "Calculates the price per share"
      },
      "harvest()": {
        "notice": "Reinvests DINO tokens into DinoDens"
      },
      "inCaseTokensGetStuck(address)": {
        "notice": "Withdraw unexpected tokens sent to the Dino Vault"
      },
      "pause()": {
        "notice": "Triggers stopped state"
      },
      "setAdmin(address)": {
        "notice": "Sets admin address"
      },
      "setCallFee(uint256)": {
        "notice": "Sets call fee"
      },
      "setFeeTo(address)": {
        "notice": "Sets feeTo address"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets performance fee"
      },
      "setWithdrawFee(uint256)": {
        "notice": "Sets withdraw fee"
      },
      "setWithdrawFeePeriod(uint256)": {
        "notice": "Sets withdraw fee period"
      },
      "unpause()": {
        "notice": "Returns to normal state"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws from funds from the Dino Vault"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds for a user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12540,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12670,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8302,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDinoTreasury)8274"
      },
      {
        "astId": 8306,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "userManualInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UserManualInfo)8298_storage)"
      },
      {
        "astId": 8308,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "dinoPerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8310,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "lastClaimDinoBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 8312,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "lastRewardBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8314,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "accDinoPerShare",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8316,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "startBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8320,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "userAutoInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserAutoInfo)8293_storage)"
      },
      {
        "astId": 8322,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "totalShares",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 8324,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "lastHarvestedTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 8326,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "admin",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 8328,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "feeTo",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 8343,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 8346,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "callFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8349,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 8352,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "withdrawFeePeriod",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 8402,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "totalPoolBalance",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 8404,
        "contract": "contracts/DinoVault.sol:DinoVault",
        "label": "autoPoolPending",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDinoTreasury)8274": {
        "encoding": "inplace",
        "label": "contract IDinoTreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserAutoInfo)8293_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DinoVault.UserAutoInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserAutoInfo)8293_storage"
      },
      "t_mapping(t_address,t_struct(UserManualInfo)8298_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DinoVault.UserManualInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserManualInfo)8298_storage"
      },
      "t_struct(UserAutoInfo)8293_storage": {
        "encoding": "inplace",
        "label": "struct DinoVault.UserAutoInfo",
        "members": [
          {
            "astId": 8286,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8288,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "lastDepositedTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8290,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "dinoAtLastUserAction",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8292,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "lastUserActionTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserManualInfo)8298_storage": {
        "encoding": "inplace",
        "label": "struct DinoVault.UserManualInfo",
        "members": [
          {
            "astId": 8295,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8297,
            "contract": "contracts/DinoVault.sol:DinoVault",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}